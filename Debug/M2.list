
M2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800431c  0800431c  0001431c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000160  20000000  08004324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000968  20000160  08004484  00020160  2**2
                  ALLOC
  7 ._user_heap_stack 00001000  20000ac8  08004484  00020ac8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022871  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004952  00000000  00000000  000429fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a73d  00000000  00000000  0004734c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f40  00000000  00000000  00051a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001388  00000000  00000000  000529d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008c91  00000000  00000000  00053d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005183  00000000  00000000  0005c9e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00061b6c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003214  00000000  00000000  00061be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  00064dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00064e98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000160 	.word	0x20000160
 8000128:	00000000 	.word	0x00000000
 800012c:	08004194 	.word	0x08004194

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000164 	.word	0x20000164
 8000148:	08004194 	.word	0x08004194

0800014c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800014c:	2305      	movs	r3, #5
{
 800014e:	b510      	push	{r4, lr}
 8000150:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000152:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000154:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800015a:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800015c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800015e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000160:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000162:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000164:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000168:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800016a:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800016c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800016e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000170:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000172:	f000 ff97 	bl	80010a4 <HAL_RCC_OscConfig>
 8000176:	b100      	cbz	r0, 800017a <SystemClock_Config+0x2e>
 8000178:	e7fe      	b.n	8000178 <SystemClock_Config+0x2c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800017a:	230f      	movs	r3, #15
 800017c:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800017e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000182:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000184:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000186:	4621      	mov	r1, r4
 8000188:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800018a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800018c:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800018e:	f001 f951 	bl	8001434 <HAL_RCC_ClockConfig>
 8000192:	b100      	cbz	r0, 8000196 <SystemClock_Config+0x4a>
 8000194:	e7fe      	b.n	8000194 <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000196:	2311      	movs	r3, #17
 8000198:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800019a:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800019e:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001a0:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001a2:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001a4:	f001 fa2e 	bl	8001604 <HAL_RCCEx_PeriphCLKConfig>
 80001a8:	4604      	mov	r4, r0
 80001aa:	b100      	cbz	r0, 80001ae <SystemClock_Config+0x62>
 80001ac:	e7fe      	b.n	80001ac <SystemClock_Config+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80001ae:	f001 f9e5 	bl	800157c <HAL_RCC_GetHCLKFreq>
 80001b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80001ba:	f000 fa6d 	bl	8000698 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80001be:	2004      	movs	r0, #4
 80001c0:	f000 fa80 	bl	80006c4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80001c4:	4622      	mov	r2, r4
 80001c6:	4621      	mov	r1, r4
 80001c8:	f04f 30ff 	mov.w	r0, #4294967295
 80001cc:	f000 fa24 	bl	8000618 <HAL_NVIC_SetPriority>
}
 80001d0:	b014      	add	sp, #80	; 0x50
 80001d2:	bd10      	pop	{r4, pc}

080001d4 <main>:
{
 80001d4:	b500      	push	{lr}
 80001d6:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80001d8:	f000 f9d6 	bl	8000588 <HAL_Init>
  SystemClock_Config();
 80001dc:	f7ff ffb6 	bl	800014c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e0:	4b47      	ldr	r3, [pc, #284]	; (8000300 <main+0x12c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80001e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80001e8:	4846      	ldr	r0, [pc, #280]	; (8000304 <main+0x130>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	f042 0210 	orr.w	r2, r2, #16
 80001ee:	619a      	str	r2, [r3, #24]
 80001f0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f2:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f4:	f002 0210 	and.w	r2, r2, #16
 80001f8:	9202      	str	r2, [sp, #8]
 80001fa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001fc:	699a      	ldr	r2, [r3, #24]
 80001fe:	f042 0220 	orr.w	r2, r2, #32
 8000202:	619a      	str	r2, [r3, #24]
 8000204:	699a      	ldr	r2, [r3, #24]
 8000206:	f002 0220 	and.w	r2, r2, #32
 800020a:	9203      	str	r2, [sp, #12]
 800020c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800020e:	699a      	ldr	r2, [r3, #24]
 8000210:	f042 0208 	orr.w	r2, r2, #8
 8000214:	619a      	str	r2, [r3, #24]
 8000216:	699a      	ldr	r2, [r3, #24]
 8000218:	f002 0208 	and.w	r2, r2, #8
 800021c:	9204      	str	r2, [sp, #16]
 800021e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000220:	699a      	ldr	r2, [r3, #24]
 8000222:	f042 0204 	orr.w	r2, r2, #4
 8000226:	619a      	str	r2, [r3, #24]
 8000228:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800022a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022c:	f003 0304 	and.w	r3, r3, #4
 8000230:	9305      	str	r3, [sp, #20]
 8000232:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000234:	f000 fb48 	bl	80008c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD1_Pin;
 8000238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800023c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023e:	2300      	movs	r3, #0
 8000240:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000242:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000244:	a906      	add	r1, sp, #24
 8000246:	482f      	ldr	r0, [pc, #188]	; (8000304 <main+0x130>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000248:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800024c:	f000 fa5c 	bl	8000708 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000250:	482d      	ldr	r0, [pc, #180]	; (8000308 <main+0x134>)
 8000252:	4b2e      	ldr	r3, [pc, #184]	; (800030c <main+0x138>)
 8000254:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000256:	f000 fa46 	bl	80006e6 <HAL_CRC_Init>
 800025a:	4604      	mov	r4, r0
 800025c:	b100      	cbz	r0, 8000260 <main+0x8c>
 800025e:	e7fe      	b.n	800025e <main+0x8a>
  MX_USB_DEVICE_Init();
 8000260:	f002 fe3a 	bl	8002ed8 <MX_USB_DEVICE_Init>
  huart1.Init.BaudRate = 115200;
 8000264:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8000268:	4829      	ldr	r0, [pc, #164]	; (8000310 <main+0x13c>)
  huart1.Init.BaudRate = 115200;
 800026a:	4a2a      	ldr	r2, [pc, #168]	; (8000314 <main+0x140>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800026c:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800026e:	e880 4004 	stmia.w	r0, {r2, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000272:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000274:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000276:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000278:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800027a:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800027c:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800027e:	f001 fe17 	bl	8001eb0 <HAL_UART_Init>
 8000282:	b100      	cbz	r0, 8000286 <main+0xb2>
 8000284:	e7fe      	b.n	8000284 <main+0xb0>
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000286:	f04f 32ff 	mov.w	r2, #4294967295
 800028a:	f44f 7380 	mov.w	r3, #256	; 0x100
  hrtc.Instance = RTC;
 800028e:	4c22      	ldr	r4, [pc, #136]	; (8000318 <main+0x144>)
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000290:	4922      	ldr	r1, [pc, #136]	; (800031c <main+0x148>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000292:	4620      	mov	r0, r4
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000294:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000298:	f001 fc16 	bl	8001ac8 <HAL_RTC_Init>
 800029c:	b100      	cbz	r0, 80002a0 <main+0xcc>
 800029e:	e7fe      	b.n	800029e <main+0xca>
  sTime.Hours = 0x0;
 80002a0:	f88d 0004 	strb.w	r0, [sp, #4]
  sTime.Minutes = 0x0;
 80002a4:	f88d 0005 	strb.w	r0, [sp, #5]
  sTime.Seconds = 0x0;
 80002a8:	f88d 0006 	strb.w	r0, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002ac:	462a      	mov	r2, r5
 80002ae:	a901      	add	r1, sp, #4
 80002b0:	4620      	mov	r0, r4
 80002b2:	f001 fb44 	bl	800193e <HAL_RTC_SetTime>
 80002b6:	b100      	cbz	r0, 80002ba <main+0xe6>
 80002b8:	e7fe      	b.n	80002b8 <main+0xe4>
  DateToUpdate.Year = 0x0;
 80002ba:	f88d 001b 	strb.w	r0, [sp, #27]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80002be:	462a      	mov	r2, r5
 80002c0:	a906      	add	r1, sp, #24
 80002c2:	4620      	mov	r0, r4
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80002c4:	f88d 5018 	strb.w	r5, [sp, #24]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80002c8:	f88d 5019 	strb.w	r5, [sp, #25]
  DateToUpdate.Date = 0x1;
 80002cc:	f88d 501a 	strb.w	r5, [sp, #26]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80002d0:	f001 fb86 	bl	80019e0 <HAL_RTC_SetDate>
 80002d4:	b100      	cbz	r0, 80002d8 <main+0x104>
 80002d6:	e7fe      	b.n	80002d6 <main+0x102>
  buffer[1]=100;//X axis 8bit value signed
 80002d8:	2364      	movs	r3, #100	; 0x64
	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,4);
 80002da:	4c11      	ldr	r4, [pc, #68]	; (8000320 <main+0x14c>)
  buffer[0]=0;//buttons first 3 bits
 80002dc:	f88d 0018 	strb.w	r0, [sp, #24]
  buffer[1]=100;//X axis 8bit value signed
 80002e0:	f88d 3019 	strb.w	r3, [sp, #25]
  buffer[2]=0;//Y axis 8bit value signed
 80002e4:	f88d 001a 	strb.w	r0, [sp, #26]
  buffer[3]=0;//Wheel 8bit value signed
 80002e8:	f88d 001b 	strb.w	r0, [sp, #27]
	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,4);
 80002ec:	2204      	movs	r2, #4
 80002ee:	a906      	add	r1, sp, #24
 80002f0:	4620      	mov	r0, r4
 80002f2:	f002 fab5 	bl	8002860 <USBD_HID_SendReport>
	  HAL_Delay(1000);
 80002f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fa:	f000 f969 	bl	80005d0 <HAL_Delay>
 80002fe:	e7f5      	b.n	80002ec <main+0x118>
 8000300:	40021000 	.word	0x40021000
 8000304:	40010c00 	.word	0x40010c00
 8000308:	200001a0 	.word	0x200001a0
 800030c:	40023000 	.word	0x40023000
 8000310:	200001a8 	.word	0x200001a8
 8000314:	40013800 	.word	0x40013800
 8000318:	200001e8 	.word	0x200001e8
 800031c:	40002800 	.word	0x40002800
 8000320:	20000240 	.word	0x20000240

08000324 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000324:	6802      	ldr	r2, [r0, #0]
 8000326:	4b03      	ldr	r3, [pc, #12]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000328:	429a      	cmp	r2, r3
 800032a:	d101      	bne.n	8000330 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800032c:	f000 b93e 	b.w	80005ac <HAL_IncTick>
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40000800 	.word	0x40000800

08000338 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000338:	e7fe      	b.n	8000338 <_Error_Handler>
	...

0800033c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800033c:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <HAL_MspInit+0x98>)
{
 800033e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000340:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000342:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000344:	f042 0201 	orr.w	r2, r2, #1
 8000348:	619a      	str	r2, [r3, #24]
 800034a:	699a      	ldr	r2, [r3, #24]
 800034c:	f002 0201 	and.w	r2, r2, #1
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000354:	69da      	ldr	r2, [r3, #28]
 8000356:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800035a:	61da      	str	r2, [r3, #28]
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000366:	f000 f945 	bl	80005f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	f06f 000b 	mvn.w	r0, #11
 8000370:	4611      	mov	r1, r2
 8000372:	f000 f951 	bl	8000618 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	f06f 000a 	mvn.w	r0, #10
 800037c:	4611      	mov	r1, r2
 800037e:	f000 f94b 	bl	8000618 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	f06f 0009 	mvn.w	r0, #9
 8000388:	4611      	mov	r1, r2
 800038a:	f000 f945 	bl	8000618 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	f06f 0004 	mvn.w	r0, #4
 8000394:	4611      	mov	r1, r2
 8000396:	f000 f93f 	bl	8000618 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	f06f 0003 	mvn.w	r0, #3
 80003a0:	4611      	mov	r1, r2
 80003a2:	f000 f939 	bl	8000618 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f06f 0001 	mvn.w	r0, #1
 80003ac:	4611      	mov	r1, r2
 80003ae:	f000 f933 	bl	8000618 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f04f 30ff 	mov.w	r0, #4294967295
 80003b8:	4611      	mov	r1, r2
 80003ba:	f000 f92d 	bl	8000618 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003be:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <HAL_MspInit+0x9c>)
 80003c0:	6853      	ldr	r3, [r2, #4]
 80003c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ca:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003cc:	b003      	add	sp, #12
 80003ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010000 	.word	0x40010000

080003dc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 80003dc:	6802      	ldr	r2, [r0, #0]
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <HAL_CRC_MspInit+0x24>)
{
 80003e0:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d10a      	bne.n	80003fc <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003e6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80003ea:	695a      	ldr	r2, [r3, #20]
 80003ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80003fc:	b002      	add	sp, #8
 80003fe:	4770      	bx	lr
 8000400:	40023000 	.word	0x40023000

08000404 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000404:	b507      	push	{r0, r1, r2, lr}

  if(hrtc->Instance==RTC)
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <HAL_RTC_MspInit+0x30>)
 8000408:	6802      	ldr	r2, [r0, #0]
 800040a:	429a      	cmp	r2, r3
 800040c:	d10e      	bne.n	800042c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800040e:	f000 fe43 	bl	8001098 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_RTC_MspInit+0x34>)
 8000414:	69da      	ldr	r2, [r3, #28]
 8000416:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800041a:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800041c:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800041e:	69db      	ldr	r3, [r3, #28]
 8000420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000424:	9301      	str	r3, [sp, #4]
 8000426:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <HAL_RTC_MspInit+0x38>)
 800042a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800042c:	b003      	add	sp, #12
 800042e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000432:	bf00      	nop
 8000434:	40002800 	.word	0x40002800
 8000438:	40021000 	.word	0x40021000
 800043c:	4242043c 	.word	0x4242043c

08000440 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000442:	6802      	ldr	r2, [r0, #0]
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_UART_MspInit+0x50>)
 8000446:	429a      	cmp	r2, r3
 8000448:	d11f      	bne.n	800048a <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800044a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800044e:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8000452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000456:	619a      	str	r2, [r3, #24]
 8000458:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045a:	480e      	ldr	r0, [pc, #56]	; (8000494 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800045c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000468:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046a:	2302      	movs	r3, #2
 800046c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046e:	2303      	movs	r3, #3
 8000470:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000472:	f000 f949 	bl	8000708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800047a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	a902      	add	r1, sp, #8
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000482:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f000 f93f 	bl	8000708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800048a:	b007      	add	sp, #28
 800048c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000490:	40013800 	.word	0x40013800
 8000494:	40010800 	.word	0x40010800

08000498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000498:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800049a:	4601      	mov	r1, r0
{
 800049c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800049e:	2200      	movs	r2, #0
 80004a0:	201e      	movs	r0, #30
 80004a2:	f000 f8b9 	bl	8000618 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80004a6:	201e      	movs	r0, #30
 80004a8:	f000 f8ea 	bl	8000680 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004ae:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004b0:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004b2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004b4:	f042 0204 	orr.w	r2, r2, #4
 80004b8:	61da      	str	r2, [r3, #28]
 80004ba:	69db      	ldr	r3, [r3, #28]
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80004bc:	4c11      	ldr	r4, [pc, #68]	; (8000504 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	9302      	str	r3, [sp, #8]
 80004c4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004c6:	f001 f87f 	bl	80015c8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80004ca:	f001 f85d 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80004d0:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 80004d2:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80004d4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80004d8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_InitTick+0x74>)
 80004dc:	fbb0 f0f3 	udiv	r0, r0, r3
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 80004e0:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80004e2:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 80004e4:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80004e6:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 80004e8:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ea:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80004ec:	f001 fc26 	bl	8001d3c <HAL_TIM_Base_Init>
 80004f0:	b920      	cbnz	r0, 80004fc <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80004f2:	4620      	mov	r0, r4
 80004f4:	f001 fb39 	bl	8001b6a <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80004f8:	b008      	add	sp, #32
 80004fa:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80004fc:	2001      	movs	r0, #1
 80004fe:	e7fb      	b.n	80004f8 <HAL_InitTick+0x60>
 8000500:	40021000 	.word	0x40021000
 8000504:	200001fc 	.word	0x200001fc
 8000508:	40000800 	.word	0x40000800
 800050c:	000f4240 	.word	0x000f4240

08000510 <NMI_Handler>:
 8000510:	4770      	bx	lr

08000512 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler>

08000514 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000514:	e7fe      	b.n	8000514 <MemManage_Handler>

08000516 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000516:	e7fe      	b.n	8000516 <BusFault_Handler>

08000518 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000518:	e7fe      	b.n	8000518 <UsageFault_Handler>

0800051a <SVC_Handler>:
 800051a:	4770      	bx	lr

0800051c <DebugMon_Handler>:
 800051c:	4770      	bx	lr

0800051e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800051e:	4770      	bx	lr

08000520 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 8000520:	f000 b8dd 	b.w	80006de <HAL_SYSTICK_IRQHandler>

08000524 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000524:	4801      	ldr	r0, [pc, #4]	; (800052c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000526:	f000 badb 	b.w	8000ae0 <HAL_PCD_IRQHandler>
 800052a:	bf00      	nop
 800052c:	20000464 	.word	0x20000464

08000530 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000530:	4801      	ldr	r0, [pc, #4]	; (8000538 <TIM4_IRQHandler+0x8>)
 8000532:	f001 bb29 	b.w	8001b88 <HAL_TIM_IRQHandler>
 8000536:	bf00      	nop
 8000538:	200001fc 	.word	0x200001fc

0800053c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <SystemInit+0x40>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	f042 0201 	orr.w	r2, r2, #1
 8000544:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000546:	6859      	ldr	r1, [r3, #4]
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <SystemInit+0x44>)
 800054a:	400a      	ands	r2, r1
 800054c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000554:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000558:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000560:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000562:	685a      	ldr	r2, [r3, #4]
 8000564:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000568:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800056a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800056e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000570:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <SystemInit+0x48>)
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	f8ff0000 	.word	0xf8ff0000
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_Init+0x20>)
{
 800058a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000596:	f000 f82d 	bl	80005f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059a:	2000      	movs	r0, #0
 800059c:	f7ff ff7c 	bl	8000498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a0:	f7ff fecc 	bl	800033c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005a4:	2000      	movs	r0, #0
 80005a6:	bd08      	pop	{r3, pc}
 80005a8:	40022000 	.word	0x40022000

080005ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005ac:	4a03      	ldr	r2, [pc, #12]	; (80005bc <HAL_IncTick+0x10>)
 80005ae:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <HAL_IncTick+0x14>)
 80005b0:	6811      	ldr	r1, [r2, #0]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	440b      	add	r3, r1
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	2000023c 	.word	0x2000023c
 80005c0:	20000004 	.word	0x20000004

080005c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <HAL_GetTick+0x8>)
 80005c6:	6818      	ldr	r0, [r3, #0]
}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	2000023c 	.word	0x2000023c

080005d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d0:	b538      	push	{r3, r4, r5, lr}
 80005d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff fff6 	bl	80005c4 <HAL_GetTick>
 80005d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005da:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005dc:	bf1e      	ittt	ne
 80005de:	4b04      	ldrne	r3, [pc, #16]	; (80005f0 <HAL_Delay+0x20>)
 80005e0:	781b      	ldrbne	r3, [r3, #0]
 80005e2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e4:	f7ff ffee 	bl	80005c4 <HAL_GetTick>
 80005e8:	1b40      	subs	r0, r0, r5
 80005ea:	4284      	cmp	r4, r0
 80005ec:	d8fa      	bhi.n	80005e4 <HAL_Delay+0x14>
  {
  }
}
 80005ee:	bd38      	pop	{r3, r4, r5, pc}
 80005f0:	20000004 	.word	0x20000004

080005f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005f6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000602:	041b      	lsls	r3, r3, #16
 8000604:	0c1b      	lsrs	r3, r3, #16
 8000606:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800060a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800060e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000610:	60d3      	str	r3, [r2, #12]
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	68dc      	ldr	r4, [r3, #12]
 800061e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000622:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000626:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000628:	2b04      	cmp	r3, #4
 800062a:	bf28      	it	cs
 800062c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000630:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000634:	bf98      	it	ls
 8000636:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000638:	fa05 f303 	lsl.w	r3, r5, r3
 800063c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000640:	bf88      	it	hi
 8000642:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	4019      	ands	r1, r3
 8000646:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000648:	fa05 f404 	lsl.w	r4, r5, r4
 800064c:	3c01      	subs	r4, #1
 800064e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000650:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000652:	ea42 0201 	orr.w	r2, r2, r1
 8000656:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	bfaf      	iteee	ge
 800065c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	4b06      	ldrlt	r3, [pc, #24]	; (800067c <HAL_NVIC_SetPriority+0x64>)
 8000662:	f000 000f 	andlt.w	r0, r0, #15
 8000666:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	bfa5      	ittet	ge
 800066a:	b2d2      	uxtbge	r2, r2
 800066c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	e000ed14 	.word	0xe000ed14

08000680 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000680:	2301      	movs	r3, #1
 8000682:	0942      	lsrs	r2, r0, #5
 8000684:	f000 001f 	and.w	r0, r0, #31
 8000688:	fa03 f000 	lsl.w	r0, r3, r0
 800068c:	4b01      	ldr	r3, [pc, #4]	; (8000694 <HAL_NVIC_EnableIRQ+0x14>)
 800068e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100

08000698 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000698:	3801      	subs	r0, #1
 800069a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800069e:	d20a      	bcs.n	80006b6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e010 	.word	0xe000e010
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006c6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	bf0c      	ite	eq
 80006cc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006d0:	f022 0204 	bicne.w	r2, r2, #4
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	4770      	bx	lr
 80006d8:	e000e010 	.word	0xe000e010

080006dc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006dc:	4770      	bx	lr

080006de <HAL_SYSTICK_IRQHandler>:
{
 80006de:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006e0:	f7ff fffc 	bl	80006dc <HAL_SYSTICK_Callback>
 80006e4:	bd08      	pop	{r3, pc}

080006e6 <HAL_CRC_Init>:
  * @param  hcrc: pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80006e6:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80006e8:	4604      	mov	r4, r0
 80006ea:	b150      	cbz	r0, 8000702 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80006ec:	7943      	ldrb	r3, [r0, #5]
 80006ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006f2:	b913      	cbnz	r3, 80006fa <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80006f4:	7102      	strb	r2, [r0, #4]
    
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80006f6:	f7ff fe71 	bl	80003dc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80006fa:	2301      	movs	r3, #1
  
  /* Return function status */
  return HAL_OK;
 80006fc:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 80006fe:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8000700:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000702:	2001      	movs	r0, #1
}
 8000704:	bd10      	pop	{r4, pc}
	...

08000708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800070c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800070e:	4616      	mov	r6, r2
 8000710:	4b65      	ldr	r3, [pc, #404]	; (80008a8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000712:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80008b8 <HAL_GPIO_Init+0x1b0>
 8000716:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80008bc <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800071a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000720:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000724:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000728:	45a0      	cmp	r8, r4
 800072a:	d17f      	bne.n	800082c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800072c:	684d      	ldr	r5, [r1, #4]
 800072e:	2d12      	cmp	r5, #18
 8000730:	f000 80af 	beq.w	8000892 <HAL_GPIO_Init+0x18a>
 8000734:	f200 8088 	bhi.w	8000848 <HAL_GPIO_Init+0x140>
 8000738:	2d02      	cmp	r5, #2
 800073a:	f000 80a7 	beq.w	800088c <HAL_GPIO_Init+0x184>
 800073e:	d87c      	bhi.n	800083a <HAL_GPIO_Init+0x132>
 8000740:	2d00      	cmp	r5, #0
 8000742:	f000 808e 	beq.w	8000862 <HAL_GPIO_Init+0x15a>
 8000746:	2d01      	cmp	r5, #1
 8000748:	f000 809e 	beq.w	8000888 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800074c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000750:	2cff      	cmp	r4, #255	; 0xff
 8000752:	bf93      	iteet	ls
 8000754:	4682      	movls	sl, r0
 8000756:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800075a:	3d08      	subhi	r5, #8
 800075c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000760:	bf92      	itee	ls
 8000762:	00b5      	lslls	r5, r6, #2
 8000764:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000768:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800076a:	fa09 f805 	lsl.w	r8, r9, r5
 800076e:	ea2b 0808 	bic.w	r8, fp, r8
 8000772:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000776:	bf88      	it	hi
 8000778:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800077c:	ea48 0505 	orr.w	r5, r8, r5
 8000780:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000784:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000788:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800078c:	d04e      	beq.n	800082c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800078e:	4d47      	ldr	r5, [pc, #284]	; (80008ac <HAL_GPIO_Init+0x1a4>)
 8000790:	4f46      	ldr	r7, [pc, #280]	; (80008ac <HAL_GPIO_Init+0x1a4>)
 8000792:	69ad      	ldr	r5, [r5, #24]
 8000794:	f026 0803 	bic.w	r8, r6, #3
 8000798:	f045 0501 	orr.w	r5, r5, #1
 800079c:	61bd      	str	r5, [r7, #24]
 800079e:	69bd      	ldr	r5, [r7, #24]
 80007a0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80007a4:	f005 0501 	and.w	r5, r5, #1
 80007a8:	9501      	str	r5, [sp, #4]
 80007aa:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007ae:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007b2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007b4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80007b8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007bc:	fa09 f90b 	lsl.w	r9, r9, fp
 80007c0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c4:	4d3a      	ldr	r5, [pc, #232]	; (80008b0 <HAL_GPIO_Init+0x1a8>)
 80007c6:	42a8      	cmp	r0, r5
 80007c8:	d068      	beq.n	800089c <HAL_GPIO_Init+0x194>
 80007ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ce:	42a8      	cmp	r0, r5
 80007d0:	d066      	beq.n	80008a0 <HAL_GPIO_Init+0x198>
 80007d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d6:	42a8      	cmp	r0, r5
 80007d8:	d064      	beq.n	80008a4 <HAL_GPIO_Init+0x19c>
 80007da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007de:	42a8      	cmp	r0, r5
 80007e0:	bf0c      	ite	eq
 80007e2:	2503      	moveq	r5, #3
 80007e4:	2504      	movne	r5, #4
 80007e6:	fa05 f50b 	lsl.w	r5, r5, fp
 80007ea:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80007ee:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80007f2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007f4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80007f8:	bf14      	ite	ne
 80007fa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80007fc:	43a5      	biceq	r5, r4
 80007fe:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000800:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000802:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000806:	bf14      	ite	ne
 8000808:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800080a:	43a5      	biceq	r5, r4
 800080c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800080e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000810:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000814:	bf14      	ite	ne
 8000816:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000818:	43a5      	biceq	r5, r4
 800081a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800081c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800081e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000822:	bf14      	ite	ne
 8000824:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000826:	ea25 0404 	biceq.w	r4, r5, r4
 800082a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800082c:	3601      	adds	r6, #1
 800082e:	2e10      	cmp	r6, #16
 8000830:	f47f af73 	bne.w	800071a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000834:	b003      	add	sp, #12
 8000836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800083a:	2d03      	cmp	r5, #3
 800083c:	d022      	beq.n	8000884 <HAL_GPIO_Init+0x17c>
 800083e:	2d11      	cmp	r5, #17
 8000840:	d184      	bne.n	800074c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000842:	68ca      	ldr	r2, [r1, #12]
 8000844:	3204      	adds	r2, #4
          break;
 8000846:	e781      	b.n	800074c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000848:	4f1a      	ldr	r7, [pc, #104]	; (80008b4 <HAL_GPIO_Init+0x1ac>)
 800084a:	42bd      	cmp	r5, r7
 800084c:	d009      	beq.n	8000862 <HAL_GPIO_Init+0x15a>
 800084e:	d812      	bhi.n	8000876 <HAL_GPIO_Init+0x16e>
 8000850:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80008c0 <HAL_GPIO_Init+0x1b8>
 8000854:	454d      	cmp	r5, r9
 8000856:	d004      	beq.n	8000862 <HAL_GPIO_Init+0x15a>
 8000858:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800085c:	454d      	cmp	r5, r9
 800085e:	f47f af75 	bne.w	800074c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000862:	688a      	ldr	r2, [r1, #8]
 8000864:	b1c2      	cbz	r2, 8000898 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000866:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000868:	bf0c      	ite	eq
 800086a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800086e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000872:	2208      	movs	r2, #8
 8000874:	e76a      	b.n	800074c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000876:	4575      	cmp	r5, lr
 8000878:	d0f3      	beq.n	8000862 <HAL_GPIO_Init+0x15a>
 800087a:	4565      	cmp	r5, ip
 800087c:	d0f1      	beq.n	8000862 <HAL_GPIO_Init+0x15a>
 800087e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80008c4 <HAL_GPIO_Init+0x1bc>
 8000882:	e7eb      	b.n	800085c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000884:	2200      	movs	r2, #0
 8000886:	e761      	b.n	800074c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000888:	68ca      	ldr	r2, [r1, #12]
          break;
 800088a:	e75f      	b.n	800074c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800088c:	68ca      	ldr	r2, [r1, #12]
 800088e:	3208      	adds	r2, #8
          break;
 8000890:	e75c      	b.n	800074c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000892:	68ca      	ldr	r2, [r1, #12]
 8000894:	320c      	adds	r2, #12
          break;
 8000896:	e759      	b.n	800074c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000898:	2204      	movs	r2, #4
 800089a:	e757      	b.n	800074c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800089c:	2500      	movs	r5, #0
 800089e:	e7a2      	b.n	80007e6 <HAL_GPIO_Init+0xde>
 80008a0:	2501      	movs	r5, #1
 80008a2:	e7a0      	b.n	80007e6 <HAL_GPIO_Init+0xde>
 80008a4:	2502      	movs	r5, #2
 80008a6:	e79e      	b.n	80007e6 <HAL_GPIO_Init+0xde>
 80008a8:	40010400 	.word	0x40010400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800
 80008b4:	10210000 	.word	0x10210000
 80008b8:	10310000 	.word	0x10310000
 80008bc:	10320000 	.word	0x10320000
 80008c0:	10110000 	.word	0x10110000
 80008c4:	10220000 	.word	0x10220000

080008c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80008c8:	b10a      	cbz	r2, 80008ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008ca:	6101      	str	r1, [r0, #16]
 80008cc:	4770      	bx	lr
 80008ce:	0409      	lsls	r1, r1, #16
 80008d0:	e7fb      	b.n	80008ca <HAL_GPIO_WritePin+0x2>

080008d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80008d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80008d6:	4604      	mov	r4, r0
{
 80008d8:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80008da:	2800      	cmp	r0, #0
 80008dc:	d060      	beq.n	80009a0 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80008de:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80008e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008e6:	b91b      	cbnz	r3, 80008f0 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80008e8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80008ec:	f002 fb0a 	bl	8002f04 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80008f0:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80008f2:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80008f4:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80008f6:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80008fa:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80008fe:	f001 fb15 	bl	8001f2c <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000904:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000906:	682b      	ldr	r3, [r5, #0]
 8000908:	f104 0804 	add.w	r8, r4, #4
 800090c:	6033      	str	r3, [r6, #0]
 800090e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000912:	6820      	ldr	r0, [r4, #0]
 8000914:	f001 fafa 	bl	8001f0c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000918:	2100      	movs	r1, #0
 800091a:	6820      	ldr	r0, [r4, #0]
 800091c:	f001 fb10 	bl	8001f40 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000920:	2100      	movs	r1, #0
 8000922:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000924:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000926:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000928:	4608      	mov	r0, r1
 800092a:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 800092e:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000932:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000934:	3101      	adds	r1, #1
 8000936:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000938:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800093c:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000940:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000942:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000944:	6410      	str	r0, [r2, #64]	; 0x40
 8000946:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 800094a:	d1f0      	bne.n	800092e <HAL_PCD_Init+0x5c>
 800094c:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 800094e:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000950:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000954:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000956:	3201      	adds	r2, #1
 8000958:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 800095a:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800095e:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000962:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000966:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 800096a:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 800096e:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000972:	d1ed      	bne.n	8000950 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000974:	466e      	mov	r6, sp
 8000976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000978:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800097a:	682b      	ldr	r3, [r5, #0]
 800097c:	6033      	str	r3, [r6, #0]
 800097e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000982:	6820      	ldr	r0, [r4, #0]
 8000984:	f001 fade 	bl	8001f44 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000988:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800098a:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 800098e:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000990:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000994:	f001 fdae 	bl	80024f4 <USB_DevDisconnect>
  return HAL_OK;
 8000998:	2000      	movs	r0, #0
}
 800099a:	b006      	add	sp, #24
 800099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80009a0:	2001      	movs	r0, #1
 80009a2:	e7fa      	b.n	800099a <HAL_PCD_Init+0xc8>

080009a4 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80009a4:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80009a8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80009aa:	2b01      	cmp	r3, #1
{
 80009ac:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80009ae:	d00e      	beq.n	80009ce <HAL_PCD_Start+0x2a>
 80009b0:	2101      	movs	r1, #1
 80009b2:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80009b6:	f002 fbbc 	bl	8003132 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80009ba:	6820      	ldr	r0, [r4, #0]
 80009bc:	f001 fd98 	bl	80024f0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80009c0:	6820      	ldr	r0, [r4, #0]
 80009c2:	f001 faaa 	bl	8001f1a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80009cc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80009ce:	2002      	movs	r0, #2
}
 80009d0:	bd10      	pop	{r4, pc}

080009d2 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80009d2:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80009d6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80009d8:	2a01      	cmp	r2, #1
{
 80009da:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80009dc:	d00b      	beq.n	80009f6 <HAL_PCD_SetAddress+0x24>
 80009de:	2201      	movs	r2, #1
 80009e0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80009e4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80009e8:	6800      	ldr	r0, [r0, #0]
 80009ea:	f001 fd7b 	bl	80024e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80009f4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80009f6:	2002      	movs	r0, #2
  return HAL_OK;
}
 80009f8:	bd10      	pop	{r4, pc}

080009fa <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80009fa:	b538      	push	{r3, r4, r5, lr}
 80009fc:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80009fe:	b248      	sxtb	r0, r1
 8000a00:	2800      	cmp	r0, #0
 8000a02:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a06:	bfb5      	itete	lt
 8000a08:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a0c:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a10:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a12:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a16:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000a18:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a1a:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000a1c:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000a1e:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000a22:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d009      	beq.n	8000a3c <HAL_PCD_EP_Open+0x42>
 8000a28:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000a2a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000a2c:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000a30:	f001 faa4 	bl	8001f7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000a3a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000a3c:	2002      	movs	r0, #2
}
 8000a3e:	bd38      	pop	{r3, r4, r5, pc}

08000a40 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000a40:	b24b      	sxtb	r3, r1
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a48:	bfb5      	itete	lt
 8000a4a:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a4e:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a52:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a54:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a58:	0fdb      	lsrs	r3, r3, #31
{  
 8000a5a:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000a5c:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a5e:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000a60:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000a64:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d009      	beq.n	8000a7e <HAL_PCD_EP_Close+0x3e>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000a70:	6800      	ldr	r0, [r0, #0]
 8000a72:	f001 fbf5 	bl	8002260 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000a7c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000a7e:	2002      	movs	r0, #2
}
 8000a80:	bd10      	pop	{r4, pc}

08000a82 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000a82:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000a84:	2600      	movs	r6, #0
 8000a86:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000a8a:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000a8c:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000a8e:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a92:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000a96:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000a98:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000a9c:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000aa0:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000aa4:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000aa8:	6800      	ldr	r0, [r0, #0]
 8000aaa:	f001 fd3d 	bl	8002528 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000aae:	4630      	mov	r0, r6
 8000ab0:	bd70      	pop	{r4, r5, r6, pc}

08000ab2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ab2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000ab6:	b570      	push	{r4, r5, r6, lr}
 8000ab8:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000aba:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000abc:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000abe:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000ac0:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000ac2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000ac6:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000aca:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000acc:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000ace:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000ad0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8000ad4:	6800      	ldr	r0, [r0, #0]
 8000ad6:	f001 fd27 	bl	8002528 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000ada:	4630      	mov	r0, r6
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ae0 <HAL_PCD_IRQHandler>:
{ 
 8000ae0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000ae6:	6800      	ldr	r0, [r0, #0]
 8000ae8:	f001 fd06 	bl	80024f8 <USB_ReadInterrupts>
 8000aec:	0400      	lsls	r0, r0, #16
 8000aee:	f100 8098 	bmi.w	8000c22 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000af2:	6820      	ldr	r0, [r4, #0]
 8000af4:	f001 fd00 	bl	80024f8 <USB_ReadInterrupts>
 8000af8:	0541      	lsls	r1, r0, #21
 8000afa:	d50f      	bpl.n	8000b1c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000afc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000afe:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b00:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b08:	041b      	lsls	r3, r3, #16
 8000b0a:	0c1b      	lsrs	r3, r3, #16
 8000b0c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000b10:	f002 fa2f 	bl	8002f72 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000b14:	2100      	movs	r1, #0
 8000b16:	4620      	mov	r0, r4
 8000b18:	f7ff ff5b 	bl	80009d2 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000b1c:	6820      	ldr	r0, [r4, #0]
 8000b1e:	f001 fceb 	bl	80024f8 <USB_ReadInterrupts>
 8000b22:	0447      	lsls	r7, r0, #17
 8000b24:	d508      	bpl.n	8000b38 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000b26:	6822      	ldr	r2, [r4, #0]
 8000b28:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b30:	041b      	lsls	r3, r3, #16
 8000b32:	0c1b      	lsrs	r3, r3, #16
 8000b34:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000b38:	6820      	ldr	r0, [r4, #0]
 8000b3a:	f001 fcdd 	bl	80024f8 <USB_ReadInterrupts>
 8000b3e:	0486      	lsls	r6, r0, #18
 8000b40:	d508      	bpl.n	8000b54 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000b42:	6822      	ldr	r2, [r4, #0]
 8000b44:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b4c:	041b      	lsls	r3, r3, #16
 8000b4e:	0c1b      	lsrs	r3, r3, #16
 8000b50:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000b54:	6820      	ldr	r0, [r4, #0]
 8000b56:	f001 fccf 	bl	80024f8 <USB_ReadInterrupts>
 8000b5a:	04c5      	lsls	r5, r0, #19
 8000b5c:	d51c      	bpl.n	8000b98 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000b5e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000b60:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000b62:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000b66:	f023 0304 	bic.w	r3, r3, #4
 8000b6a:	041b      	lsls	r3, r3, #16
 8000b6c:	0c1b      	lsrs	r3, r3, #16
 8000b6e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000b72:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000b76:	f023 0308 	bic.w	r3, r3, #8
 8000b7a:	041b      	lsls	r3, r3, #16
 8000b7c:	0c1b      	lsrs	r3, r3, #16
 8000b7e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000b82:	f002 fa13 	bl	8002fac <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000b86:	6822      	ldr	r2, [r4, #0]
 8000b88:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b90:	041b      	lsls	r3, r3, #16
 8000b92:	0c1b      	lsrs	r3, r3, #16
 8000b94:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000b98:	6820      	ldr	r0, [r4, #0]
 8000b9a:	f001 fcad 	bl	80024f8 <USB_ReadInterrupts>
 8000b9e:	0500      	lsls	r0, r0, #20
 8000ba0:	d51d      	bpl.n	8000bde <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000ba2:	6820      	ldr	r0, [r4, #0]
 8000ba4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000bb2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000bb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bba:	041b      	lsls	r3, r3, #16
 8000bbc:	0c1b      	lsrs	r3, r3, #16
 8000bbe:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000bc2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000bd0:	f001 fc92 	bl	80024f8 <USB_ReadInterrupts>
 8000bd4:	04c1      	lsls	r1, r0, #19
 8000bd6:	d402      	bmi.n	8000bde <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f002 f9d7 	bl	8002f8c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000bde:	6820      	ldr	r0, [r4, #0]
 8000be0:	f001 fc8a 	bl	80024f8 <USB_ReadInterrupts>
 8000be4:	0582      	lsls	r2, r0, #22
 8000be6:	d50b      	bpl.n	8000c00 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000be8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000bea:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000bec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bf4:	041b      	lsls	r3, r3, #16
 8000bf6:	0c1b      	lsrs	r3, r3, #16
 8000bf8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000bfc:	f002 f9b5 	bl	8002f6a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	f001 fc79 	bl	80024f8 <USB_ReadInterrupts>
 8000c06:	05c3      	lsls	r3, r0, #23
 8000c08:	d508      	bpl.n	8000c1c <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000c0a:	6822      	ldr	r2, [r4, #0]
 8000c0c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c14:	041b      	lsls	r3, r3, #16
 8000c16:	0c1b      	lsrs	r3, r3, #16
 8000c18:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000c1c:	b002      	add	sp, #8
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000c22:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c24:	4fc8      	ldr	r7, [pc, #800]	; (8000f48 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000c26:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000f4c <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000c2a:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000f50 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000c2e:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000c32:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000c36:	6820      	ldr	r0, [r4, #0]
 8000c38:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000c42:	041b      	lsls	r3, r3, #16
 8000c44:	f57f af55 	bpl.w	8000af2 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000c48:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000c4c:	f015 050f 	ands.w	r5, r5, #15
 8000c50:	f040 80ab 	bne.w	8000daa <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000c54:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c58:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000c5a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c5e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000c60:	d126      	bne.n	8000cb0 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c62:	403b      	ands	r3, r7
 8000c64:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c66:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c6a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000c78:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000c7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c82:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000c84:	4413      	add	r3, r2
 8000c86:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f002 f967 	bl	8002f5c <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000c8e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0cf      	beq.n	8000c36 <HAL_PCD_IRQHandler+0x156>
 8000c96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d1cc      	bne.n	8000c36 <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000c9c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000ca0:	6821      	ldr	r1, [r4, #0]
 8000ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca6:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000caa:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000cae:	e7c2      	b.n	8000c36 <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000cb0:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000cb4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000cb8:	051a      	lsls	r2, r3, #20
 8000cba:	d51f      	bpl.n	8000cfc <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000cbc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000cc0:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000cca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000cce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000cd2:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cda:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000cde:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000ce2:	f001 fd21 	bl	8002728 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000ce6:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000ce8:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000cea:	8813      	ldrh	r3, [r2, #0]
 8000cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cf0:	051b      	lsls	r3, r3, #20
 8000cf2:	0d1b      	lsrs	r3, r3, #20
 8000cf4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000cf6:	f002 f923 	bl	8002f40 <HAL_PCD_SetupStageCallback>
 8000cfa:	e79c      	b.n	8000c36 <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000cfc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d00:	041b      	lsls	r3, r3, #16
 8000d02:	d598      	bpl.n	8000c36 <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d04:	8803      	ldrh	r3, [r0, #0]
 8000d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d0a:	051b      	lsls	r3, r3, #20
 8000d0c:	0d1b      	lsrs	r3, r3, #20
 8000d0e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d10:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d14:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d22:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d2a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000d2e:	b163      	cbz	r3, 8000d4a <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000d30:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000d34:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000d38:	f001 fcf6 	bl	8002728 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000d3c:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000d40:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000d44:	4413      	add	r3, r2
 8000d46:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f002 f8fd 	bl	8002f4c <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000d52:	6822      	ldr	r2, [r4, #0]
 8000d54:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000d58:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000d5c:	2d3e      	cmp	r5, #62	; 0x3e
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	f101 0106 	add.w	r1, r1, #6
 8000d64:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000d68:	d917      	bls.n	8000d9a <HAL_PCD_IRQHandler+0x2ba>
 8000d6a:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000d6e:	06ee      	lsls	r6, r5, #27
 8000d70:	bf04      	itt	eq
 8000d72:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000d76:	b29b      	uxtheq	r3, r3
 8000d78:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000d82:	8813      	ldrh	r3, [r2, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	ea03 0308 	and.w	r3, r3, r8
 8000d8a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d96:	8013      	strh	r3, [r2, #0]
 8000d98:	e74d      	b.n	8000c36 <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000d9a:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000d9e:	07ed      	lsls	r5, r5, #31
 8000da0:	bf44      	itt	mi
 8000da2:	3301      	addmi	r3, #1
 8000da4:	b29b      	uxthmi	r3, r3
 8000da6:	029b      	lsls	r3, r3, #10
 8000da8:	e7e8      	b.n	8000d7c <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000daa:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000db4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000db8:	0419      	lsls	r1, r3, #16
 8000dba:	d53f      	bpl.n	8000e3c <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000dbc:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000dc0:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dc8:	051b      	lsls	r3, r3, #20
 8000dca:	0d1b      	lsrs	r3, r3, #20
 8000dcc:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000dd0:	eb04 010a 	add.w	r1, r4, sl
 8000dd4:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d174      	bne.n	8000ec6 <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ddc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000de0:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	3306      	adds	r3, #6
 8000de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000dec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000df0:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000df4:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000df8:	b136      	cbz	r6, 8000e08 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000dfa:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000dfe:	4633      	mov	r3, r6
 8000e00:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000e04:	f001 fc90 	bl	8002728 <USB_ReadPMA>
 8000e08:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000e0c:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000e10:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000e14:	4433      	add	r3, r6
 8000e16:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000e1a:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000e1e:	4432      	add	r2, r6
 8000e20:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000e24:	b123      	cbz	r3, 8000e30 <HAL_PCD_IRQHandler+0x350>
 8000e26:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000e2a:	4286      	cmp	r6, r0
 8000e2c:	f080 8086 	bcs.w	8000f3c <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000e30:	44a2      	add	sl, r4
 8000e32:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000e36:	4620      	mov	r0, r4
 8000e38:	f002 f888 	bl	8002f4c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000e3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e40:	061a      	lsls	r2, r3, #24
 8000e42:	f57f aef8 	bpl.w	8000c36 <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e46:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000e48:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e4a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e4e:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	403b      	ands	r3, r7
 8000e54:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e58:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000e5c:	3502      	adds	r5, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d178      	bne.n	8000f54 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e62:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e66:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e72:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e76:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000e7a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e82:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000e84:	b11b      	cbz	r3, 8000e8e <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000e86:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000e88:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000e8a:	f001 fb3b 	bl	8002504 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e8e:	6822      	ldr	r2, [r4, #0]
 8000e90:	4426      	add	r6, r4
 8000e92:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000e96:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000ea2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000ea6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000eaa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000eac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000eb0:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000eb2:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000eb4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000eb6:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000eb8:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8085 	bne.w	8000fca <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ec0:	f002 f84c 	bl	8002f5c <HAL_PCD_DataInStageCallback>
 8000ec4:	e6b7      	b.n	8000c36 <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000ec6:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000eca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ed4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000ed8:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000eda:	d021      	beq.n	8000f20 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000edc:	3202      	adds	r2, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ee4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000ee8:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000eec:	b136      	cbz	r6, 8000efc <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000eee:	4633      	mov	r3, r6
 8000ef0:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ef4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000ef8:	f001 fc16 	bl	8002728 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000efc:	eb04 030a 	add.w	r3, r4, sl
 8000f00:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000f04:	6822      	ldr	r2, [r4, #0]
 8000f06:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f0e:	051b      	lsls	r3, r3, #20
 8000f10:	0d1b      	lsrs	r3, r3, #20
 8000f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f1a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000f1e:	e773      	b.n	8000e08 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000f20:	3206      	adds	r2, #6
 8000f22:	4413      	add	r3, r2
 8000f24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f28:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000f2c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000f30:	2e00      	cmp	r6, #0
 8000f32:	d0e3      	beq.n	8000efc <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f34:	4633      	mov	r3, r6
 8000f36:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000f3a:	e7db      	b.n	8000ef4 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000f3c:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000f40:	4620      	mov	r0, r4
 8000f42:	f7ff fd9e 	bl	8000a82 <HAL_PCD_EP_Receive>
 8000f46:	e779      	b.n	8000e3c <HAL_PCD_IRQHandler+0x35c>
 8000f48:	ffff8f0f 	.word	0xffff8f0f
 8000f4c:	ffffbf8f 	.word	0xffffbf8f
 8000f50:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000f54:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000f58:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f62:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000f66:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000f68:	d020      	beq.n	8000fac <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f6a:	3202      	adds	r2, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f72:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000f76:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f7e:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000f80:	b11b      	cbz	r3, 8000f8a <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000f82:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000f84:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000f86:	f001 fabd 	bl	8002504 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000f8a:	19a3      	adds	r3, r4, r6
 8000f8c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000f90:	6822      	ldr	r2, [r4, #0]
 8000f92:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f9a:	051b      	lsls	r3, r3, #20
 8000f9c:	0d1b      	lsrs	r3, r3, #20
 8000f9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000faa:	e770      	b.n	8000e8e <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000fac:	3206      	adds	r2, #6
 8000fae:	4413      	add	r3, r2
 8000fb0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000fb4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000fb8:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fc0:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0e1      	beq.n	8000f8a <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000fc6:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000fc8:	e7dc      	b.n	8000f84 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000fca:	f7ff fd72 	bl	8000ab2 <HAL_PCD_EP_Transmit>
 8000fce:	e632      	b.n	8000c36 <HAL_PCD_IRQHandler+0x156>

08000fd0 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000fd0:	2201      	movs	r2, #1
{
 8000fd2:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000fd4:	b24b      	sxtb	r3, r1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000fdc:	bfb5      	itete	lt
 8000fde:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000fe2:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000fe6:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000fe8:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000fec:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000fee:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000ff0:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000ff2:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000ff4:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000ff6:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000ffa:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00e      	beq.n	800101e <HAL_PCD_EP_SetStall+0x4e>
 8001000:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001004:	6800      	ldr	r0, [r0, #0]
 8001006:	f001 f9f9 	bl	80023fc <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 800100a:	b925      	cbnz	r5, 8001016 <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800100c:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001010:	6820      	ldr	r0, [r4, #0]
 8001012:	f001 fa75 	bl	8002500 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001016:	2000      	movs	r0, #0
 8001018:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 800101c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800101e:	2002      	movs	r0, #2
}
 8001020:	bd38      	pop	{r3, r4, r5, pc}

08001022 <HAL_PCD_EP_ClrStall>:
{
 8001022:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8001024:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8001026:	b24b      	sxtb	r3, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800102e:	bfb5      	itete	lt
 8001030:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001034:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001038:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800103a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800103e:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001040:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001042:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001044:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001046:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 800104a:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 800104c:	2b01      	cmp	r3, #1
 800104e:	d009      	beq.n	8001064 <HAL_PCD_EP_ClrStall+0x42>
 8001050:	2301      	movs	r3, #1
 8001052:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001056:	6800      	ldr	r0, [r0, #0]
 8001058:	f001 fa02 	bl	8002460 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800105c:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8001060:	4620      	mov	r0, r4
 8001062:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001064:	2002      	movs	r0, #2
}
 8001066:	bd38      	pop	{r3, r4, r5, pc}

08001068 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001068:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800106c:	bf1b      	ittet	ne
 800106e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001072:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001076:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800107a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800107c:	bf08      	it	eq
 800107e:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001082:	b91a      	cbnz	r2, 800108c <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001084:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001086:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8001088:	2000      	movs	r0, #0
 800108a:	4770      	bx	lr
    ep->doublebuffer = 1U;
 800108c:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 800108e:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001090:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001092:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001094:	8103      	strh	r3, [r0, #8]
 8001096:	e7f7      	b.n	8001088 <HAL_PCDEx_PMAConfig+0x20>

08001098 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001098:	2201      	movs	r2, #1
 800109a:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <HAL_PWR_EnableBkUpAccess+0x8>)
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	4770      	bx	lr
 80010a0:	420e0020 	.word	0x420e0020

080010a4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a4:	6803      	ldr	r3, [r0, #0]
{
 80010a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	07db      	lsls	r3, r3, #31
{
 80010ac:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	d410      	bmi.n	80010d2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b0:	682b      	ldr	r3, [r5, #0]
 80010b2:	079f      	lsls	r7, r3, #30
 80010b4:	d45e      	bmi.n	8001174 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	0719      	lsls	r1, r3, #28
 80010ba:	f100 8095 	bmi.w	80011e8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010be:	682b      	ldr	r3, [r5, #0]
 80010c0:	075a      	lsls	r2, r3, #29
 80010c2:	f100 80bf 	bmi.w	8001244 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c6:	69ea      	ldr	r2, [r5, #28]
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	f040 812d 	bne.w	8001328 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80010ce:	2000      	movs	r0, #0
 80010d0:	e014      	b.n	80010fc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010d2:	4c90      	ldr	r4, [pc, #576]	; (8001314 <HAL_RCC_OscConfig+0x270>)
 80010d4:	6863      	ldr	r3, [r4, #4]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d007      	beq.n	80010ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010de:	6863      	ldr	r3, [r4, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d10c      	bne.n	8001102 <HAL_RCC_OscConfig+0x5e>
 80010e8:	6863      	ldr	r3, [r4, #4]
 80010ea:	03de      	lsls	r6, r3, #15
 80010ec:	d509      	bpl.n	8001102 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	039c      	lsls	r4, r3, #14
 80010f2:	d5dd      	bpl.n	80010b0 <HAL_RCC_OscConfig+0xc>
 80010f4:	686b      	ldr	r3, [r5, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1da      	bne.n	80010b0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80010fa:	2001      	movs	r0, #1
}
 80010fc:	b002      	add	sp, #8
 80010fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001102:	686b      	ldr	r3, [r5, #4]
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001108:	d110      	bne.n	800112c <HAL_RCC_OscConfig+0x88>
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001112:	f7ff fa57 	bl	80005c4 <HAL_GetTick>
 8001116:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	0398      	lsls	r0, r3, #14
 800111c:	d4c8      	bmi.n	80010b0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111e:	f7ff fa51 	bl	80005c4 <HAL_GetTick>
 8001122:	1b80      	subs	r0, r0, r6
 8001124:	2864      	cmp	r0, #100	; 0x64
 8001126:	d9f7      	bls.n	8001118 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001128:	2003      	movs	r0, #3
 800112a:	e7e7      	b.n	80010fc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112c:	b99b      	cbnz	r3, 8001156 <HAL_RCC_OscConfig+0xb2>
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001134:	6023      	str	r3, [r4, #0]
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800113e:	f7ff fa41 	bl	80005c4 <HAL_GetTick>
 8001142:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	0399      	lsls	r1, r3, #14
 8001148:	d5b2      	bpl.n	80010b0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114a:	f7ff fa3b 	bl	80005c4 <HAL_GetTick>
 800114e:	1b80      	subs	r0, r0, r6
 8001150:	2864      	cmp	r0, #100	; 0x64
 8001152:	d9f7      	bls.n	8001144 <HAL_RCC_OscConfig+0xa0>
 8001154:	e7e8      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	d103      	bne.n	8001166 <HAL_RCC_OscConfig+0xc2>
 800115e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001162:	6023      	str	r3, [r4, #0]
 8001164:	e7d1      	b.n	800110a <HAL_RCC_OscConfig+0x66>
 8001166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116a:	6023      	str	r3, [r4, #0]
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001172:	e7cd      	b.n	8001110 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001174:	4c67      	ldr	r4, [pc, #412]	; (8001314 <HAL_RCC_OscConfig+0x270>)
 8001176:	6863      	ldr	r3, [r4, #4]
 8001178:	f013 0f0c 	tst.w	r3, #12
 800117c:	d007      	beq.n	800118e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800117e:	6863      	ldr	r3, [r4, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b08      	cmp	r3, #8
 8001186:	d110      	bne.n	80011aa <HAL_RCC_OscConfig+0x106>
 8001188:	6863      	ldr	r3, [r4, #4]
 800118a:	03da      	lsls	r2, r3, #15
 800118c:	d40d      	bmi.n	80011aa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	079b      	lsls	r3, r3, #30
 8001192:	d502      	bpl.n	800119a <HAL_RCC_OscConfig+0xf6>
 8001194:	692b      	ldr	r3, [r5, #16]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d1af      	bne.n	80010fa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	696a      	ldr	r2, [r5, #20]
 800119e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011a6:	6023      	str	r3, [r4, #0]
 80011a8:	e785      	b.n	80010b6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011aa:	692a      	ldr	r2, [r5, #16]
 80011ac:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <HAL_RCC_OscConfig+0x274>)
 80011ae:	b16a      	cbz	r2, 80011cc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011b4:	f7ff fa06 	bl	80005c4 <HAL_GetTick>
 80011b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	079f      	lsls	r7, r3, #30
 80011be:	d4ec      	bmi.n	800119a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c0:	f7ff fa00 	bl	80005c4 <HAL_GetTick>
 80011c4:	1b80      	subs	r0, r0, r6
 80011c6:	2802      	cmp	r0, #2
 80011c8:	d9f7      	bls.n	80011ba <HAL_RCC_OscConfig+0x116>
 80011ca:	e7ad      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80011cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011ce:	f7ff f9f9 	bl	80005c4 <HAL_GetTick>
 80011d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	0798      	lsls	r0, r3, #30
 80011d8:	f57f af6d 	bpl.w	80010b6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011dc:	f7ff f9f2 	bl	80005c4 <HAL_GetTick>
 80011e0:	1b80      	subs	r0, r0, r6
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d9f6      	bls.n	80011d4 <HAL_RCC_OscConfig+0x130>
 80011e6:	e79f      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e8:	69aa      	ldr	r2, [r5, #24]
 80011ea:	4c4a      	ldr	r4, [pc, #296]	; (8001314 <HAL_RCC_OscConfig+0x270>)
 80011ec:	4b4b      	ldr	r3, [pc, #300]	; (800131c <HAL_RCC_OscConfig+0x278>)
 80011ee:	b1da      	cbz	r2, 8001228 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011f4:	f7ff f9e6 	bl	80005c4 <HAL_GetTick>
 80011f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011fc:	079b      	lsls	r3, r3, #30
 80011fe:	d50d      	bpl.n	800121c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001200:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001204:	4b46      	ldr	r3, [pc, #280]	; (8001320 <HAL_RCC_OscConfig+0x27c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	fbb3 f3f2 	udiv	r3, r3, r2
 800120c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800120e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001210:	9b01      	ldr	r3, [sp, #4]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	9201      	str	r2, [sp, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f9      	bne.n	800120e <HAL_RCC_OscConfig+0x16a>
 800121a:	e750      	b.n	80010be <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121c:	f7ff f9d2 	bl	80005c4 <HAL_GetTick>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	2802      	cmp	r0, #2
 8001224:	d9e9      	bls.n	80011fa <HAL_RCC_OscConfig+0x156>
 8001226:	e77f      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001228:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800122a:	f7ff f9cb 	bl	80005c4 <HAL_GetTick>
 800122e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001232:	079f      	lsls	r7, r3, #30
 8001234:	f57f af43 	bpl.w	80010be <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff f9c4 	bl	80005c4 <HAL_GetTick>
 800123c:	1b80      	subs	r0, r0, r6
 800123e:	2802      	cmp	r0, #2
 8001240:	d9f6      	bls.n	8001230 <HAL_RCC_OscConfig+0x18c>
 8001242:	e771      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001244:	4c33      	ldr	r4, [pc, #204]	; (8001314 <HAL_RCC_OscConfig+0x270>)
 8001246:	69e3      	ldr	r3, [r4, #28]
 8001248:	00d8      	lsls	r0, r3, #3
 800124a:	d424      	bmi.n	8001296 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800124c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	69e3      	ldr	r3, [r4, #28]
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	61e3      	str	r3, [r4, #28]
 8001256:	69e3      	ldr	r3, [r4, #28]
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	4e30      	ldr	r6, [pc, #192]	; (8001324 <HAL_RCC_OscConfig+0x280>)
 8001262:	6833      	ldr	r3, [r6, #0]
 8001264:	05d9      	lsls	r1, r3, #23
 8001266:	d518      	bpl.n	800129a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	68eb      	ldr	r3, [r5, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d126      	bne.n	80012bc <HAL_RCC_OscConfig+0x218>
 800126e:	6a23      	ldr	r3, [r4, #32]
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001276:	f7ff f9a5 	bl	80005c4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800127e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	6a23      	ldr	r3, [r4, #32]
 8001282:	079b      	lsls	r3, r3, #30
 8001284:	d53f      	bpl.n	8001306 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001286:	2f00      	cmp	r7, #0
 8001288:	f43f af1d 	beq.w	80010c6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800128c:	69e3      	ldr	r3, [r4, #28]
 800128e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001292:	61e3      	str	r3, [r4, #28]
 8001294:	e717      	b.n	80010c6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001296:	2700      	movs	r7, #0
 8001298:	e7e2      	b.n	8001260 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800129a:	6833      	ldr	r3, [r6, #0]
 800129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80012a2:	f7ff f98f 	bl	80005c4 <HAL_GetTick>
 80012a6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a8:	6833      	ldr	r3, [r6, #0]
 80012aa:	05da      	lsls	r2, r3, #23
 80012ac:	d4dc      	bmi.n	8001268 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ae:	f7ff f989 	bl	80005c4 <HAL_GetTick>
 80012b2:	eba0 0008 	sub.w	r0, r0, r8
 80012b6:	2864      	cmp	r0, #100	; 0x64
 80012b8:	d9f6      	bls.n	80012a8 <HAL_RCC_OscConfig+0x204>
 80012ba:	e735      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012bc:	b9ab      	cbnz	r3, 80012ea <HAL_RCC_OscConfig+0x246>
 80012be:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	f023 0301 	bic.w	r3, r3, #1
 80012c8:	6223      	str	r3, [r4, #32]
 80012ca:	6a23      	ldr	r3, [r4, #32]
 80012cc:	f023 0304 	bic.w	r3, r3, #4
 80012d0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012d2:	f7ff f977 	bl	80005c4 <HAL_GetTick>
 80012d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	6a23      	ldr	r3, [r4, #32]
 80012da:	0798      	lsls	r0, r3, #30
 80012dc:	d5d3      	bpl.n	8001286 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012de:	f7ff f971 	bl	80005c4 <HAL_GetTick>
 80012e2:	1b80      	subs	r0, r0, r6
 80012e4:	4540      	cmp	r0, r8
 80012e6:	d9f7      	bls.n	80012d8 <HAL_RCC_OscConfig+0x234>
 80012e8:	e71e      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	6a23      	ldr	r3, [r4, #32]
 80012ee:	d103      	bne.n	80012f8 <HAL_RCC_OscConfig+0x254>
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6223      	str	r3, [r4, #32]
 80012f6:	e7ba      	b.n	800126e <HAL_RCC_OscConfig+0x1ca>
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6223      	str	r3, [r4, #32]
 80012fe:	6a23      	ldr	r3, [r4, #32]
 8001300:	f023 0304 	bic.w	r3, r3, #4
 8001304:	e7b6      	b.n	8001274 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f7ff f95d 	bl	80005c4 <HAL_GetTick>
 800130a:	eba0 0008 	sub.w	r0, r0, r8
 800130e:	42b0      	cmp	r0, r6
 8001310:	d9b6      	bls.n	8001280 <HAL_RCC_OscConfig+0x1dc>
 8001312:	e709      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
 8001314:	40021000 	.word	0x40021000
 8001318:	42420000 	.word	0x42420000
 800131c:	42420480 	.word	0x42420480
 8001320:	20000000 	.word	0x20000000
 8001324:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001328:	4c22      	ldr	r4, [pc, #136]	; (80013b4 <HAL_RCC_OscConfig+0x310>)
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	2b08      	cmp	r3, #8
 8001332:	f43f aee2 	beq.w	80010fa <HAL_RCC_OscConfig+0x56>
 8001336:	2300      	movs	r3, #0
 8001338:	4e1f      	ldr	r6, [pc, #124]	; (80013b8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800133c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133e:	d12b      	bne.n	8001398 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001340:	f7ff f940 	bl	80005c4 <HAL_GetTick>
 8001344:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	0199      	lsls	r1, r3, #6
 800134a:	d41f      	bmi.n	800138c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800134c:	6a2b      	ldr	r3, [r5, #32]
 800134e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001352:	d105      	bne.n	8001360 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001354:	6862      	ldr	r2, [r4, #4]
 8001356:	68a9      	ldr	r1, [r5, #8]
 8001358:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800135c:	430a      	orrs	r2, r1
 800135e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001360:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001362:	6862      	ldr	r2, [r4, #4]
 8001364:	430b      	orrs	r3, r1
 8001366:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800136a:	4313      	orrs	r3, r2
 800136c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800136e:	2301      	movs	r3, #1
 8001370:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001372:	f7ff f927 	bl	80005c4 <HAL_GetTick>
 8001376:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	019a      	lsls	r2, r3, #6
 800137c:	f53f aea7 	bmi.w	80010ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff f920 	bl	80005c4 <HAL_GetTick>
 8001384:	1b40      	subs	r0, r0, r5
 8001386:	2802      	cmp	r0, #2
 8001388:	d9f6      	bls.n	8001378 <HAL_RCC_OscConfig+0x2d4>
 800138a:	e6cd      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff f91a 	bl	80005c4 <HAL_GetTick>
 8001390:	1bc0      	subs	r0, r0, r7
 8001392:	2802      	cmp	r0, #2
 8001394:	d9d7      	bls.n	8001346 <HAL_RCC_OscConfig+0x2a2>
 8001396:	e6c7      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001398:	f7ff f914 	bl	80005c4 <HAL_GetTick>
 800139c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	019b      	lsls	r3, r3, #6
 80013a2:	f57f ae94 	bpl.w	80010ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a6:	f7ff f90d 	bl	80005c4 <HAL_GetTick>
 80013aa:	1b40      	subs	r0, r0, r5
 80013ac:	2802      	cmp	r0, #2
 80013ae:	d9f6      	bls.n	800139e <HAL_RCC_OscConfig+0x2fa>
 80013b0:	e6ba      	b.n	8001128 <HAL_RCC_OscConfig+0x84>
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	42420060 	.word	0x42420060

080013bc <HAL_RCC_GetSysClockFreq>:
{
 80013bc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80013c0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013c2:	ac02      	add	r4, sp, #8
 80013c4:	f103 0510 	add.w	r5, r3, #16
 80013c8:	4622      	mov	r2, r4
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	6859      	ldr	r1, [r3, #4]
 80013ce:	3308      	adds	r3, #8
 80013d0:	c203      	stmia	r2!, {r0, r1}
 80013d2:	42ab      	cmp	r3, r5
 80013d4:	4614      	mov	r4, r2
 80013d6:	d1f7      	bne.n	80013c8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013d8:	2301      	movs	r3, #1
 80013da:	f88d 3004 	strb.w	r3, [sp, #4]
 80013de:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80013e0:	4911      	ldr	r1, [pc, #68]	; (8001428 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013e2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80013e6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013e8:	f003 020c 	and.w	r2, r3, #12
 80013ec:	2a08      	cmp	r2, #8
 80013ee:	d117      	bne.n	8001420 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80013f4:	a806      	add	r0, sp, #24
 80013f6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013f8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013fa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013fe:	d50c      	bpl.n	800141a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001400:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001402:	480a      	ldr	r0, [pc, #40]	; (800142c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001404:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001408:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140a:	aa06      	add	r2, sp, #24
 800140c:	4413      	add	r3, r2
 800140e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001412:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001416:	b007      	add	sp, #28
 8001418:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_RCC_GetSysClockFreq+0x74>)
 800141c:	4350      	muls	r0, r2
 800141e:	e7fa      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001422:	e7f8      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x5a>
 8001424:	080041ac 	.word	0x080041ac
 8001428:	40021000 	.word	0x40021000
 800142c:	007a1200 	.word	0x007a1200
 8001430:	003d0900 	.word	0x003d0900

08001434 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001434:	4a4d      	ldr	r2, [pc, #308]	; (800156c <HAL_RCC_ClockConfig+0x138>)
{
 8001436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800143a:	6813      	ldr	r3, [r2, #0]
{
 800143c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	428b      	cmp	r3, r1
{
 8001444:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001446:	d328      	bcc.n	800149a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001448:	682a      	ldr	r2, [r5, #0]
 800144a:	0791      	lsls	r1, r2, #30
 800144c:	d432      	bmi.n	80014b4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144e:	07d2      	lsls	r2, r2, #31
 8001450:	d438      	bmi.n	80014c4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001452:	4a46      	ldr	r2, [pc, #280]	; (800156c <HAL_RCC_ClockConfig+0x138>)
 8001454:	6813      	ldr	r3, [r2, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	429e      	cmp	r6, r3
 800145c:	d373      	bcc.n	8001546 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145e:	682a      	ldr	r2, [r5, #0]
 8001460:	4c43      	ldr	r4, [pc, #268]	; (8001570 <HAL_RCC_ClockConfig+0x13c>)
 8001462:	f012 0f04 	tst.w	r2, #4
 8001466:	d179      	bne.n	800155c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001468:	0713      	lsls	r3, r2, #28
 800146a:	d506      	bpl.n	800147a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800146c:	6863      	ldr	r3, [r4, #4]
 800146e:	692a      	ldr	r2, [r5, #16]
 8001470:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001474:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001478:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800147a:	f7ff ff9f 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 800147e:	6863      	ldr	r3, [r4, #4]
 8001480:	4a3c      	ldr	r2, [pc, #240]	; (8001574 <HAL_RCC_ClockConfig+0x140>)
 8001482:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	40d8      	lsrs	r0, r3
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <HAL_RCC_ClockConfig+0x144>)
 800148c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff f802 	bl	8000498 <HAL_InitTick>
  return HAL_OK;
 8001494:	2000      	movs	r0, #0
}
 8001496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	f023 0307 	bic.w	r3, r3, #7
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014a4:	6813      	ldr	r3, [r2, #0]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	4299      	cmp	r1, r3
 80014ac:	d0cc      	beq.n	8001448 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
 80014b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b4:	492e      	ldr	r1, [pc, #184]	; (8001570 <HAL_RCC_ClockConfig+0x13c>)
 80014b6:	68a8      	ldr	r0, [r5, #8]
 80014b8:	684b      	ldr	r3, [r1, #4]
 80014ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014be:	4303      	orrs	r3, r0
 80014c0:	604b      	str	r3, [r1, #4]
 80014c2:	e7c4      	b.n	800144e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c4:	686a      	ldr	r2, [r5, #4]
 80014c6:	4c2a      	ldr	r4, [pc, #168]	; (8001570 <HAL_RCC_ClockConfig+0x13c>)
 80014c8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014cc:	d11c      	bne.n	8001508 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d2:	d0ec      	beq.n	80014ae <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	4313      	orrs	r3, r2
 80014e0:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80014e2:	f7ff f86f 	bl	80005c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e6:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80014e8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d114      	bne.n	8001518 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ee:	6863      	ldr	r3, [r4, #4]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d0ac      	beq.n	8001452 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f8:	f7ff f864 	bl	80005c4 <HAL_GetTick>
 80014fc:	1bc0      	subs	r0, r0, r7
 80014fe:	4540      	cmp	r0, r8
 8001500:	d9f5      	bls.n	80014ee <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001502:	2003      	movs	r0, #3
 8001504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001508:	2a02      	cmp	r2, #2
 800150a:	d102      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001510:	e7df      	b.n	80014d2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001512:	f013 0f02 	tst.w	r3, #2
 8001516:	e7dc      	b.n	80014d2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001518:	2b02      	cmp	r3, #2
 800151a:	d10f      	bne.n	800153c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800151c:	6863      	ldr	r3, [r4, #4]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b08      	cmp	r3, #8
 8001524:	d095      	beq.n	8001452 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001526:	f7ff f84d 	bl	80005c4 <HAL_GetTick>
 800152a:	1bc0      	subs	r0, r0, r7
 800152c:	4540      	cmp	r0, r8
 800152e:	d9f5      	bls.n	800151c <HAL_RCC_ClockConfig+0xe8>
 8001530:	e7e7      	b.n	8001502 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001532:	f7ff f847 	bl	80005c4 <HAL_GetTick>
 8001536:	1bc0      	subs	r0, r0, r7
 8001538:	4540      	cmp	r0, r8
 800153a:	d8e2      	bhi.n	8001502 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800153c:	6863      	ldr	r3, [r4, #4]
 800153e:	f013 0f0c 	tst.w	r3, #12
 8001542:	d1f6      	bne.n	8001532 <HAL_RCC_ClockConfig+0xfe>
 8001544:	e785      	b.n	8001452 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	f023 0307 	bic.w	r3, r3, #7
 800154c:	4333      	orrs	r3, r6
 800154e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001550:	6813      	ldr	r3, [r2, #0]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	429e      	cmp	r6, r3
 8001558:	d1a9      	bne.n	80014ae <HAL_RCC_ClockConfig+0x7a>
 800155a:	e780      	b.n	800145e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155c:	6863      	ldr	r3, [r4, #4]
 800155e:	68e9      	ldr	r1, [r5, #12]
 8001560:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001564:	430b      	orrs	r3, r1
 8001566:	6063      	str	r3, [r4, #4]
 8001568:	e77e      	b.n	8001468 <HAL_RCC_ClockConfig+0x34>
 800156a:	bf00      	nop
 800156c:	40022000 	.word	0x40022000
 8001570:	40021000 	.word	0x40021000
 8001574:	080041cc 	.word	0x080041cc
 8001578:	20000000 	.word	0x20000000

0800157c <HAL_RCC_GetHCLKFreq>:
}
 800157c:	4b01      	ldr	r3, [pc, #4]	; (8001584 <HAL_RCC_GetHCLKFreq+0x8>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000000 	.word	0x20000000

08001588 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <HAL_RCC_GetPCLK1Freq+0x14>)
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	4a03      	ldr	r2, [pc, #12]	; (80015a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001596:	6810      	ldr	r0, [r2, #0]
}    
 8001598:	40d8      	lsrs	r0, r3
 800159a:	4770      	bx	lr
 800159c:	40021000 	.word	0x40021000
 80015a0:	080041dc 	.word	0x080041dc
 80015a4:	20000000 	.word	0x20000000

080015a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <HAL_RCC_GetPCLK2Freq+0x14>)
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015b6:	6810      	ldr	r0, [r2, #0]
} 
 80015b8:	40d8      	lsrs	r0, r3
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000
 80015c0:	080041dc 	.word	0x080041dc
 80015c4:	20000000 	.word	0x20000000

080015c8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015c8:	230f      	movs	r3, #15
 80015ca:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_RCC_GetClockConfig+0x34>)
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80015dc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80015e4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	08db      	lsrs	r3, r3, #3
 80015ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015ee:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_RCC_GetClockConfig+0x38>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	600b      	str	r3, [r1, #0]
 80015fa:	4770      	bx	lr
 80015fc:	40021000 	.word	0x40021000
 8001600:	40022000 	.word	0x40022000

08001604 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001604:	6803      	ldr	r3, [r0, #0]
{
 8001606:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800160a:	07d9      	lsls	r1, r3, #31
{
 800160c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800160e:	d520      	bpl.n	8001652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001610:	4c35      	ldr	r4, [pc, #212]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001612:	69e3      	ldr	r3, [r4, #28]
 8001614:	00da      	lsls	r2, r3, #3
 8001616:	d432      	bmi.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001618:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	69e3      	ldr	r3, [r4, #28]
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	61e3      	str	r3, [r4, #28]
 8001622:	69e3      	ldr	r3, [r4, #28]
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	4e2f      	ldr	r6, [pc, #188]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800162e:	6833      	ldr	r3, [r6, #0]
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	d526      	bpl.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001634:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001636:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800163a:	d136      	bne.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800163c:	6a23      	ldr	r3, [r4, #32]
 800163e:	686a      	ldr	r2, [r5, #4]
 8001640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001644:	4313      	orrs	r3, r2
 8001646:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001648:	b11f      	cbz	r7, 8001652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164a:	69e3      	ldr	r3, [r4, #28]
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001650:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001652:	6828      	ldr	r0, [r5, #0]
 8001654:	0783      	lsls	r3, r0, #30
 8001656:	d506      	bpl.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001658:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800165a:	68a9      	ldr	r1, [r5, #8]
 800165c:	6853      	ldr	r3, [r2, #4]
 800165e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001662:	430b      	orrs	r3, r1
 8001664:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001666:	f010 0010 	ands.w	r0, r0, #16
 800166a:	d01b      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800166e:	68e9      	ldr	r1, [r5, #12]
 8001670:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001672:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001674:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001678:	430b      	orrs	r3, r1
 800167a:	6053      	str	r3, [r2, #4]
 800167c:	e012      	b.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800167e:	2700      	movs	r7, #0
 8001680:	e7d4      	b.n	800162c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001682:	6833      	ldr	r3, [r6, #0]
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800168a:	f7fe ff9b 	bl	80005c4 <HAL_GetTick>
 800168e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	6833      	ldr	r3, [r6, #0]
 8001692:	05d8      	lsls	r0, r3, #23
 8001694:	d4ce      	bmi.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7fe ff95 	bl	80005c4 <HAL_GetTick>
 800169a:	eba0 0008 	sub.w	r0, r0, r8
 800169e:	2864      	cmp	r0, #100	; 0x64
 80016a0:	d9f6      	bls.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80016a2:	2003      	movs	r0, #3
}
 80016a4:	b002      	add	sp, #8
 80016a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016aa:	686a      	ldr	r2, [r5, #4]
 80016ac:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d0c3      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80016b4:	2001      	movs	r0, #1
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016b8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80016ba:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016bc:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016c2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80016c4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016c6:	07d9      	lsls	r1, r3, #31
 80016c8:	d5b8      	bpl.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80016ca:	f7fe ff7b 	bl	80005c4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80016d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	6a23      	ldr	r3, [r4, #32]
 80016d6:	079a      	lsls	r2, r3, #30
 80016d8:	d4b0      	bmi.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7fe ff73 	bl	80005c4 <HAL_GetTick>
 80016de:	1b80      	subs	r0, r0, r6
 80016e0:	4540      	cmp	r0, r8
 80016e2:	d9f7      	bls.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80016e4:	e7dd      	b.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40007000 	.word	0x40007000
 80016f0:	42420440 	.word	0x42420440

080016f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80016f4:	b570      	push	{r4, r5, r6, lr}
 80016f6:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016f8:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 80016fa:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016fc:	ad02      	add	r5, sp, #8
 80016fe:	f103 0610 	add.w	r6, r3, #16
 8001702:	462a      	mov	r2, r5
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	3308      	adds	r3, #8
 800170a:	c203      	stmia	r2!, {r0, r1}
 800170c:	42b3      	cmp	r3, r6
 800170e:	4615      	mov	r5, r2
 8001710:	d1f7      	bne.n	8001702 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001712:	2301      	movs	r3, #1
 8001714:	f88d 3004 	strb.w	r3, [sp, #4]
 8001718:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800171a:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800171c:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8001720:	d047      	beq.n	80017b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8001722:	2c10      	cmp	r4, #16
 8001724:	d017      	beq.n	8001756 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8001726:	2c01      	cmp	r4, #1
 8001728:	d14f      	bne.n	80017ca <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800172a:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800172e:	4a29      	ldr	r2, [pc, #164]	; (80017d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001730:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001732:	4019      	ands	r1, r3
 8001734:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001738:	d044      	beq.n	80017c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800173a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800173e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001742:	d12d      	bne.n	80017a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8001744:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001748:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800174a:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800174e:	bf08      	it	eq
 8001750:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8001752:	b006      	add	sp, #24
 8001754:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001758:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001760:	d0f7      	beq.n	8001752 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001762:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8001766:	a806      	add	r0, sp, #24
 8001768:	4402      	add	r2, r0
 800176a:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800176e:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001770:	bf41      	itttt	mi
 8001772:	685a      	ldrmi	r2, [r3, #4]
 8001774:	a906      	addmi	r1, sp, #24
 8001776:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800177a:	1852      	addmi	r2, r2, r1
 800177c:	bf44      	itt	mi
 800177e:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001782:	4a15      	ldrmi	r2, [pc, #84]	; (80017d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001784:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001786:	bf4c      	ite	mi
 8001788:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800178c:	4a13      	ldrpl	r2, [pc, #76]	; (80017dc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800178e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001790:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001794:	d4dd      	bmi.n	8001752 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8001796:	2303      	movs	r3, #3
 8001798:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800179a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800179e:	e7d8      	b.n	8001752 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80017a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017a4:	d111      	bne.n	80017ca <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80017a6:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80017a8:	f24f 4024 	movw	r0, #62500	; 0xf424
 80017ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017b0:	e7cd      	b.n	800174e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80017b2:	f7ff fef9 	bl	80015a8 <HAL_RCC_GetPCLK2Freq>
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80017be:	3301      	adds	r3, #1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	e7ea      	b.n	800179a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 80017c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017c8:	e7c3      	b.n	8001752 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 80017ca:	2000      	movs	r0, #0
 80017cc:	e7c1      	b.n	8001752 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80017ce:	bf00      	nop
 80017d0:	080041bc 	.word	0x080041bc
 80017d4:	40021000 	.word	0x40021000
 80017d8:	007a1200 	.word	0x007a1200
 80017dc:	003d0900 	.word	0x003d0900

080017e0 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80017e0:	6803      	ldr	r3, [r0, #0]
{
 80017e2:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80017e4:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80017e6:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80017e8:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80017ea:	b295      	uxth	r5, r2
 80017ec:	b28c      	uxth	r4, r1
 80017ee:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80017f0:	bf1d      	ittte	ne
 80017f2:	69d8      	ldrne	r0, [r3, #28]
 80017f4:	b280      	uxthne	r0, r0
 80017f6:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80017fa:	b280      	uxtheq	r0, r0
 80017fc:	bf08      	it	eq
 80017fe:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8001802:	bd30      	pop	{r4, r5, pc}

08001804 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001804:	6803      	ldr	r3, [r0, #0]
 8001806:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 800180a:	b29b      	uxth	r3, r3
}
 800180c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001810:	4770      	bx	lr

08001812 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8001812:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001814:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8001816:	f000 000f 	and.w	r0, r0, #15
 800181a:	fb02 0003 	mla	r0, r2, r3, r0
}
 800181e:	b2c0      	uxtb	r0, r0
 8001820:	4770      	bx	lr

08001822 <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 8001822:	2902      	cmp	r1, #2
{
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 800182a:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 800182e:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 8001832:	d81a      	bhi.n	800186a <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 8001834:	434b      	muls	r3, r1
 8001836:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 800183a:	fbb3 f0f6 	udiv	r0, r3, r6
 800183e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001842:	fbb4 f3f3 	udiv	r3, r4, r3
 8001846:	3204      	adds	r2, #4
 8001848:	442a      	add	r2, r5
 800184a:	4410      	add	r0, r2
 800184c:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8001850:	4418      	add	r0, r3
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	fbb4 f4f3 	udiv	r4, r4, r3
 8001858:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 800185a:	2307      	movs	r3, #7
 800185c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001860:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001864:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8001866:	b2c0      	uxtb	r0, r0
 8001868:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 800186a:	fb03 f001 	mul.w	r0, r3, r1
 800186e:	fbb0 f0f6 	udiv	r0, r0, r6
 8001872:	3202      	adds	r2, #2
 8001874:	442a      	add	r2, r5
 8001876:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800187a:	4410      	add	r0, r2
 800187c:	2264      	movs	r2, #100	; 0x64
 800187e:	fbb5 f3f3 	udiv	r3, r5, r3
 8001882:	fbb5 f2f2 	udiv	r2, r5, r2
 8001886:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 800188a:	4418      	add	r0, r3
 800188c:	1a80      	subs	r0, r0, r2
 800188e:	e7e4      	b.n	800185a <RTC_WeekDayNum+0x38>

08001890 <RTC_EnterInitMode>:
{
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8001894:	f7fe fe96 	bl	80005c4 <HAL_GetTick>
 8001898:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	0692      	lsls	r2, r2, #26
 80018a0:	d505      	bpl.n	80018ae <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80018a2:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 80018a4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80018a6:	f042 0210 	orr.w	r2, r2, #16
 80018aa:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 80018ac:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80018ae:	f7fe fe89 	bl	80005c4 <HAL_GetTick>
 80018b2:	1b40      	subs	r0, r0, r5
 80018b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018b8:	d9ef      	bls.n	800189a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80018ba:	2003      	movs	r0, #3
}
 80018bc:	bd38      	pop	{r3, r4, r5, pc}

080018be <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018be:	6802      	ldr	r2, [r0, #0]
{
 80018c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018c2:	6853      	ldr	r3, [r2, #4]
{
 80018c4:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018c6:	f023 0310 	bic.w	r3, r3, #16
 80018ca:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80018cc:	f7fe fe7a 	bl	80005c4 <HAL_GetTick>
 80018d0:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	069b      	lsls	r3, r3, #26
 80018d8:	d501      	bpl.n	80018de <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 80018da:	2000      	movs	r0, #0
 80018dc:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80018de:	f7fe fe71 	bl	80005c4 <HAL_GetTick>
 80018e2:	1b40      	subs	r0, r0, r5
 80018e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018e8:	d9f3      	bls.n	80018d2 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80018ea:	2003      	movs	r0, #3
}
 80018ec:	bd38      	pop	{r3, r4, r5, pc}

080018ee <RTC_WriteTimeCounter>:
{
 80018ee:	b538      	push	{r3, r4, r5, lr}
 80018f0:	4605      	mov	r5, r0
 80018f2:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80018f4:	f7ff ffcc 	bl	8001890 <RTC_EnterInitMode>
 80018f8:	b958      	cbnz	r0, 8001912 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80018fa:	682b      	ldr	r3, [r5, #0]
 80018fc:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80018fe:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001900:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001902:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001904:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001906:	f7ff ffda 	bl	80018be <RTC_ExitInitMode>
    status = HAL_ERROR;
 800190a:	3000      	adds	r0, #0
 800190c:	bf18      	it	ne
 800190e:	2001      	movne	r0, #1
 8001910:	bd38      	pop	{r3, r4, r5, pc}
 8001912:	2001      	movs	r0, #1
}
 8001914:	bd38      	pop	{r3, r4, r5, pc}

08001916 <RTC_WriteAlarmCounter>:
{
 8001916:	b538      	push	{r3, r4, r5, lr}
 8001918:	4605      	mov	r5, r0
 800191a:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800191c:	f7ff ffb8 	bl	8001890 <RTC_EnterInitMode>
 8001920:	b958      	cbnz	r0, 800193a <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001922:	682b      	ldr	r3, [r5, #0]
 8001924:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001926:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001928:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800192a:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800192c:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800192e:	f7ff ffc6 	bl	80018be <RTC_ExitInitMode>
    status = HAL_ERROR;
 8001932:	3000      	adds	r0, #0
 8001934:	bf18      	it	ne
 8001936:	2001      	movne	r0, #1
 8001938:	bd38      	pop	{r3, r4, r5, pc}
 800193a:	2001      	movs	r0, #1
}
 800193c:	bd38      	pop	{r3, r4, r5, pc}

0800193e <HAL_RTC_SetTime>:
{
 800193e:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 8001940:	4604      	mov	r4, r0
 8001942:	b1e0      	cbz	r0, 800197e <HAL_RTC_SetTime+0x40>
 8001944:	b1d9      	cbz	r1, 800197e <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8001946:	7c03      	ldrb	r3, [r0, #16]
 8001948:	2602      	movs	r6, #2
 800194a:	2b01      	cmp	r3, #1
 800194c:	d046      	beq.n	80019dc <HAL_RTC_SetTime+0x9e>
 800194e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001950:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8001952:	7403      	strb	r3, [r0, #16]
 8001954:	7808      	ldrb	r0, [r1, #0]
 8001956:	784e      	ldrb	r6, [r1, #1]
 8001958:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 800195a:	b992      	cbnz	r2, 8001982 <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 800195c:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800195e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 8001962:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001964:	fb03 5000 	mla	r0, r3, r0, r5
 8001968:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800196a:	4629      	mov	r1, r5
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff ffbe 	bl	80018ee <RTC_WriteTimeCounter>
 8001972:	4606      	mov	r6, r0
 8001974:	b1b0      	cbz	r0, 80019a4 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001976:	2304      	movs	r3, #4
 8001978:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 800197a:	2300      	movs	r3, #0
 800197c:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 800197e:	2601      	movs	r6, #1
 8001980:	e02c      	b.n	80019dc <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001982:	f7ff ff46 	bl	8001812 <RTC_Bcd2ToByte>
 8001986:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001988:	4630      	mov	r0, r6
 800198a:	f7ff ff42 	bl	8001812 <RTC_Bcd2ToByte>
 800198e:	233c      	movs	r3, #60	; 0x3c
 8001990:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001992:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001996:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 800199a:	4608      	mov	r0, r1
 800199c:	f7ff ff39 	bl	8001812 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80019a0:	4405      	add	r5, r0
 80019a2:	e7e2      	b.n	800196a <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80019a4:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80019a6:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80019a8:	6853      	ldr	r3, [r2, #4]
 80019aa:	f023 0305 	bic.w	r3, r3, #5
 80019ae:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80019b0:	f7ff ff28 	bl	8001804 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80019b4:	1c43      	adds	r3, r0, #1
 80019b6:	d00d      	beq.n	80019d4 <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 80019b8:	4285      	cmp	r5, r0
 80019ba:	d90b      	bls.n	80019d4 <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80019bc:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80019c0:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff ffa6 	bl	8001916 <RTC_WriteAlarmCounter>
 80019ca:	b118      	cbz	r0, 80019d4 <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80019cc:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80019ce:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80019d0:	7463      	strb	r3, [r4, #17]
 80019d2:	e7d4      	b.n	800197e <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 80019d4:	2301      	movs	r3, #1
 80019d6:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 80019d8:	2300      	movs	r3, #0
 80019da:	7423      	strb	r3, [r4, #16]
}
 80019dc:	4630      	mov	r0, r6
 80019de:	bd70      	pop	{r4, r5, r6, pc}

080019e0 <HAL_RTC_SetDate>:
{
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 80019e4:	4604      	mov	r4, r0
 80019e6:	b358      	cbz	r0, 8001a40 <HAL_RTC_SetDate+0x60>
 80019e8:	b351      	cbz	r1, 8001a40 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 80019ea:	7c03      	ldrb	r3, [r0, #16]
 80019ec:	2002      	movs	r0, #2
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d027      	beq.n	8001a42 <HAL_RTC_SetDate+0x62>
 80019f2:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80019f4:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 80019f6:	7423      	strb	r3, [r4, #16]
 80019f8:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80019fa:	bb1a      	cbnz	r2, 8001a44 <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80019fc:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80019fe:	784b      	ldrb	r3, [r1, #1]
 8001a00:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001a02:	788b      	ldrb	r3, [r1, #2]
 8001a04:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001a06:	7ba2      	ldrb	r2, [r4, #14]
 8001a08:	7b61      	ldrb	r1, [r4, #13]
 8001a0a:	7be0      	ldrb	r0, [r4, #15]
 8001a0c:	f7ff ff09 	bl	8001822 <RTC_WeekDayNum>
 8001a10:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001a12:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fee3 	bl	80017e0 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_RTC_SetDate+0xac>)
 8001a1c:	4298      	cmp	r0, r3
 8001a1e:	d930      	bls.n	8001a82 <HAL_RTC_SetDate+0xa2>
 8001a20:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8001a24:	fbb0 f5f3 	udiv	r5, r0, r3
 8001a28:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7ff ff5d 	bl	80018ee <RTC_WriteTimeCounter>
 8001a34:	4606      	mov	r6, r0
 8001a36:	b188      	cbz	r0, 8001a5c <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8001a40:	2001      	movs	r0, #1
}
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001a44:	f7ff fee5 	bl	8001812 <RTC_Bcd2ToByte>
 8001a48:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001a4a:	7848      	ldrb	r0, [r1, #1]
 8001a4c:	f7ff fee1 	bl	8001812 <RTC_Bcd2ToByte>
 8001a50:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001a52:	7888      	ldrb	r0, [r1, #2]
 8001a54:	f7ff fedd 	bl	8001812 <RTC_Bcd2ToByte>
 8001a58:	73a0      	strb	r0, [r4, #14]
 8001a5a:	e7d4      	b.n	8001a06 <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f7ff fed1 	bl	8001804 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001a62:	1c43      	adds	r3, r0, #1
 8001a64:	d00d      	beq.n	8001a82 <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 8001a66:	4285      	cmp	r5, r0
 8001a68:	d90b      	bls.n	8001a82 <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001a6a:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001a6e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff ff4f 	bl	8001916 <RTC_WriteAlarmCounter>
 8001a78:	b118      	cbz	r0, 8001a82 <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001a7a:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001a7c:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001a7e:	7463      	strb	r3, [r4, #17]
 8001a80:	e7de      	b.n	8001a40 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8001a82:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8001a84:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8001a86:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8001a88:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}
 8001a8c:	00015f8f 	.word	0x00015f8f

08001a90 <HAL_RTC_WaitForSynchro>:
{
 8001a90:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001a92:	4604      	mov	r4, r0
 8001a94:	b1a8      	cbz	r0, 8001ac2 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001a96:	6802      	ldr	r2, [r0, #0]
 8001a98:	6853      	ldr	r3, [r2, #4]
 8001a9a:	f023 0308 	bic.w	r3, r3, #8
 8001a9e:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001aa0:	f7fe fd90 	bl	80005c4 <HAL_GetTick>
 8001aa4:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	071b      	lsls	r3, r3, #28
 8001aac:	d501      	bpl.n	8001ab2 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8001aae:	2000      	movs	r0, #0
 8001ab0:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8001ab2:	f7fe fd87 	bl	80005c4 <HAL_GetTick>
 8001ab6:	1b40      	subs	r0, r0, r5
 8001ab8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001abc:	d9f3      	bls.n	8001aa6 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001abe:	2003      	movs	r0, #3
}
 8001ac0:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	bd38      	pop	{r3, r4, r5, pc}
	...

08001ac8 <HAL_RTC_Init>:
{
 8001ac8:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 8001aca:	4604      	mov	r4, r0
 8001acc:	b170      	cbz	r0, 8001aec <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001ace:	7c43      	ldrb	r3, [r0, #17]
 8001ad0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ad4:	b913      	cbnz	r3, 8001adc <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001ad6:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001ad8:	f7fe fc94 	bl	8000404 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001adc:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ade:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001ae0:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ae2:	f7ff ffd5 	bl	8001a90 <HAL_RTC_WaitForSynchro>
 8001ae6:	b118      	cbz	r0, 8001af0 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 8001aec:	2001      	movs	r0, #1
}
 8001aee:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7ff fecd 	bl	8001890 <RTC_EnterInitMode>
 8001af6:	2800      	cmp	r0, #0
 8001af8:	d1f6      	bne.n	8001ae8 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001afa:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001afc:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001afe:	6853      	ldr	r3, [r2, #4]
 8001b00:	f023 0307 	bic.w	r3, r3, #7
 8001b04:	6053      	str	r3, [r2, #4]
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001b08:	b118      	cbz	r0, 8001b12 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001b0a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b0c:	f021 0101 	bic.w	r1, r1, #1
 8001b10:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001b12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b14:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001b18:	4303      	orrs	r3, r0
 8001b1a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001b1c:	6860      	ldr	r0, [r4, #4]
 8001b1e:	1c43      	adds	r3, r0, #1
 8001b20:	d105      	bne.n	8001b2e <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff fde6 	bl	80016f4 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d0dd      	beq.n	8001ae8 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8001b2c:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001b2e:	6822      	ldr	r2, [r4, #0]
 8001b30:	6893      	ldr	r3, [r2, #8]
 8001b32:	f023 030f 	bic.w	r3, r3, #15
 8001b36:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001b3a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001b3c:	68d3      	ldr	r3, [r2, #12]
 8001b3e:	b280      	uxth	r0, r0
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	4318      	orrs	r0, r3
 8001b46:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7ff feb8 	bl	80018be <RTC_ExitInitMode>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	b110      	cbz	r0, 8001b58 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001b52:	2204      	movs	r2, #4
 8001b54:	7462      	strb	r2, [r4, #17]
 8001b56:	e7c9      	b.n	8001aec <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8001b58:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001b5a:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001b5c:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8001b5e:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8001b60:	bd10      	pop	{r4, pc}
 8001b62:	bf00      	nop
 8001b64:	40006c00 	.word	0x40006c00

08001b68 <HAL_TIM_Base_MspInit>:
 8001b68:	4770      	bx	lr

08001b6a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b6a:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001b6c:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
}
 8001b7e:	4770      	bx	lr

08001b80 <HAL_TIM_OC_DelayElapsedCallback>:
 8001b80:	4770      	bx	lr

08001b82 <HAL_TIM_IC_CaptureCallback>:
 8001b82:	4770      	bx	lr

08001b84 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001b84:	4770      	bx	lr

08001b86 <HAL_TIM_TriggerCallback>:
 8001b86:	4770      	bx	lr

08001b88 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b88:	6803      	ldr	r3, [r0, #0]
{
 8001b8a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b8c:	691a      	ldr	r2, [r3, #16]
{
 8001b8e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b90:	0791      	lsls	r1, r2, #30
 8001b92:	d50e      	bpl.n	8001bb2 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	0792      	lsls	r2, r2, #30
 8001b98:	d50b      	bpl.n	8001bb2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b9a:	f06f 0202 	mvn.w	r2, #2
 8001b9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba0:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba4:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba6:	079b      	lsls	r3, r3, #30
 8001ba8:	d077      	beq.n	8001c9a <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	f7ff ffea 	bl	8001b82 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	0750      	lsls	r0, r2, #29
 8001bb8:	d510      	bpl.n	8001bdc <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	0751      	lsls	r1, r2, #29
 8001bbe:	d50d      	bpl.n	8001bdc <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bc0:	f06f 0204 	mvn.w	r2, #4
 8001bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bc6:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bc8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bca:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bcc:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd2:	d068      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd4:	f7ff ffd5 	bl	8001b82 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	0712      	lsls	r2, r2, #28
 8001be2:	d50f      	bpl.n	8001c04 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	0710      	lsls	r0, r2, #28
 8001be8:	d50c      	bpl.n	8001c04 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bea:	f06f 0208 	mvn.w	r2, #8
 8001bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf0:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf6:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bfa:	d05a      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfc:	f7ff ffc1 	bl	8001b82 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c00:	2300      	movs	r3, #0
 8001c02:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	06d2      	lsls	r2, r2, #27
 8001c0a:	d510      	bpl.n	8001c2e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	06d0      	lsls	r0, r2, #27
 8001c10:	d50d      	bpl.n	8001c2e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c12:	f06f 0210 	mvn.w	r2, #16
 8001c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c18:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c1a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c1c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c1e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c24:	d04b      	beq.n	8001cbe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c26:	f7ff ffac 	bl	8001b82 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	07d1      	lsls	r1, r2, #31
 8001c34:	d508      	bpl.n	8001c48 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	07d2      	lsls	r2, r2, #31
 8001c3a:	d505      	bpl.n	8001c48 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c3c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c40:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c42:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c44:	f7fe fb6e 	bl	8000324 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	0610      	lsls	r0, r2, #24
 8001c4e:	d508      	bpl.n	8001c62 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	0611      	lsls	r1, r2, #24
 8001c54:	d505      	bpl.n	8001c62 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c56:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001c5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c5c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001c5e:	f000 f888 	bl	8001d72 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	0652      	lsls	r2, r2, #25
 8001c68:	d508      	bpl.n	8001c7c <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	0650      	lsls	r0, r2, #25
 8001c6e:	d505      	bpl.n	8001c7c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c70:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001c74:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c76:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001c78:	f7ff ff85 	bl	8001b86 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	0691      	lsls	r1, r2, #26
 8001c82:	d522      	bpl.n	8001cca <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	0692      	lsls	r2, r2, #26
 8001c88:	d51f      	bpl.n	8001cca <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c8a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001c8e:	4620      	mov	r0, r4
    }
  }
}
 8001c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c94:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001c96:	f000 b86b 	b.w	8001d70 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	f7ff ff71 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7ff ff70 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ca4:	e783      	b.n	8001bae <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	f7ff ff6b 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff ff6a 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cb0:	e792      	b.n	8001bd8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	f7ff ff65 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7ff ff64 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cbc:	e7a0      	b.n	8001c00 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cbe:	f7ff ff5f 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff ff5e 	bl	8001b84 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cc8:	e7af      	b.n	8001c2a <HAL_TIM_IRQHandler+0xa2>
 8001cca:	bd10      	pop	{r4, pc}

08001ccc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001cce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd0:	4290      	cmp	r0, r2
 8001cd2:	d00a      	beq.n	8001cea <TIM_Base_SetConfig+0x1e>
 8001cd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cd8:	d007      	beq.n	8001cea <TIM_Base_SetConfig+0x1e>
 8001cda:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001cde:	4290      	cmp	r0, r2
 8001ce0:	d003      	beq.n	8001cea <TIM_Base_SetConfig+0x1e>
 8001ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ce6:	4290      	cmp	r0, r2
 8001ce8:	d115      	bne.n	8001d16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001cea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001cf0:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <TIM_Base_SetConfig+0x6c>)
 8001cf4:	4290      	cmp	r0, r2
 8001cf6:	d00a      	beq.n	8001d0e <TIM_Base_SetConfig+0x42>
 8001cf8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cfc:	d007      	beq.n	8001d0e <TIM_Base_SetConfig+0x42>
 8001cfe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d02:	4290      	cmp	r0, r2
 8001d04:	d003      	beq.n	8001d0e <TIM_Base_SetConfig+0x42>
 8001d06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d0a:	4290      	cmp	r0, r2
 8001d0c:	d103      	bne.n	8001d16 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d0e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d14:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001d16:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001d1c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001d1e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d20:	688b      	ldr	r3, [r1, #8]
 8001d22:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d24:	680b      	ldr	r3, [r1, #0]
 8001d26:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <TIM_Base_SetConfig+0x6c>)
 8001d2a:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d2c:	bf04      	itt	eq
 8001d2e:	690b      	ldreq	r3, [r1, #16]
 8001d30:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001d32:	2301      	movs	r3, #1
 8001d34:	6143      	str	r3, [r0, #20]
 8001d36:	4770      	bx	lr
 8001d38:	40012c00 	.word	0x40012c00

08001d3c <HAL_TIM_Base_Init>:
{
 8001d3c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001d3e:	4604      	mov	r4, r0
 8001d40:	b1a0      	cbz	r0, 8001d6c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001d42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d4a:	b91b      	cbnz	r3, 8001d54 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001d4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001d50:	f7ff ff0a 	bl	8001b68 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001d54:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d56:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001d58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5c:	1d21      	adds	r1, r4, #4
 8001d5e:	f7ff ffb5 	bl	8001ccc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001d62:	2301      	movs	r3, #1
  return HAL_OK;
 8001d64:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001d66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001d6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d6c:	2001      	movs	r0, #1
}
 8001d6e:	bd10      	pop	{r4, pc}

08001d70 <HAL_TIMEx_CommutationCallback>:
 8001d70:	4770      	bx	lr

08001d72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d72:	4770      	bx	lr

08001d74 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d78:	6805      	ldr	r5, [r0, #0]
 8001d7a:	68c2      	ldr	r2, [r0, #12]
 8001d7c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d7e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d84:	4313      	orrs	r3, r2
 8001d86:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d88:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001d8a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001d90:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001d94:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d98:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d9e:	696b      	ldr	r3, [r5, #20]
 8001da0:	6982      	ldr	r2, [r0, #24]
 8001da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da6:	4313      	orrs	r3, r2
 8001da8:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001daa:	4b40      	ldr	r3, [pc, #256]	; (8001eac <UART_SetConfig+0x138>)
{
 8001dac:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001dae:	429d      	cmp	r5, r3
 8001db0:	f04f 0419 	mov.w	r4, #25
 8001db4:	d146      	bne.n	8001e44 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001db6:	f7ff fbf7 	bl	80015a8 <HAL_RCC_GetPCLK2Freq>
 8001dba:	fb04 f300 	mul.w	r3, r4, r0
 8001dbe:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001dc2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001dc6:	00b6      	lsls	r6, r6, #2
 8001dc8:	fbb3 f3f6 	udiv	r3, r3, r6
 8001dcc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001dd0:	011e      	lsls	r6, r3, #4
 8001dd2:	f7ff fbe9 	bl	80015a8 <HAL_RCC_GetPCLK2Freq>
 8001dd6:	4360      	muls	r0, r4
 8001dd8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	fbb0 f7f3 	udiv	r7, r0, r3
 8001de2:	f7ff fbe1 	bl	80015a8 <HAL_RCC_GetPCLK2Freq>
 8001de6:	4360      	muls	r0, r4
 8001de8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df2:	fbb3 f3f8 	udiv	r3, r3, r8
 8001df6:	fb08 7313 	mls	r3, r8, r3, r7
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	3332      	adds	r3, #50	; 0x32
 8001dfe:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e02:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001e06:	f7ff fbcf 	bl	80015a8 <HAL_RCC_GetPCLK2Freq>
 8001e0a:	4360      	muls	r0, r4
 8001e0c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001e10:	0092      	lsls	r2, r2, #2
 8001e12:	fbb0 faf2 	udiv	sl, r0, r2
 8001e16:	f7ff fbc7 	bl	80015a8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e1a:	4360      	muls	r0, r4
 8001e1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e26:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e2a:	fb08 a313 	mls	r3, r8, r3, sl
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	3332      	adds	r3, #50	; 0x32
 8001e32:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	433b      	orrs	r3, r7
 8001e3c:	4433      	add	r3, r6
 8001e3e:	60ab      	str	r3, [r5, #8]
 8001e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e44:	f7ff fba0 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
 8001e48:	fb04 f300 	mul.w	r3, r4, r0
 8001e4c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001e50:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001e54:	00b6      	lsls	r6, r6, #2
 8001e56:	fbb3 f3f6 	udiv	r3, r3, r6
 8001e5a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e5e:	011e      	lsls	r6, r3, #4
 8001e60:	f7ff fb92 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
 8001e64:	4360      	muls	r0, r4
 8001e66:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001e70:	f7ff fb8a 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
 8001e74:	4360      	muls	r0, r4
 8001e76:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e80:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e84:	fb08 7313 	mls	r3, r8, r3, r7
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	3332      	adds	r3, #50	; 0x32
 8001e8c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e90:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001e94:	f7ff fb78 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
 8001e98:	4360      	muls	r0, r4
 8001e9a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	fbb0 faf2 	udiv	sl, r0, r2
 8001ea4:	f7ff fb70 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
 8001ea8:	e7b7      	b.n	8001e1a <UART_SetConfig+0xa6>
 8001eaa:	bf00      	nop
 8001eac:	40013800 	.word	0x40013800

08001eb0 <HAL_UART_Init>:
{
 8001eb0:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	b340      	cbz	r0, 8001f08 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001eb6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001eba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ebe:	b91b      	cbnz	r3, 8001ec8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ec0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ec4:	f7fe fabc 	bl	8000440 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ec8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001eca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ecc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001ed0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ed2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ed8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001eda:	f7ff ff4b 	bl	8001d74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ede:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ef0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001efa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001efe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001f02:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001f06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f08:	2001      	movs	r0, #1
}
 8001f0a:	bd10      	pop	{r4, pc}

08001f0c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	a801      	add	r0, sp, #4
 8001f10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001f14:	b004      	add	sp, #16
 8001f16:	2000      	movs	r0, #0
 8001f18:	4770      	bx	lr

08001f1a <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001f1a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001f24:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001f28:	2000      	movs	r0, #0
 8001f2a:	4770      	bx	lr

08001f2c <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001f2c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001f30:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001f34:	045b      	lsls	r3, r3, #17
 8001f36:	0c5b      	lsrs	r3, r3, #17
 8001f38:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	4770      	bx	lr

08001f40 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001f40:	2000      	movs	r0, #0
 8001f42:	4770      	bx	lr

08001f44 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001f44:	b084      	sub	sp, #16
 8001f46:	b510      	push	{r4, lr}
 8001f48:	ac03      	add	r4, sp, #12
 8001f4a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001f52:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001f5a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001f5e:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001f62:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001f66:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001f6a:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001f72:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001f76:	4610      	mov	r0, r2
 8001f78:	4770      	bx	lr
	...

08001f7c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001f7c:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8001f7e:	78cb      	ldrb	r3, [r1, #3]
 8001f80:	780a      	ldrb	r2, [r1, #0]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d80f      	bhi.n	8001fa6 <USB_ActivateEndpoint+0x2a>
 8001f86:	e8df f003 	tbb	[pc, r3]
 8001f8a:	6402      	.short	0x6402
 8001f8c:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001f8e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f92:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9a:	041b      	lsls	r3, r3, #16
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001fa2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001fa6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001faa:	780c      	ldrb	r4, [r1, #0]
 8001fac:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001fb0:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8001fb4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001fb8:	401a      	ands	r2, r3
 8001fba:	432a      	orrs	r2, r5
 8001fbc:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001fc0:	7a8a      	ldrb	r2, [r1, #10]
 8001fc2:	780d      	ldrb	r5, [r1, #0]
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	f040 8097 	bne.w	80020f8 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8001fca:	784c      	ldrb	r4, [r1, #1]
 8001fcc:	888a      	ldrh	r2, [r1, #4]
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	d04a      	beq.n	8002068 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001fd2:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001fd6:	0852      	lsrs	r2, r2, #1
 8001fd8:	b2a4      	uxth	r4, r4
 8001fda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001fde:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001fe2:	0052      	lsls	r2, r2, #1
 8001fe4:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001fe8:	780c      	ldrb	r4, [r1, #0]
 8001fea:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001fee:	0652      	lsls	r2, r2, #25
 8001ff0:	d508      	bpl.n	8002004 <USB_ActivateEndpoint+0x88>
 8001ff2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002000:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002004:	780a      	ldrb	r2, [r1, #0]
 8002006:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800200a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800200e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	0c1b      	lsrs	r3, r3, #16
 8002016:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800201a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800201e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002022:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002026:	2000      	movs	r0, #0
 8002028:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800202a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800202e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002036:	041b      	lsls	r3, r3, #16
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	e7b2      	b.n	8001fa2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800203c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002040:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002050:	e7a7      	b.n	8001fa2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002052:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002056:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800205a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205e:	041b      	lsls	r3, r3, #16
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002066:	e79c      	b.n	8001fa2 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002068:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800206c:	0852      	lsrs	r2, r2, #1
 800206e:	b29b      	uxth	r3, r3
 8002070:	3304      	adds	r3, #4
 8002072:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002076:	0052      	lsls	r2, r2, #1
 8002078:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 800207c:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002080:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002084:	690d      	ldr	r5, [r1, #16]
 8002086:	b292      	uxth	r2, r2
 8002088:	780b      	ldrb	r3, [r1, #0]
 800208a:	3206      	adds	r2, #6
 800208c:	2d3e      	cmp	r5, #62	; 0x3e
 800208e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002092:	d929      	bls.n	80020e8 <USB_ActivateEndpoint+0x16c>
 8002094:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8002098:	06eb      	lsls	r3, r5, #27
 800209a:	bf04      	itt	eq
 800209c:	f106 33ff 	addeq.w	r3, r6, #4294967295
 80020a0:	b29e      	uxtheq	r6, r3
 80020a2:	4b6e      	ldr	r3, [pc, #440]	; (800225c <USB_ActivateEndpoint+0x2e0>)
 80020a4:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80020ae:	780a      	ldrb	r2, [r1, #0]
 80020b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020b4:	045e      	lsls	r6, r3, #17
 80020b6:	d50b      	bpl.n	80020d0 <USB_ActivateEndpoint+0x154>
 80020b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c0:	051b      	lsls	r3, r3, #20
 80020c2:	0d1b      	lsrs	r3, r3, #20
 80020c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80020d0:	780a      	ldrb	r2, [r1, #0]
 80020d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80020e6:	e798      	b.n	800201a <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80020e8:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80020ec:	07ed      	lsls	r5, r5, #31
 80020ee:	bf44      	itt	mi
 80020f0:	3301      	addmi	r3, #1
 80020f2:	b29b      	uxthmi	r3, r3
 80020f4:	029b      	lsls	r3, r3, #10
 80020f6:	e7d7      	b.n	80020a8 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80020f8:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 80020fc:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002100:	0512      	lsls	r2, r2, #20
 8002102:	0d12      	lsrs	r2, r2, #20
 8002104:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002108:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800210c:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002110:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002114:	780c      	ldrb	r4, [r1, #0]
 8002116:	b292      	uxth	r2, r2
 8002118:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800211c:	88cc      	ldrh	r4, [r1, #6]
 800211e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8002122:	0864      	lsrs	r4, r4, #1
 8002124:	0064      	lsls	r4, r4, #1
 8002126:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 800212a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800212e:	780c      	ldrb	r4, [r1, #0]
 8002130:	b292      	uxth	r2, r2
 8002132:	3204      	adds	r2, #4
 8002134:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002138:	890c      	ldrh	r4, [r1, #8]
 800213a:	0864      	lsrs	r4, r4, #1
 800213c:	0064      	lsls	r4, r4, #1
 800213e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8002142:	784a      	ldrb	r2, [r1, #1]
 8002144:	780c      	ldrb	r4, [r1, #0]
 8002146:	2a00      	cmp	r2, #0
 8002148:	d147      	bne.n	80021da <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800214a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800214e:	0455      	lsls	r5, r2, #17
 8002150:	d508      	bpl.n	8002164 <USB_ActivateEndpoint+0x1e8>
 8002152:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002156:	4013      	ands	r3, r2
 8002158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002164:	780a      	ldrb	r2, [r1, #0]
 8002166:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800216a:	065c      	lsls	r4, r3, #25
 800216c:	d50b      	bpl.n	8002186 <USB_ActivateEndpoint+0x20a>
 800216e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002176:	051b      	lsls	r3, r3, #20
 8002178:	0d1b      	lsrs	r3, r3, #20
 800217a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002182:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002186:	780a      	ldrb	r2, [r1, #0]
 8002188:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800218c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002190:	051b      	lsls	r3, r3, #20
 8002192:	0d1b      	lsrs	r3, r3, #20
 8002194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002198:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800219c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80021a0:	f248 0280 	movw	r2, #32896	; 0x8080
 80021a4:	780c      	ldrb	r4, [r1, #0]
 80021a6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80021aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80021c0:	7809      	ldrb	r1, [r1, #0]
 80021c2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80021c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80021ce:	041b      	lsls	r3, r3, #16
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80021d8:	e725      	b.n	8002026 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80021da:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80021de:	0452      	lsls	r2, r2, #17
 80021e0:	d508      	bpl.n	80021f4 <USB_ActivateEndpoint+0x278>
 80021e2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80021e6:	4013      	ands	r3, r2
 80021e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80021f4:	780a      	ldrb	r2, [r1, #0]
 80021f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021fa:	065b      	lsls	r3, r3, #25
 80021fc:	d50b      	bpl.n	8002216 <USB_ActivateEndpoint+0x29a>
 80021fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002206:	051b      	lsls	r3, r3, #20
 8002208:	0d1b      	lsrs	r3, r3, #20
 800220a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002212:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002216:	780a      	ldrb	r2, [r1, #0]
 8002218:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800221c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002220:	051b      	lsls	r3, r3, #20
 8002222:	0d1b      	lsrs	r3, r3, #20
 8002224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002230:	f248 0280 	movw	r2, #32896	; 0x8080
 8002234:	780c      	ldrb	r4, [r1, #0]
 8002236:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800223a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800223e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002242:	041b      	lsls	r3, r3, #16
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	4313      	orrs	r3, r2
 8002248:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800224c:	7809      	ldrb	r1, [r1, #0]
 800224e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	e7b8      	b.n	80021ce <USB_ActivateEndpoint+0x252>
 800225c:	ffff8000 	.word	0xffff8000

08002260 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002260:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8002262:	7a8c      	ldrb	r4, [r1, #10]
 8002264:	784a      	ldrb	r2, [r1, #1]
 8002266:	780b      	ldrb	r3, [r1, #0]
 8002268:	bbcc      	cbnz	r4, 80022de <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 800226a:	b302      	cbz	r2, 80022ae <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800226c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002270:	0652      	lsls	r2, r2, #25
 8002272:	d50b      	bpl.n	800228c <USB_DeactivateEndpoint+0x2c>
 8002274:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002278:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800227c:	0512      	lsls	r2, r2, #20
 800227e:	0d12      	lsrs	r2, r2, #20
 8002280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002284:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002288:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 800228c:	780a      	ldrb	r2, [r1, #0]
 800228e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80022aa:	2000      	movs	r0, #0
 80022ac:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80022ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80022b2:	0454      	lsls	r4, r2, #17
 80022b4:	d50b      	bpl.n	80022ce <USB_DeactivateEndpoint+0x6e>
 80022b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80022ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022be:	0512      	lsls	r2, r2, #20
 80022c0:	0d12      	lsrs	r2, r2, #20
 80022c2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80022c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022ce:	780a      	ldrb	r2, [r1, #0]
 80022d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022dc:	e7dd      	b.n	800229a <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 80022de:	2a00      	cmp	r2, #0
 80022e0:	d148      	bne.n	8002374 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80022e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80022e6:	0452      	lsls	r2, r2, #17
 80022e8:	d50b      	bpl.n	8002302 <USB_DeactivateEndpoint+0xa2>
 80022ea:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80022ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022f2:	0512      	lsls	r2, r2, #20
 80022f4:	0d12      	lsrs	r2, r2, #20
 80022f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80022fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022fe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002302:	780a      	ldrb	r2, [r1, #0]
 8002304:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002308:	065c      	lsls	r4, r3, #25
 800230a:	d50b      	bpl.n	8002324 <USB_DeactivateEndpoint+0xc4>
 800230c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002314:	051b      	lsls	r3, r3, #20
 8002316:	0d1b      	lsrs	r3, r3, #20
 8002318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002320:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002324:	780a      	ldrb	r2, [r1, #0]
 8002326:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800232a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800232e:	051b      	lsls	r3, r3, #20
 8002330:	0d1b      	lsrs	r3, r3, #20
 8002332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002336:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800233a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800233e:	f248 0280 	movw	r2, #32896	; 0x8080
 8002342:	780c      	ldrb	r4, [r1, #0]
 8002344:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800234c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	4313      	orrs	r3, r2
 8002356:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800235a:	7809      	ldrb	r1, [r1, #0]
 800235c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	0c1b      	lsrs	r3, r3, #16
 800236c:	4313      	orrs	r3, r2
 800236e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002372:	e79a      	b.n	80022aa <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002374:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002378:	0452      	lsls	r2, r2, #17
 800237a:	d50b      	bpl.n	8002394 <USB_DeactivateEndpoint+0x134>
 800237c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002380:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002384:	0512      	lsls	r2, r2, #20
 8002386:	0d12      	lsrs	r2, r2, #20
 8002388:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800238c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002390:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002394:	780a      	ldrb	r2, [r1, #0]
 8002396:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800239a:	065b      	lsls	r3, r3, #25
 800239c:	d50b      	bpl.n	80023b6 <USB_DeactivateEndpoint+0x156>
 800239e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023a6:	051b      	lsls	r3, r3, #20
 80023a8:	0d1b      	lsrs	r3, r3, #20
 80023aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80023b6:	780a      	ldrb	r2, [r1, #0]
 80023b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c0:	051b      	lsls	r3, r3, #20
 80023c2:	0d1b      	lsrs	r3, r3, #20
 80023c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80023d0:	f248 0280 	movw	r2, #32896	; 0x8080
 80023d4:	780c      	ldrb	r4, [r1, #0]
 80023d6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80023da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80023ec:	7809      	ldrb	r1, [r1, #0]
 80023ee:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80023f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fa:	e7b5      	b.n	8002368 <USB_DeactivateEndpoint+0x108>

080023fc <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80023fc:	780a      	ldrb	r2, [r1, #0]
 80023fe:	b98a      	cbnz	r2, 8002424 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002400:	8803      	ldrh	r3, [r0, #0]
 8002402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002412:	f083 0310 	eor.w	r3, r3, #16
 8002416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241e:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002420:	2000      	movs	r0, #0
 8002422:	4770      	bx	lr
    if (ep->is_in)
 8002424:	784b      	ldrb	r3, [r1, #1]
 8002426:	b183      	cbz	r3, 800244a <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002428:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800242c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	0c1b      	lsrs	r3, r3, #16
 8002438:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800243c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002444:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002448:	e7ea      	b.n	8002420 <USB_EPSetStall+0x24>
 800244a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800244e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800245e:	e7ed      	b.n	800243c <USB_EPSetStall+0x40>

08002460 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002460:	784b      	ldrb	r3, [r1, #1]
 8002462:	780a      	ldrb	r2, [r1, #0]
 8002464:	b313      	cbz	r3, 80024ac <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002466:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800246a:	065b      	lsls	r3, r3, #25
 800246c:	d50b      	bpl.n	8002486 <USB_EPClearStall+0x26>
 800246e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002476:	051b      	lsls	r3, r3, #20
 8002478:	0d1b      	lsrs	r3, r3, #20
 800247a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800247e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002482:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002486:	780a      	ldrb	r2, [r1, #0]
 8002488:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800248c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800249c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 80024a8:	2000      	movs	r0, #0
 80024aa:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80024ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024b0:	045b      	lsls	r3, r3, #17
 80024b2:	d50b      	bpl.n	80024cc <USB_EPClearStall+0x6c>
 80024b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024bc:	051b      	lsls	r3, r3, #20
 80024be:	0d1b      	lsrs	r3, r3, #20
 80024c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80024cc:	780a      	ldrb	r2, [r1, #0]
 80024ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80024e2:	e7db      	b.n	800249c <USB_EPClearStall+0x3c>

080024e4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 80024e4:	b911      	cbnz	r1, 80024ec <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 80024ec:	2000      	movs	r0, #0
 80024ee:	4770      	bx	lr

080024f0 <USB_DevConnect>:
 80024f0:	2000      	movs	r0, #0
 80024f2:	4770      	bx	lr

080024f4 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80024f4:	2000      	movs	r0, #0
 80024f6:	4770      	bx	lr

080024f8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 80024f8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80024fc:	b280      	uxth	r0, r0
 80024fe:	4770      	bx	lr

08002500 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002500:	2000      	movs	r0, #0
 8002502:	4770      	bx	lr

08002504 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002504:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002506:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002508:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800250a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800250e:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002510:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002514:	42a3      	cmp	r3, r4
 8002516:	d100      	bne.n	800251a <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002518:	bd10      	pop	{r4, pc}
 800251a:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 800251e:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002522:	3401      	adds	r4, #1
 8002524:	e7f6      	b.n	8002514 <USB_WritePMA+0x10>
	...

08002528 <USB_EPStartXfer>:
{
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 800252c:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 800252e:	7849      	ldrb	r1, [r1, #1]
{
 8002530:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8002532:	2901      	cmp	r1, #1
 8002534:	6933      	ldr	r3, [r6, #16]
 8002536:	7ab0      	ldrb	r0, [r6, #10]
 8002538:	d166      	bne.n	8002608 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 800253a:	429a      	cmp	r2, r3
 800253c:	461c      	mov	r4, r3
      ep->xfer_len =0;
 800253e:	bf9b      	ittet	ls
 8002540:	2300      	movls	r3, #0
 8002542:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8002544:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8002546:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8002548:	bf88      	it	hi
 800254a:	61b2      	strhi	r2, [r6, #24]
 800254c:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 800254e:	bb10      	cbnz	r0, 8002596 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002550:	88b2      	ldrh	r2, [r6, #4]
 8002552:	6971      	ldr	r1, [r6, #20]
 8002554:	4628      	mov	r0, r5
 8002556:	f7ff ffd5 	bl	8002504 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800255a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800255e:	7832      	ldrb	r2, [r6, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	3302      	adds	r3, #2
 8002564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002568:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800256c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002570:	7832      	ldrb	r2, [r6, #0]
 8002572:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800258a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8002592:	2000      	movs	r0, #0
 8002594:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002596:	7832      	ldrb	r2, [r6, #0]
 8002598:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 800259c:	00d2      	lsls	r2, r2, #3
 800259e:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80025a2:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80025a6:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80025a8:	d01a      	beq.n	80025e0 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80025aa:	3102      	adds	r1, #2
 80025ac:	440a      	add	r2, r1
 80025ae:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80025b2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 80025b6:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80025b8:	6971      	ldr	r1, [r6, #20]
 80025ba:	4628      	mov	r0, r5
 80025bc:	f7ff ffa2 	bl	8002504 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80025c0:	7873      	ldrb	r3, [r6, #1]
 80025c2:	7832      	ldrb	r2, [r6, #0]
 80025c4:	b99b      	cbnz	r3, 80025ee <USB_EPStartXfer+0xc6>
 80025c6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80025ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ce:	051b      	lsls	r3, r3, #20
 80025d0:	0d1b      	lsrs	r3, r3, #20
 80025d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025da:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80025de:	e7c7      	b.n	8002570 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80025e0:	440a      	add	r2, r1
 80025e2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80025e6:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 80025ea:	88f2      	ldrh	r2, [r6, #6]
 80025ec:	e7e4      	b.n	80025b8 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d1be      	bne.n	8002570 <USB_EPStartXfer+0x48>
 80025f2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80025f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025fa:	051b      	lsls	r3, r3, #20
 80025fc:	0d1b      	lsrs	r3, r3, #20
 80025fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002606:	e7e8      	b.n	80025da <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8002608:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 800260a:	bf93      	iteet	ls
 800260c:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 800260e:	1ad2      	subhi	r2, r2, r3
 8002610:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8002612:	61b3      	strls	r3, [r6, #24]
 8002614:	bf98      	it	ls
 8002616:	4613      	movls	r3, r2
 8002618:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 800261a:	bb70      	cbnz	r0, 800267a <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800261c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002620:	2b3e      	cmp	r3, #62	; 0x3e
 8002622:	b289      	uxth	r1, r1
 8002624:	f101 0106 	add.w	r1, r1, #6
 8002628:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800262c:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002630:	d918      	bls.n	8002664 <USB_EPStartXfer+0x13c>
 8002632:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002636:	06db      	lsls	r3, r3, #27
 8002638:	bf04      	itt	eq
 800263a:	f102 33ff 	addeq.w	r3, r2, #4294967295
 800263e:	b29a      	uxtheq	r2, r3
 8002640:	4b38      	ldr	r3, [pc, #224]	; (8002724 <USB_EPStartXfer+0x1fc>)
 8002642:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002646:	b29b      	uxth	r3, r3
 8002648:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800264c:	7832      	ldrb	r2, [r6, #0]
 800264e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002662:	e790      	b.n	8002586 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002664:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002668:	07dc      	lsls	r4, r3, #31
 800266a:	bf44      	itt	mi
 800266c:	3201      	addmi	r2, #1
 800266e:	b292      	uxthmi	r2, r2
 8002670:	0292      	lsls	r2, r2, #10
 8002672:	b292      	uxth	r2, r2
 8002674:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002678:	e7e8      	b.n	800264c <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800267a:	b9b9      	cbnz	r1, 80026ac <USB_EPStartXfer+0x184>
 800267c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002680:	2b3e      	cmp	r3, #62	; 0x3e
 8002682:	b289      	uxth	r1, r1
 8002684:	f101 0102 	add.w	r1, r1, #2
 8002688:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800268c:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8002690:	d928      	bls.n	80026e4 <USB_EPStartXfer+0x1bc>
 8002692:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8002696:	06da      	lsls	r2, r3, #27
 8002698:	bf04      	itt	eq
 800269a:	f100 32ff 	addeq.w	r2, r0, #4294967295
 800269e:	b290      	uxtheq	r0, r2
 80026a0:	4a20      	ldr	r2, [pc, #128]	; (8002724 <USB_EPStartXfer+0x1fc>)
 80026a2:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80026a6:	b292      	uxth	r2, r2
 80026a8:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 80026ac:	7872      	ldrb	r2, [r6, #1]
 80026ae:	7831      	ldrb	r1, [r6, #0]
 80026b0:	bb5a      	cbnz	r2, 800270a <USB_EPStartXfer+0x1e2>
 80026b2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80026b6:	2b3e      	cmp	r3, #62	; 0x3e
 80026b8:	b292      	uxth	r2, r2
 80026ba:	f102 0206 	add.w	r2, r2, #6
 80026be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80026c2:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80026c6:	d915      	bls.n	80026f4 <USB_EPStartXfer+0x1cc>
 80026c8:	f3c3 114f 	ubfx	r1, r3, #5, #16
 80026cc:	06dc      	lsls	r4, r3, #27
 80026ce:	bf04      	itt	eq
 80026d0:	f101 33ff 	addeq.w	r3, r1, #4294967295
 80026d4:	b299      	uxtheq	r1, r3
 80026d6:	4b13      	ldr	r3, [pc, #76]	; (8002724 <USB_EPStartXfer+0x1fc>)
 80026d8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 80026e2:	e7b3      	b.n	800264c <USB_EPStartXfer+0x124>
 80026e4:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80026e8:	07d8      	lsls	r0, r3, #31
 80026ea:	bf44      	itt	mi
 80026ec:	3201      	addmi	r2, #1
 80026ee:	b292      	uxthmi	r2, r2
 80026f0:	0292      	lsls	r2, r2, #10
 80026f2:	e7d8      	b.n	80026a6 <USB_EPStartXfer+0x17e>
 80026f4:	f3c3 014f 	ubfx	r1, r3, #1, #16
 80026f8:	07db      	lsls	r3, r3, #31
 80026fa:	bf44      	itt	mi
 80026fc:	3101      	addmi	r1, #1
 80026fe:	b289      	uxthmi	r1, r1
 8002700:	0289      	lsls	r1, r1, #10
 8002702:	b289      	uxth	r1, r1
 8002704:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002708:	e7a0      	b.n	800264c <USB_EPStartXfer+0x124>
 800270a:	2a01      	cmp	r2, #1
 800270c:	d19e      	bne.n	800264c <USB_EPStartXfer+0x124>
 800270e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002712:	b292      	uxth	r2, r2
 8002714:	3202      	adds	r2, #2
 8002716:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800271a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800271e:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002722:	e793      	b.n	800264c <USB_EPStartXfer+0x124>
 8002724:	ffff8000 	.word	0xffff8000

08002728 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002728:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 800272a:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800272c:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800272e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002732:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002734:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002738:	42a3      	cmp	r3, r4
 800273a:	d100      	bne.n	800273e <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800273c:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800273e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002742:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002746:	3401      	adds	r4, #1
 8002748:	e7f6      	b.n	8002738 <USB_ReadPMA+0x10>
	...

0800274c <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 800274c:	2322      	movs	r3, #34	; 0x22
 800274e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 8002750:	4800      	ldr	r0, [pc, #0]	; (8002754 <USBD_HID_GetCfgDesc+0x8>)
 8002752:	4770      	bx	lr
 8002754:	2000008c 	.word	0x2000008c

08002758 <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002758:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 800275c:	2000      	movs	r0, #0
 800275e:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8002760:	4770      	bx	lr
	...

08002764 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8002764:	230a      	movs	r3, #10
 8002766:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8002768:	4800      	ldr	r0, [pc, #0]	; (800276c <USBD_HID_GetDeviceQualifierDesc+0x8>)
 800276a:	4770      	bx	lr
 800276c:	200000bc 	.word	0x200000bc

08002770 <USBD_HID_Setup>:
{
 8002770:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002772:	780c      	ldrb	r4, [r1, #0]
{
 8002774:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002776:	f014 0460 	ands.w	r4, r4, #96	; 0x60
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 800277a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800277e:	d023      	beq.n	80027c8 <USBD_HID_Setup+0x58>
 8002780:	2c20      	cmp	r4, #32
 8002782:	d10c      	bne.n	800279e <USBD_HID_Setup+0x2e>
    switch (req->bRequest)
 8002784:	784a      	ldrb	r2, [r1, #1]
 8002786:	3a02      	subs	r2, #2
 8002788:	2a09      	cmp	r2, #9
 800278a:	d817      	bhi.n	80027bc <USBD_HID_Setup+0x4c>
 800278c:	e8df f002 	tbb	[pc, r2]
 8002790:	16160913 	.word	0x16160913
 8002794:	16161616 	.word	0x16161616
 8002798:	050f      	.short	0x050f
      hhid->Protocol = (uint8_t)(req->wValue);
 800279a:	788a      	ldrb	r2, [r1, #2]
 800279c:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 800279e:	2400      	movs	r4, #0
 80027a0:	e010      	b.n	80027c4 <USBD_HID_Setup+0x54>
      USBD_CtlSendData (pdev, 
 80027a2:	2201      	movs	r2, #1
 80027a4:	4619      	mov	r1, r3
      USBD_CtlSendData (pdev, 
 80027a6:	4628      	mov	r0, r5
 80027a8:	f000 fb62 	bl	8002e70 <USBD_CtlSendData>
 80027ac:	e7f7      	b.n	800279e <USBD_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80027ae:	884a      	ldrh	r2, [r1, #2]
 80027b0:	0a12      	lsrs	r2, r2, #8
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	e7f3      	b.n	800279e <USBD_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 80027b6:	2201      	movs	r2, #1
 80027b8:	1d19      	adds	r1, r3, #4
 80027ba:	e7f4      	b.n	80027a6 <USBD_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 80027bc:	4628      	mov	r0, r5
 80027be:	f000 fb30 	bl	8002e22 <USBD_CtlError>
      return USBD_FAIL; 
 80027c2:	2402      	movs	r4, #2
}
 80027c4:	4620      	mov	r0, r4
 80027c6:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 80027c8:	784a      	ldrb	r2, [r1, #1]
 80027ca:	2a0a      	cmp	r2, #10
 80027cc:	d018      	beq.n	8002800 <USBD_HID_Setup+0x90>
 80027ce:	2a0b      	cmp	r2, #11
 80027d0:	d01c      	beq.n	800280c <USBD_HID_Setup+0x9c>
 80027d2:	2a06      	cmp	r2, #6
 80027d4:	d1f6      	bne.n	80027c4 <USBD_HID_Setup+0x54>
      if( req->wValue >> 8 == HID_REPORT_DESC)
 80027d6:	884b      	ldrh	r3, [r1, #2]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	2b22      	cmp	r3, #34	; 0x22
 80027dc:	d105      	bne.n	80027ea <USBD_HID_Setup+0x7a>
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 80027de:	88ca      	ldrh	r2, [r1, #6]
        pbuf = HID_MOUSE_ReportDesc;
 80027e0:	490c      	ldr	r1, [pc, #48]	; (8002814 <USBD_HID_Setup+0xa4>)
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 80027e2:	2a4a      	cmp	r2, #74	; 0x4a
 80027e4:	bf28      	it	cs
 80027e6:	224a      	movcs	r2, #74	; 0x4a
 80027e8:	e7dd      	b.n	80027a6 <USBD_HID_Setup+0x36>
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80027ea:	2b21      	cmp	r3, #33	; 0x21
 80027ec:	d105      	bne.n	80027fa <USBD_HID_Setup+0x8a>
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 80027ee:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_HID_Desc;   
 80027f0:	4909      	ldr	r1, [pc, #36]	; (8002818 <USBD_HID_Setup+0xa8>)
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 80027f2:	2a09      	cmp	r2, #9
 80027f4:	bf28      	it	cs
 80027f6:	2209      	movcs	r2, #9
 80027f8:	e7d5      	b.n	80027a6 <USBD_HID_Setup+0x36>
  uint8_t  *pbuf = NULL;
 80027fa:	4621      	mov	r1, r4
  uint16_t len = 0;
 80027fc:	4622      	mov	r2, r4
 80027fe:	e7d2      	b.n	80027a6 <USBD_HID_Setup+0x36>
      USBD_CtlSendData (pdev,
 8002800:	2201      	movs	r2, #1
 8002802:	f103 0108 	add.w	r1, r3, #8
 8002806:	f000 fb33 	bl	8002e70 <USBD_CtlSendData>
      break;
 800280a:	e7db      	b.n	80027c4 <USBD_HID_Setup+0x54>
      hhid->AltSetting = (uint8_t)(req->wValue);
 800280c:	788a      	ldrb	r2, [r1, #2]
 800280e:	609a      	str	r2, [r3, #8]
      break;
 8002810:	e7d8      	b.n	80027c4 <USBD_HID_Setup+0x54>
 8002812:	bf00      	nop
 8002814:	20000008 	.word	0x20000008
 8002818:	200000b0 	.word	0x200000b0

0800281c <USBD_HID_DeInit>:
{
 800281c:	b510      	push	{r4, lr}
 800281e:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002820:	2181      	movs	r1, #129	; 0x81
 8002822:	f000 fc1d 	bl	8003060 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002826:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800282a:	b120      	cbz	r0, 8002836 <USBD_HID_DeInit+0x1a>
    USBD_free(pdev->pClassData);
 800282c:	f000 fc80 	bl	8003130 <USBD_static_free>
    pdev->pClassData = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002836:	2000      	movs	r0, #0
 8002838:	bd10      	pop	{r4, pc}

0800283a <USBD_HID_Init>:
{
 800283a:	b510      	push	{r4, lr}
  USBD_LL_OpenEP(pdev,
 800283c:	2304      	movs	r3, #4
 800283e:	2203      	movs	r2, #3
 8002840:	2181      	movs	r1, #129	; 0x81
{
 8002842:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8002844:	f000 fbfc 	bl	8003040 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8002848:	2010      	movs	r0, #16
 800284a:	f000 fc6d 	bl	8003128 <USBD_static_malloc>
 800284e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002852:	b118      	cbz	r0, 800285c <USBD_HID_Init+0x22>
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002854:	2300      	movs	r3, #0
 8002856:	7303      	strb	r3, [r0, #12]
  uint8_t ret = 0;
 8002858:	4618      	mov	r0, r3
 800285a:	bd10      	pop	{r4, pc}
    ret = 1; 
 800285c:	2001      	movs	r0, #1
}
 800285e:	bd10      	pop	{r4, pc}

08002860 <USBD_HID_SendReport>:
{
 8002860:	b510      	push	{r4, lr}
 8002862:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8002864:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002868:	2a03      	cmp	r2, #3
 800286a:	d109      	bne.n	8002880 <USBD_HID_SendReport+0x20>
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 800286c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
    if(hhid->state == HID_IDLE)
 8002870:	7b22      	ldrb	r2, [r4, #12]
 8002872:	b92a      	cbnz	r2, 8002880 <USBD_HID_SendReport+0x20>
      hhid->state = HID_BUSY;
 8002874:	2201      	movs	r2, #1
 8002876:	7322      	strb	r2, [r4, #12]
      USBD_LL_Transmit (pdev, 
 8002878:	460a      	mov	r2, r1
 800287a:	2181      	movs	r1, #129	; 0x81
 800287c:	f000 fc38 	bl	80030f0 <USBD_LL_Transmit>
}
 8002880:	2000      	movs	r0, #0
 8002882:	bd10      	pop	{r4, pc}

08002884 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002884:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002886:	b950      	cbnz	r0, 800289e <USBD_Init+0x1a>
  {
    USBD_ErrLog("Invalid Device handle");
 8002888:	480d      	ldr	r0, [pc, #52]	; (80028c0 <USBD_Init+0x3c>)
 800288a:	f000 fcf7 	bl	800327c <iprintf>
 800288e:	480d      	ldr	r0, [pc, #52]	; (80028c4 <USBD_Init+0x40>)
 8002890:	f000 fcf4 	bl	800327c <iprintf>
 8002894:	200a      	movs	r0, #10
 8002896:	f000 fd09 	bl	80032ac <putchar>
    return USBD_FAIL; 
 800289a:	2002      	movs	r0, #2
 800289c:	bd08      	pop	{r3, pc}
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800289e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80028a2:	b113      	cbz	r3, 80028aa <USBD_Init+0x26>
  {
    pdev->pClass = NULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80028aa:	b109      	cbz	r1, 80028b0 <USBD_Init+0x2c>
  {
    pdev->pDesc = pdesc;
 80028ac:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80028b0:	2301      	movs	r3, #1
  pdev->id = id;
 80028b2:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80028b4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80028b8:	f000 fb7c 	bl	8002fb4 <USBD_LL_Init>
  
  return USBD_OK; 
 80028bc:	2000      	movs	r0, #0
}
 80028be:	bd08      	pop	{r3, pc}
 80028c0:	080041e4 	.word	0x080041e4
 80028c4:	080041ec 	.word	0x080041ec

080028c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80028c8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80028ca:	b119      	cbz	r1, 80028d4 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80028cc:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80028d0:	2000      	movs	r0, #0
 80028d2:	bd08      	pop	{r3, pc}
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <USBD_RegisterClass+0x24>)
 80028d6:	f000 fcd1 	bl	800327c <iprintf>
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <USBD_RegisterClass+0x28>)
 80028dc:	f000 fcce 	bl	800327c <iprintf>
 80028e0:	200a      	movs	r0, #10
 80028e2:	f000 fce3 	bl	80032ac <putchar>
    status = USBD_FAIL; 
 80028e6:	2002      	movs	r0, #2
  }
  
  return status;
}
 80028e8:	bd08      	pop	{r3, pc}
 80028ea:	bf00      	nop
 80028ec:	080041e4 	.word	0x080041e4
 80028f0:	08004202 	.word	0x08004202

080028f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80028f4:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80028f6:	f000 fb95 	bl	8003024 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80028fa:	2000      	movs	r0, #0
 80028fc:	bd08      	pop	{r3, pc}

080028fe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80028fe:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002900:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002904:	b90b      	cbnz	r3, 800290a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002906:	2002      	movs	r0, #2
 8002908:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4798      	blx	r3
 800290e:	2800      	cmp	r0, #0
 8002910:	d1f9      	bne.n	8002906 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002912:	bd08      	pop	{r3, pc}

08002914 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002914:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002916:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4798      	blx	r3
  return USBD_OK;
}
 800291e:	2000      	movs	r0, #0
 8002920:	bd08      	pop	{r3, pc}

08002922 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002922:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002924:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002928:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800292a:	4628      	mov	r0, r5
 800292c:	f000 fa65 	bl	8002dfa <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002930:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002932:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002936:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800293a:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800293e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002942:	f001 031f 	and.w	r3, r1, #31
 8002946:	2b01      	cmp	r3, #1
 8002948:	d00e      	beq.n	8002968 <USBD_LL_SetupStage+0x46>
 800294a:	d307      	bcc.n	800295c <USBD_LL_SetupStage+0x3a>
 800294c:	2b02      	cmp	r3, #2
 800294e:	d010      	beq.n	8002972 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002950:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002954:	4620      	mov	r0, r4
 8002956:	f000 fb91 	bl	800307c <USBD_LL_StallEP>
    break;
 800295a:	e003      	b.n	8002964 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800295c:	4629      	mov	r1, r5
 800295e:	4620      	mov	r0, r4
 8002960:	f000 f8d6 	bl	8002b10 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002964:	2000      	movs	r0, #0
 8002966:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002968:	4629      	mov	r1, r5
 800296a:	4620      	mov	r0, r4
 800296c:	f000 f9ca 	bl	8002d04 <USBD_StdItfReq>
    break;
 8002970:	e7f8      	b.n	8002964 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002972:	4629      	mov	r1, r5
 8002974:	4620      	mov	r0, r4
 8002976:	f000 f9dd 	bl	8002d34 <USBD_StdEPReq>
    break;
 800297a:	e7f3      	b.n	8002964 <USBD_LL_SetupStage+0x42>

0800297c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800297c:	b538      	push	{r3, r4, r5, lr}
 800297e:	4604      	mov	r4, r0
 8002980:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002982:	bb11      	cbnz	r1, 80029ca <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002984:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002988:	2b03      	cmp	r3, #3
 800298a:	d10f      	bne.n	80029ac <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800298c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002990:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002994:	4293      	cmp	r3, r2
 8002996:	d90b      	bls.n	80029b0 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002998:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800299a:	429a      	cmp	r2, r3
 800299c:	bf28      	it	cs
 800299e:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80029a0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80029a4:	b292      	uxth	r2, r2
 80029a6:	4629      	mov	r1, r5
 80029a8:	f000 fa77 	bl	8002e9a <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80029ac:	2000      	movs	r0, #0
 80029ae:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80029b0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	b123      	cbz	r3, 80029c2 <USBD_LL_DataOutStage+0x46>
 80029b8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80029bc:	2a03      	cmp	r2, #3
 80029be:	d100      	bne.n	80029c2 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80029c0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80029c2:	4620      	mov	r0, r4
 80029c4:	f000 fa71 	bl	8002eaa <USBD_CtlSendStatus>
 80029c8:	e7f0      	b.n	80029ac <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80029ca:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0eb      	beq.n	80029ac <USBD_LL_DataOutStage+0x30>
 80029d4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80029d8:	2a03      	cmp	r2, #3
 80029da:	d1e7      	bne.n	80029ac <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80029dc:	4798      	blx	r3
 80029de:	e7e5      	b.n	80029ac <USBD_LL_DataOutStage+0x30>

080029e0 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	4613      	mov	r3, r2
 80029e4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80029e6:	460e      	mov	r6, r1
 80029e8:	2900      	cmp	r1, #0
 80029ea:	d13d      	bne.n	8002a68 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80029ec:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80029f0:	2a02      	cmp	r2, #2
 80029f2:	d10f      	bne.n	8002a14 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80029f4:	69c5      	ldr	r5, [r0, #28]
 80029f6:	6a02      	ldr	r2, [r0, #32]
 80029f8:	4295      	cmp	r5, r2
 80029fa:	d914      	bls.n	8002a26 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80029fc:	1aaa      	subs	r2, r5, r2
 80029fe:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002a00:	4619      	mov	r1, r3
 8002a02:	b292      	uxth	r2, r2
 8002a04:	f000 fa41 	bl	8002e8a <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002a08:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f000 fb7c 	bl	800310c <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002a14:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d102      	bne.n	8002a22 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002a22:	2000      	movs	r0, #0
 8002a24:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002a26:	6983      	ldr	r3, [r0, #24]
 8002a28:	fbb3 f5f2 	udiv	r5, r3, r2
 8002a2c:	fb02 3515 	mls	r5, r2, r5, r3
 8002a30:	b965      	cbnz	r5, 8002a4c <USBD_LL_DataInStage+0x6c>
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d80a      	bhi.n	8002a4c <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002a36:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d206      	bcs.n	8002a4c <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002a3e:	462a      	mov	r2, r5
 8002a40:	f000 fa23 	bl	8002e8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002a44:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002a48:	462b      	mov	r3, r5
 8002a4a:	e7de      	b.n	8002a0a <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002a4c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	b12b      	cbz	r3, 8002a60 <USBD_LL_DataInStage+0x80>
 8002a54:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002a58:	2a03      	cmp	r2, #3
 8002a5a:	d101      	bne.n	8002a60 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002a60:	4620      	mov	r0, r4
 8002a62:	f000 fa2d 	bl	8002ec0 <USBD_CtlReceiveStatus>
 8002a66:	e7d5      	b.n	8002a14 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002a68:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0d7      	beq.n	8002a22 <USBD_LL_DataInStage+0x42>
 8002a72:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002a76:	2a03      	cmp	r2, #3
 8002a78:	d1d3      	bne.n	8002a22 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002a7a:	4798      	blx	r3
 8002a7c:	e7d1      	b.n	8002a22 <USBD_LL_DataInStage+0x42>

08002a7e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002a7e:	2200      	movs	r2, #0
{
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002a84:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002a86:	4611      	mov	r1, r2
 8002a88:	2340      	movs	r3, #64	; 0x40
 8002a8a:	f000 fad9 	bl	8003040 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002a8e:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002a90:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002a94:	2200      	movs	r2, #0
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f000 fad1 	bl	8003040 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002aa4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002aa8:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002aaa:	b12b      	cbz	r3, 8002ab8 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002aac:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002ab0:	7921      	ldrb	r1, [r4, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002ab8:	2000      	movs	r0, #0
 8002aba:	bd38      	pop	{r3, r4, r5, pc}

08002abc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002abc:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002abe:	2000      	movs	r0, #0
 8002ac0:	4770      	bx	lr

08002ac2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002ac2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002ac6:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002aca:	2304      	movs	r3, #4
 8002acc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	4770      	bx	lr

08002ad4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002ad4:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002ad8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002adc:	2000      	movs	r0, #0
 8002ade:	4770      	bx	lr

08002ae0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002ae0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ae2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002ae6:	2a03      	cmp	r2, #3
 8002ae8:	d104      	bne.n	8002af4 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002aea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	b103      	cbz	r3, 8002af4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002af2:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002af4:	2000      	movs	r0, #0
 8002af6:	bd08      	pop	{r3, pc}

08002af8 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002af8:	b510      	push	{r4, lr}
 8002afa:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002afc:	2180      	movs	r1, #128	; 0x80
 8002afe:	f000 fabd 	bl	800307c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002b02:	4620      	mov	r0, r4
}
 8002b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002b08:	2100      	movs	r1, #0
 8002b0a:	f000 bab7 	b.w	800307c <USBD_LL_StallEP>
	...

08002b10 <USBD_StdDevReq>:
{
 8002b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002b12:	784b      	ldrb	r3, [r1, #1]
{
 8002b14:	4604      	mov	r4, r0
 8002b16:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	d879      	bhi.n	8002c10 <USBD_StdDevReq+0x100>
 8002b1c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b20:	00e500c9 	.word	0x00e500c9
 8002b24:	00d90078 	.word	0x00d90078
 8002b28:	006d0078 	.word	0x006d0078
 8002b2c:	0078000a 	.word	0x0078000a
 8002b30:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002b34:	884b      	ldrh	r3, [r1, #2]
 8002b36:	0a1a      	lsrs	r2, r3, #8
 8002b38:	3a01      	subs	r2, #1
 8002b3a:	2a06      	cmp	r2, #6
 8002b3c:	d868      	bhi.n	8002c10 <USBD_StdDevReq+0x100>
 8002b3e:	e8df f002 	tbb	[pc, r2]
 8002b42:	1c04      	.short	0x1c04
 8002b44:	49676729 	.word	0x49676729
 8002b48:	52          	.byte	0x52
 8002b49:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002b4a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b4e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002b50:	f10d 0106 	add.w	r1, sp, #6
 8002b54:	7c20      	ldrb	r0, [r4, #16]
 8002b56:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002b58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	d067      	beq.n	8002c30 <USBD_StdDevReq+0x120>
 8002b60:	88eb      	ldrh	r3, [r5, #6]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d064      	beq.n	8002c30 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002b66:	429a      	cmp	r2, r3
 8002b68:	bf28      	it	cs
 8002b6a:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002b6c:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002b6e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002b72:	4620      	mov	r0, r4
 8002b74:	f000 f97c 	bl	8002e70 <USBD_CtlSendData>
 8002b78:	e05a      	b.n	8002c30 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002b7a:	7c02      	ldrb	r2, [r0, #16]
 8002b7c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b80:	b932      	cbnz	r2, 8002b90 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002b84:	f10d 0006 	add.w	r0, sp, #6
 8002b88:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002b8a:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002b8c:	7043      	strb	r3, [r0, #1]
 8002b8e:	e7e3      	b.n	8002b58 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	e7f7      	b.n	8002b84 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d83a      	bhi.n	8002c10 <USBD_StdDevReq+0x100>
 8002b9a:	e8df f003 	tbb	[pc, r3]
 8002b9e:	0703      	.short	0x0703
 8002ba0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002ba4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	e7d1      	b.n	8002b50 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002bac:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	e7cd      	b.n	8002b50 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002bb4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	e7c9      	b.n	8002b50 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002bbc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	e7c5      	b.n	8002b50 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002bc4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	e7c1      	b.n	8002b50 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002bcc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	e7bd      	b.n	8002b50 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002bd4:	7c03      	ldrb	r3, [r0, #16]
 8002bd6:	b9db      	cbnz	r3, 8002c10 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002bd8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002bdc:	f10d 0006 	add.w	r0, sp, #6
 8002be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be2:	4798      	blx	r3
 8002be4:	e7b8      	b.n	8002b58 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002be6:	7c03      	ldrb	r3, [r0, #16]
 8002be8:	b993      	cbnz	r3, 8002c10 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002bea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002bee:	f10d 0006 	add.w	r0, sp, #6
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	e7c8      	b.n	8002b8c <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002bfa:	888b      	ldrh	r3, [r1, #4]
 8002bfc:	b943      	cbnz	r3, 8002c10 <USBD_StdDevReq+0x100>
 8002bfe:	88cb      	ldrh	r3, [r1, #6]
 8002c00:	b933      	cbnz	r3, 8002c10 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002c02:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002c06:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002c08:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002c0a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002c0e:	d103      	bne.n	8002c18 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002c10:	4620      	mov	r0, r4
 8002c12:	f7ff ff71 	bl	8002af8 <USBD_CtlError.constprop.0>
    break;
 8002c16:	e00b      	b.n	8002c30 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002c18:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f000 fa59 	bl	80030d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002c22:	4620      	mov	r0, r4
 8002c24:	f000 f941 	bl	8002eaa <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002c28:	b12d      	cbz	r5, 8002c36 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002c2a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002c2c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002c30:	2000      	movs	r0, #0
 8002c32:	b003      	add	sp, #12
 8002c34:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002c36:	2301      	movs	r3, #1
 8002c38:	e7f8      	b.n	8002c2c <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002c3a:	7889      	ldrb	r1, [r1, #2]
 8002c3c:	4d30      	ldr	r5, [pc, #192]	; (8002d00 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002c3e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002c40:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002c42:	d8e5      	bhi.n	8002c10 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002c44:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d00c      	beq.n	8002c66 <USBD_StdDevReq+0x156>
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d1df      	bne.n	8002c10 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002c50:	b9b1      	cbnz	r1, 8002c80 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002c52:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8002c54:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002c56:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8002c5a:	f7ff fe5b 	bl	8002914 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f000 f923 	bl	8002eaa <USBD_CtlSendStatus>
 8002c64:	e7e4      	b.n	8002c30 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002c66:	2900      	cmp	r1, #0
 8002c68:	d0f9      	beq.n	8002c5e <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002c6a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002c6c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002c6e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002c70:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7ff fe42 	bl	80028fe <USBD_SetClassConfig>
 8002c7a:	2802      	cmp	r0, #2
 8002c7c:	d1ef      	bne.n	8002c5e <USBD_StdDevReq+0x14e>
 8002c7e:	e7c7      	b.n	8002c10 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002c80:	6841      	ldr	r1, [r0, #4]
 8002c82:	2901      	cmp	r1, #1
 8002c84:	d0eb      	beq.n	8002c5e <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002c86:	b2c9      	uxtb	r1, r1
 8002c88:	f7ff fe44 	bl	8002914 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002c8c:	7829      	ldrb	r1, [r5, #0]
 8002c8e:	6061      	str	r1, [r4, #4]
 8002c90:	e7f0      	b.n	8002c74 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002c92:	88ca      	ldrh	r2, [r1, #6]
 8002c94:	2a01      	cmp	r2, #1
 8002c96:	d1bb      	bne.n	8002c10 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002c98:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d003      	beq.n	8002ca8 <USBD_StdDevReq+0x198>
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d1b5      	bne.n	8002c10 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002ca4:	1d01      	adds	r1, r0, #4
 8002ca6:	e764      	b.n	8002b72 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002ca8:	4601      	mov	r1, r0
 8002caa:	2300      	movs	r3, #0
 8002cac:	f841 3f08 	str.w	r3, [r1, #8]!
 8002cb0:	e75f      	b.n	8002b72 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002cb2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002cb6:	3b02      	subs	r3, #2
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d8a9      	bhi.n	8002c10 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002cc0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002cc4:	b10b      	cbz	r3, 8002cca <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f104 010c 	add.w	r1, r4, #12
 8002cd0:	e74f      	b.n	8002b72 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002cd2:	884b      	ldrh	r3, [r1, #2]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d1ab      	bne.n	8002c30 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002cd8:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002cdc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	4798      	blx	r3
 8002ce8:	e7b9      	b.n	8002c5e <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002cea:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002cee:	3b02      	subs	r3, #2
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d88d      	bhi.n	8002c10 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002cf4:	884b      	ldrh	r3, [r1, #2]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d19a      	bne.n	8002c30 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e7ec      	b.n	8002cd8 <USBD_StdDevReq+0x1c8>
 8002cfe:	bf00      	nop
 8002d00:	2000017c 	.word	0x2000017c

08002d04 <USBD_StdItfReq>:
{
 8002d04:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002d06:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002d0a:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002d0c:	2b03      	cmp	r3, #3
{
 8002d0e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002d10:	d10d      	bne.n	8002d2e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002d12:	790b      	ldrb	r3, [r1, #4]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d80a      	bhi.n	8002d2e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002d18:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002d20:	88eb      	ldrh	r3, [r5, #6]
 8002d22:	b913      	cbnz	r3, 8002d2a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002d24:	4620      	mov	r0, r4
 8002d26:	f000 f8c0 	bl	8002eaa <USBD_CtlSendStatus>
}
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002d2e:	f7ff fee3 	bl	8002af8 <USBD_CtlError.constprop.0>
    break;
 8002d32:	e7fa      	b.n	8002d2a <USBD_StdItfReq+0x26>

08002d34 <USBD_StdEPReq>:
{
 8002d34:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002d36:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002d38:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002d3a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002d3e:	2a20      	cmp	r2, #32
{
 8002d40:	4604      	mov	r4, r0
 8002d42:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002d44:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002d46:	d105      	bne.n	8002d54 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002d48:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4798      	blx	r3
}
 8002d50:	2000      	movs	r0, #0
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002d54:	784a      	ldrb	r2, [r1, #1]
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	d01c      	beq.n	8002d94 <USBD_StdEPReq+0x60>
 8002d5a:	d32a      	bcc.n	8002db2 <USBD_StdEPReq+0x7e>
 8002d5c:	2a03      	cmp	r2, #3
 8002d5e:	d1f7      	bne.n	8002d50 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002d60:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d64:	2a02      	cmp	r2, #2
 8002d66:	d040      	beq.n	8002dea <USBD_StdEPReq+0xb6>
 8002d68:	2a03      	cmp	r2, #3
 8002d6a:	d002      	beq.n	8002d72 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002d6c:	f7ff fec4 	bl	8002af8 <USBD_CtlError.constprop.0>
      break;
 8002d70:	e7ee      	b.n	8002d50 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002d72:	884a      	ldrh	r2, [r1, #2]
 8002d74:	b922      	cbnz	r2, 8002d80 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002d76:	065e      	lsls	r6, r3, #25
 8002d78:	d002      	beq.n	8002d80 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f000 f97e 	bl	800307c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002d80:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002d84:	4629      	mov	r1, r5
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f000 f88c 	bl	8002eaa <USBD_CtlSendStatus>
 8002d92:	e7dd      	b.n	8002d50 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002d94:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d98:	2a02      	cmp	r2, #2
 8002d9a:	d026      	beq.n	8002dea <USBD_StdEPReq+0xb6>
 8002d9c:	2a03      	cmp	r2, #3
 8002d9e:	d1e5      	bne.n	8002d6c <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002da0:	884a      	ldrh	r2, [r1, #2]
 8002da2:	2a00      	cmp	r2, #0
 8002da4:	d1d4      	bne.n	8002d50 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002da6:	0659      	lsls	r1, r3, #25
 8002da8:	d0f0      	beq.n	8002d8c <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002daa:	4619      	mov	r1, r3
 8002dac:	f000 f974 	bl	8003098 <USBD_LL_ClearStallEP>
 8002db0:	e7e6      	b.n	8002d80 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002db2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002db6:	2a02      	cmp	r2, #2
 8002db8:	d017      	beq.n	8002dea <USBD_StdEPReq+0xb6>
 8002dba:	2a03      	cmp	r2, #3
 8002dbc:	d1d6      	bne.n	8002d6c <USBD_StdEPReq+0x38>
 8002dbe:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002dc2:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002dc6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002dca:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002dcc:	bf14      	ite	ne
 8002dce:	3514      	addne	r5, #20
 8002dd0:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002dd4:	f000 f96e 	bl	80030b4 <USBD_LL_IsStallEP>
 8002dd8:	b168      	cbz	r0, 8002df6 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002dda:	2301      	movs	r3, #1
 8002ddc:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002dde:	2202      	movs	r2, #2
 8002de0:	4629      	mov	r1, r5
 8002de2:	4620      	mov	r0, r4
 8002de4:	f000 f844 	bl	8002e70 <USBD_CtlSendData>
      break;
 8002de8:	e7b2      	b.n	8002d50 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002dea:	065a      	lsls	r2, r3, #25
 8002dec:	d0b0      	beq.n	8002d50 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002dee:	4619      	mov	r1, r3
 8002df0:	f000 f944 	bl	800307c <USBD_LL_StallEP>
 8002df4:	e7ac      	b.n	8002d50 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002df6:	6028      	str	r0, [r5, #0]
 8002df8:	e7f1      	b.n	8002dde <USBD_StdEPReq+0xaa>

08002dfa <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002dfa:	780b      	ldrb	r3, [r1, #0]
 8002dfc:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002dfe:	784b      	ldrb	r3, [r1, #1]
 8002e00:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002e02:	78ca      	ldrb	r2, [r1, #3]
 8002e04:	788b      	ldrb	r3, [r1, #2]
 8002e06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e0a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002e0c:	794a      	ldrb	r2, [r1, #5]
 8002e0e:	790b      	ldrb	r3, [r1, #4]
 8002e10:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e14:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002e16:	79ca      	ldrb	r2, [r1, #7]
 8002e18:	798b      	ldrb	r3, [r1, #6]
 8002e1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e1e:	80c3      	strh	r3, [r0, #6]
 8002e20:	4770      	bx	lr

08002e22 <USBD_CtlError>:
{
 8002e22:	b510      	push	{r4, lr}
 8002e24:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002e26:	2180      	movs	r1, #128	; 0x80
 8002e28:	f000 f928 	bl	800307c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002e2c:	4620      	mov	r0, r4
}
 8002e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002e32:	2100      	movs	r1, #0
 8002e34:	f000 b922 	b.w	800307c <USBD_LL_StallEP>

08002e38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002e38:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002e3a:	b188      	cbz	r0, 8002e60 <USBD_GetString+0x28>
 8002e3c:	4605      	mov	r5, r0
 8002e3e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002e40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2c00      	cmp	r4, #0
 8002e48:	d1f9      	bne.n	8002e3e <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002e50:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002e52:	2303      	movs	r3, #3
 8002e54:	704b      	strb	r3, [r1, #1]
 8002e56:	2302      	movs	r3, #2
 8002e58:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8002e5a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002e5e:	b905      	cbnz	r5, 8002e62 <USBD_GetString+0x2a>
 8002e60:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	54cd      	strb	r5, [r1, r3]
 8002e66:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002e68:	3302      	adds	r3, #2
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	548c      	strb	r4, [r1, r2]
 8002e6e:	e7f4      	b.n	8002e5a <USBD_GetString+0x22>

08002e70 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002e70:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002e72:	2202      	movs	r2, #2
{
 8002e74:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002e76:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002e7a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002e7c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002e7e:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002e80:	2100      	movs	r1, #0
 8002e82:	f000 f935 	bl	80030f0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e86:	2000      	movs	r0, #0
 8002e88:	bd10      	pop	{r4, pc}

08002e8a <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002e8a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	460a      	mov	r2, r1
 8002e90:	2100      	movs	r1, #0
 8002e92:	f000 f92d 	bl	80030f0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e96:	2000      	movs	r0, #0
 8002e98:	bd08      	pop	{r3, pc}

08002e9a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002e9a:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	f000 f933 	bl	800310c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	bd08      	pop	{r3, pc}

08002eaa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002eaa:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002eac:	2304      	movs	r3, #4
 8002eae:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f000 f91a 	bl	80030f0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	bd08      	pop	{r3, pc}

08002ec0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002ec0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002ec2:	2305      	movs	r3, #5
 8002ec4:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002ec8:	2300      	movs	r3, #0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f000 f91d 	bl	800310c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	bd08      	pop	{r3, pc}
	...

08002ed8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002ed8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002eda:	4c07      	ldr	r4, [pc, #28]	; (8002ef8 <MX_USB_DEVICE_Init+0x20>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	4907      	ldr	r1, [pc, #28]	; (8002efc <MX_USB_DEVICE_Init+0x24>)
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f7ff fccf 	bl	8002884 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	4905      	ldr	r1, [pc, #20]	; (8002f00 <MX_USB_DEVICE_Init+0x28>)
 8002eea:	f7ff fced 	bl	80028c8 <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 8002eee:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8002ef4:	f7ff bcfe 	b.w	80028f4 <USBD_Start>
 8002ef8:	20000240 	.word	0x20000240
 8002efc:	200000c8 	.word	0x200000c8
 8002f00:	20000054 	.word	0x20000054

08002f04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002f04:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <HAL_PCD_MspInit+0x38>)
 8002f08:	6802      	ldr	r2, [r0, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d112      	bne.n	8002f34 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002f0e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002f12:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f14:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002f16:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f1a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f1c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002f1e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f20:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f2a:	f7fd fb75 	bl	8000618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002f2e:	2014      	movs	r0, #20
 8002f30:	f7fd fba6 	bl	8000680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002f34:	b003      	add	sp, #12
 8002f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f3a:	bf00      	nop
 8002f3c:	40005c00 	.word	0x40005c00

08002f40 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002f40:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002f44:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f48:	f7ff bceb 	b.w	8002922 <USBD_LL_SetupStage>

08002f4c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002f4c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002f50:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002f54:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f58:	f7ff bd10 	b.w	800297c <USBD_LL_DataOutStage>

08002f5c <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002f5c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f62:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f66:	f7ff bd3b 	b.w	80029e0 <USBD_LL_DataInStage>

08002f6a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002f6a:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f6e:	f7ff bdb7 	b.w	8002ae0 <USBD_LL_SOF>

08002f72 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002f72:	b510      	push	{r4, lr}
 8002f74:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002f76:	2101      	movs	r1, #1
 8002f78:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f7c:	f7ff fd9e 	bl	8002abc <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002f80:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002f88:	f7ff bd79 	b.w	8002a7e <USBD_LL_Reset>

08002f8c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002f90:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002f94:	f7ff fd95 	bl	8002ac2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002f98:	69a3      	ldr	r3, [r4, #24]
 8002f9a:	b123      	cbz	r3, 8002fa6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002f9c:	4a02      	ldr	r2, [pc, #8]	; (8002fa8 <HAL_PCD_SuspendCallback+0x1c>)
 8002f9e:	6913      	ldr	r3, [r2, #16]
 8002fa0:	f043 0306 	orr.w	r3, r3, #6
 8002fa4:	6113      	str	r3, [r2, #16]
 8002fa6:	bd10      	pop	{r4, pc}
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002fac:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002fb0:	f7ff bd90 	b.w	8002ad4 <USBD_LL_Resume>

08002fb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002fb4:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	2208      	movs	r2, #8
 8002fba:	f04f 0e03 	mov.w	lr, #3
{
 8002fbe:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002fc0:	4915      	ldr	r1, [pc, #84]	; (8003018 <USBD_LL_Init+0x64>)
  hpcd_USB_FS.pData = pdev;
 8002fc2:	4816      	ldr	r0, [pc, #88]	; (800301c <USBD_LL_Init+0x68>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002fc4:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002fc8:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002fca:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002fce:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002fd2:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002fd4:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002fd6:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002fd8:	f7fd fc7b 	bl	80008d2 <HAL_PCD_Init>
 8002fdc:	b120      	cbz	r0, 8002fe8 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002fde:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002fe2:	480f      	ldr	r0, [pc, #60]	; (8003020 <USBD_LL_Init+0x6c>)
 8002fe4:	f7fd f9a8 	bl	8000338 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2318      	movs	r3, #24
 8002fec:	4611      	mov	r1, r2
 8002fee:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002ff2:	f7fe f839 	bl	8001068 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002ff6:	2358      	movs	r3, #88	; 0x58
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003000:	f7fe f832 	bl	8001068 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8003004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003008:	2200      	movs	r2, #0
 800300a:	2181      	movs	r1, #129	; 0x81
 800300c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003010:	f7fe f82a 	bl	8001068 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8003014:	2000      	movs	r0, #0
 8003016:	bd10      	pop	{r4, pc}
 8003018:	40005c00 	.word	0x40005c00
 800301c:	20000464 	.word	0x20000464
 8003020:	0800421b 	.word	0x0800421b

08003024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003024:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003026:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800302a:	f7fd fcbb 	bl	80009a4 <HAL_PCD_Start>
 800302e:	2803      	cmp	r0, #3
 8003030:	bf9a      	itte	ls
 8003032:	4b02      	ldrls	r3, [pc, #8]	; (800303c <USBD_LL_Start+0x18>)
 8003034:	5c18      	ldrbls	r0, [r3, r0]
 8003036:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003038:	bd08      	pop	{r3, pc}
 800303a:	bf00      	nop
 800303c:	08004217 	.word	0x08004217

08003040 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003040:	b510      	push	{r4, lr}
 8003042:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003044:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003048:	4613      	mov	r3, r2
 800304a:	4622      	mov	r2, r4
 800304c:	f7fd fcd5 	bl	80009fa <HAL_PCD_EP_Open>
 8003050:	2803      	cmp	r0, #3
 8003052:	bf9a      	itte	ls
 8003054:	4b01      	ldrls	r3, [pc, #4]	; (800305c <USBD_LL_OpenEP+0x1c>)
 8003056:	5c18      	ldrbls	r0, [r3, r0]
 8003058:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800305a:	bd10      	pop	{r4, pc}
 800305c:	08004217 	.word	0x08004217

08003060 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003060:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003062:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003066:	f7fd fceb 	bl	8000a40 <HAL_PCD_EP_Close>
 800306a:	2803      	cmp	r0, #3
 800306c:	bf9a      	itte	ls
 800306e:	4b02      	ldrls	r3, [pc, #8]	; (8003078 <USBD_LL_CloseEP+0x18>)
 8003070:	5c18      	ldrbls	r0, [r3, r0]
 8003072:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003074:	bd08      	pop	{r3, pc}
 8003076:	bf00      	nop
 8003078:	08004217 	.word	0x08004217

0800307c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800307c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800307e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003082:	f7fd ffa5 	bl	8000fd0 <HAL_PCD_EP_SetStall>
 8003086:	2803      	cmp	r0, #3
 8003088:	bf9a      	itte	ls
 800308a:	4b02      	ldrls	r3, [pc, #8]	; (8003094 <USBD_LL_StallEP+0x18>)
 800308c:	5c18      	ldrbls	r0, [r3, r0]
 800308e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003090:	bd08      	pop	{r3, pc}
 8003092:	bf00      	nop
 8003094:	08004217 	.word	0x08004217

08003098 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003098:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800309a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800309e:	f7fd ffc0 	bl	8001022 <HAL_PCD_EP_ClrStall>
 80030a2:	2803      	cmp	r0, #3
 80030a4:	bf9a      	itte	ls
 80030a6:	4b02      	ldrls	r3, [pc, #8]	; (80030b0 <USBD_LL_ClearStallEP+0x18>)
 80030a8:	5c18      	ldrbls	r0, [r3, r0]
 80030aa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80030ac:	bd08      	pop	{r3, pc}
 80030ae:	bf00      	nop
 80030b0:	08004217 	.word	0x08004217

080030b4 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80030b4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80030b6:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80030ba:	bf45      	ittet	mi
 80030bc:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 80030c0:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80030c4:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80030c8:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80030cc:	bf58      	it	pl
 80030ce:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 80030d2:	4770      	bx	lr

080030d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80030d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80030d6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80030da:	f7fd fc7a 	bl	80009d2 <HAL_PCD_SetAddress>
 80030de:	2803      	cmp	r0, #3
 80030e0:	bf9a      	itte	ls
 80030e2:	4b02      	ldrls	r3, [pc, #8]	; (80030ec <USBD_LL_SetUSBAddress+0x18>)
 80030e4:	5c18      	ldrbls	r0, [r3, r0]
 80030e6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80030e8:	bd08      	pop	{r3, pc}
 80030ea:	bf00      	nop
 80030ec:	08004217 	.word	0x08004217

080030f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80030f0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80030f2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80030f6:	f7fd fcdc 	bl	8000ab2 <HAL_PCD_EP_Transmit>
 80030fa:	2803      	cmp	r0, #3
 80030fc:	bf9a      	itte	ls
 80030fe:	4b02      	ldrls	r3, [pc, #8]	; (8003108 <USBD_LL_Transmit+0x18>)
 8003100:	5c18      	ldrbls	r0, [r3, r0]
 8003102:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003104:	bd08      	pop	{r3, pc}
 8003106:	bf00      	nop
 8003108:	08004217 	.word	0x08004217

0800310c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800310c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800310e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003112:	f7fd fcb6 	bl	8000a82 <HAL_PCD_EP_Receive>
 8003116:	2803      	cmp	r0, #3
 8003118:	bf9a      	itte	ls
 800311a:	4b02      	ldrls	r3, [pc, #8]	; (8003124 <USBD_LL_PrepareReceive+0x18>)
 800311c:	5c18      	ldrbls	r0, [r3, r0]
 800311e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003120:	bd08      	pop	{r3, pc}
 8003122:	bf00      	nop
 8003124:	08004217 	.word	0x08004217

08003128 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003128:	4800      	ldr	r0, [pc, #0]	; (800312c <USBD_static_malloc+0x4>)
 800312a:	4770      	bx	lr
 800312c:	20000180 	.word	0x20000180

08003130 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003130:	4770      	bx	lr

08003132 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003132:	4770      	bx	lr

08003134 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003134:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003136:	4801      	ldr	r0, [pc, #4]	; (800313c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003138:	800b      	strh	r3, [r1, #0]
}
 800313a:	4770      	bx	lr
 800313c:	200000e4 	.word	0x200000e4

08003140 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003140:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003142:	4801      	ldr	r0, [pc, #4]	; (8003148 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003144:	800b      	strh	r3, [r1, #0]
}
 8003146:	4770      	bx	lr
 8003148:	200000f8 	.word	0x200000f8

0800314c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800314c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800314e:	4c04      	ldr	r4, [pc, #16]	; (8003160 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003150:	460a      	mov	r2, r1
 8003152:	4804      	ldr	r0, [pc, #16]	; (8003164 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003154:	4621      	mov	r1, r4
 8003156:	f7ff fe6f 	bl	8002e38 <USBD_GetString>
  return USBD_StrDesc;
}
 800315a:	4620      	mov	r0, r4
 800315c:	bd10      	pop	{r4, pc}
 800315e:	bf00      	nop
 8003160:	200008c4 	.word	0x200008c4
 8003164:	0800424e 	.word	0x0800424e

08003168 <USBD_FS_ProductStrDescriptor>:
{
 8003168:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800316a:	4c04      	ldr	r4, [pc, #16]	; (800317c <USBD_FS_ProductStrDescriptor+0x14>)
 800316c:	460a      	mov	r2, r1
 800316e:	4804      	ldr	r0, [pc, #16]	; (8003180 <USBD_FS_ProductStrDescriptor+0x18>)
 8003170:	4621      	mov	r1, r4
 8003172:	f7ff fe61 	bl	8002e38 <USBD_GetString>
}
 8003176:	4620      	mov	r0, r4
 8003178:	bd10      	pop	{r4, pc}
 800317a:	bf00      	nop
 800317c:	200008c4 	.word	0x200008c4
 8003180:	08004261 	.word	0x08004261

08003184 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003184:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003186:	4c04      	ldr	r4, [pc, #16]	; (8003198 <USBD_FS_SerialStrDescriptor+0x14>)
 8003188:	460a      	mov	r2, r1
 800318a:	4804      	ldr	r0, [pc, #16]	; (800319c <USBD_FS_SerialStrDescriptor+0x18>)
 800318c:	4621      	mov	r1, r4
 800318e:	f7ff fe53 	bl	8002e38 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003192:	4620      	mov	r0, r4
 8003194:	bd10      	pop	{r4, pc}
 8003196:	bf00      	nop
 8003198:	200008c4 	.word	0x200008c4
 800319c:	08004277 	.word	0x08004277

080031a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80031a0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80031a2:	4c04      	ldr	r4, [pc, #16]	; (80031b4 <USBD_FS_ConfigStrDescriptor+0x14>)
 80031a4:	460a      	mov	r2, r1
 80031a6:	4804      	ldr	r0, [pc, #16]	; (80031b8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80031a8:	4621      	mov	r1, r4
 80031aa:	f7ff fe45 	bl	8002e38 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80031ae:	4620      	mov	r0, r4
 80031b0:	bd10      	pop	{r4, pc}
 80031b2:	bf00      	nop
 80031b4:	200008c4 	.word	0x200008c4
 80031b8:	08004235 	.word	0x08004235

080031bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80031bc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80031be:	4c04      	ldr	r4, [pc, #16]	; (80031d0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80031c0:	460a      	mov	r2, r1
 80031c2:	4804      	ldr	r0, [pc, #16]	; (80031d4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80031c4:	4621      	mov	r1, r4
 80031c6:	f7ff fe37 	bl	8002e38 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80031ca:	4620      	mov	r0, r4
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	bf00      	nop
 80031d0:	200008c4 	.word	0x200008c4
 80031d4:	08004240 	.word	0x08004240

080031d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031da:	e003      	b.n	80031e4 <LoopCopyDataInit>

080031dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031e2:	3104      	adds	r1, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031e4:	480a      	ldr	r0, [pc, #40]	; (8003210 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031ec:	d3f6      	bcc.n	80031dc <CopyDataInit>
  ldr r2, =_sbss
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031f0:	e002      	b.n	80031f8 <LoopFillZerobss>

080031f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031f4:	f842 3b04 	str.w	r3, [r2], #4

080031f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031fc:	d3f9      	bcc.n	80031f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031fe:	f7fd f99d 	bl	800053c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003202:	f000 f80f 	bl	8003224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003206:	f7fc ffe5 	bl	80001d4 <main>
  bx lr
 800320a:	4770      	bx	lr
  ldr r3, =_sidata
 800320c:	08004324 	.word	0x08004324
  ldr r0, =_sdata
 8003210:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003214:	20000160 	.word	0x20000160
  ldr r2, =_sbss
 8003218:	20000160 	.word	0x20000160
  ldr r3, = _ebss
 800321c:	20000ac8 	.word	0x20000ac8

08003220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003220:	e7fe      	b.n	8003220 <ADC1_2_IRQHandler>
	...

08003224 <__libc_init_array>:
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	2500      	movs	r5, #0
 8003228:	4e0c      	ldr	r6, [pc, #48]	; (800325c <__libc_init_array+0x38>)
 800322a:	4c0d      	ldr	r4, [pc, #52]	; (8003260 <__libc_init_array+0x3c>)
 800322c:	1ba4      	subs	r4, r4, r6
 800322e:	10a4      	asrs	r4, r4, #2
 8003230:	42a5      	cmp	r5, r4
 8003232:	d109      	bne.n	8003248 <__libc_init_array+0x24>
 8003234:	f000 ffae 	bl	8004194 <_init>
 8003238:	2500      	movs	r5, #0
 800323a:	4e0a      	ldr	r6, [pc, #40]	; (8003264 <__libc_init_array+0x40>)
 800323c:	4c0a      	ldr	r4, [pc, #40]	; (8003268 <__libc_init_array+0x44>)
 800323e:	1ba4      	subs	r4, r4, r6
 8003240:	10a4      	asrs	r4, r4, #2
 8003242:	42a5      	cmp	r5, r4
 8003244:	d105      	bne.n	8003252 <__libc_init_array+0x2e>
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800324c:	4798      	blx	r3
 800324e:	3501      	adds	r5, #1
 8003250:	e7ee      	b.n	8003230 <__libc_init_array+0xc>
 8003252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003256:	4798      	blx	r3
 8003258:	3501      	adds	r5, #1
 800325a:	e7f2      	b.n	8003242 <__libc_init_array+0x1e>
 800325c:	0800431c 	.word	0x0800431c
 8003260:	0800431c 	.word	0x0800431c
 8003264:	0800431c 	.word	0x0800431c
 8003268:	08004320 	.word	0x08004320

0800326c <memset>:
 800326c:	4603      	mov	r3, r0
 800326e:	4402      	add	r2, r0
 8003270:	4293      	cmp	r3, r2
 8003272:	d100      	bne.n	8003276 <memset+0xa>
 8003274:	4770      	bx	lr
 8003276:	f803 1b01 	strb.w	r1, [r3], #1
 800327a:	e7f9      	b.n	8003270 <memset+0x4>

0800327c <iprintf>:
 800327c:	b40f      	push	{r0, r1, r2, r3}
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <iprintf+0x2c>)
 8003280:	b513      	push	{r0, r1, r4, lr}
 8003282:	681c      	ldr	r4, [r3, #0]
 8003284:	b124      	cbz	r4, 8003290 <iprintf+0x14>
 8003286:	69a3      	ldr	r3, [r4, #24]
 8003288:	b913      	cbnz	r3, 8003290 <iprintf+0x14>
 800328a:	4620      	mov	r0, r4
 800328c:	f000 f9d4 	bl	8003638 <__sinit>
 8003290:	ab05      	add	r3, sp, #20
 8003292:	9a04      	ldr	r2, [sp, #16]
 8003294:	68a1      	ldr	r1, [r4, #8]
 8003296:	4620      	mov	r0, r4
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	f000 fb8d 	bl	80039b8 <_vfiprintf_r>
 800329e:	b002      	add	sp, #8
 80032a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a4:	b004      	add	sp, #16
 80032a6:	4770      	bx	lr
 80032a8:	200000fc 	.word	0x200000fc

080032ac <putchar>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <putchar+0x24>)
 80032b0:	4605      	mov	r5, r0
 80032b2:	681c      	ldr	r4, [r3, #0]
 80032b4:	b124      	cbz	r4, 80032c0 <putchar+0x14>
 80032b6:	69a3      	ldr	r3, [r4, #24]
 80032b8:	b913      	cbnz	r3, 80032c0 <putchar+0x14>
 80032ba:	4620      	mov	r0, r4
 80032bc:	f000 f9bc 	bl	8003638 <__sinit>
 80032c0:	68a2      	ldr	r2, [r4, #8]
 80032c2:	4629      	mov	r1, r5
 80032c4:	4620      	mov	r0, r4
 80032c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ca:	f000 be23 	b.w	8003f14 <_putc_r>
 80032ce:	bf00      	nop
 80032d0:	200000fc 	.word	0x200000fc

080032d4 <__swbuf_r>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	460e      	mov	r6, r1
 80032d8:	4614      	mov	r4, r2
 80032da:	4605      	mov	r5, r0
 80032dc:	b118      	cbz	r0, 80032e6 <__swbuf_r+0x12>
 80032de:	6983      	ldr	r3, [r0, #24]
 80032e0:	b90b      	cbnz	r3, 80032e6 <__swbuf_r+0x12>
 80032e2:	f000 f9a9 	bl	8003638 <__sinit>
 80032e6:	4b21      	ldr	r3, [pc, #132]	; (800336c <__swbuf_r+0x98>)
 80032e8:	429c      	cmp	r4, r3
 80032ea:	d12a      	bne.n	8003342 <__swbuf_r+0x6e>
 80032ec:	686c      	ldr	r4, [r5, #4]
 80032ee:	69a3      	ldr	r3, [r4, #24]
 80032f0:	60a3      	str	r3, [r4, #8]
 80032f2:	89a3      	ldrh	r3, [r4, #12]
 80032f4:	071a      	lsls	r2, r3, #28
 80032f6:	d52e      	bpl.n	8003356 <__swbuf_r+0x82>
 80032f8:	6923      	ldr	r3, [r4, #16]
 80032fa:	b363      	cbz	r3, 8003356 <__swbuf_r+0x82>
 80032fc:	6923      	ldr	r3, [r4, #16]
 80032fe:	6820      	ldr	r0, [r4, #0]
 8003300:	b2f6      	uxtb	r6, r6
 8003302:	1ac0      	subs	r0, r0, r3
 8003304:	6963      	ldr	r3, [r4, #20]
 8003306:	4637      	mov	r7, r6
 8003308:	4298      	cmp	r0, r3
 800330a:	db04      	blt.n	8003316 <__swbuf_r+0x42>
 800330c:	4621      	mov	r1, r4
 800330e:	4628      	mov	r0, r5
 8003310:	f000 f928 	bl	8003564 <_fflush_r>
 8003314:	bb28      	cbnz	r0, 8003362 <__swbuf_r+0x8e>
 8003316:	68a3      	ldr	r3, [r4, #8]
 8003318:	3001      	adds	r0, #1
 800331a:	3b01      	subs	r3, #1
 800331c:	60a3      	str	r3, [r4, #8]
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	6022      	str	r2, [r4, #0]
 8003324:	701e      	strb	r6, [r3, #0]
 8003326:	6963      	ldr	r3, [r4, #20]
 8003328:	4298      	cmp	r0, r3
 800332a:	d004      	beq.n	8003336 <__swbuf_r+0x62>
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	07db      	lsls	r3, r3, #31
 8003330:	d519      	bpl.n	8003366 <__swbuf_r+0x92>
 8003332:	2e0a      	cmp	r6, #10
 8003334:	d117      	bne.n	8003366 <__swbuf_r+0x92>
 8003336:	4621      	mov	r1, r4
 8003338:	4628      	mov	r0, r5
 800333a:	f000 f913 	bl	8003564 <_fflush_r>
 800333e:	b190      	cbz	r0, 8003366 <__swbuf_r+0x92>
 8003340:	e00f      	b.n	8003362 <__swbuf_r+0x8e>
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <__swbuf_r+0x9c>)
 8003344:	429c      	cmp	r4, r3
 8003346:	d101      	bne.n	800334c <__swbuf_r+0x78>
 8003348:	68ac      	ldr	r4, [r5, #8]
 800334a:	e7d0      	b.n	80032ee <__swbuf_r+0x1a>
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <__swbuf_r+0xa0>)
 800334e:	429c      	cmp	r4, r3
 8003350:	bf08      	it	eq
 8003352:	68ec      	ldreq	r4, [r5, #12]
 8003354:	e7cb      	b.n	80032ee <__swbuf_r+0x1a>
 8003356:	4621      	mov	r1, r4
 8003358:	4628      	mov	r0, r5
 800335a:	f000 f80d 	bl	8003378 <__swsetup_r>
 800335e:	2800      	cmp	r0, #0
 8003360:	d0cc      	beq.n	80032fc <__swbuf_r+0x28>
 8003362:	f04f 37ff 	mov.w	r7, #4294967295
 8003366:	4638      	mov	r0, r7
 8003368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800336a:	bf00      	nop
 800336c:	080042a4 	.word	0x080042a4
 8003370:	080042c4 	.word	0x080042c4
 8003374:	08004284 	.word	0x08004284

08003378 <__swsetup_r>:
 8003378:	4b32      	ldr	r3, [pc, #200]	; (8003444 <__swsetup_r+0xcc>)
 800337a:	b570      	push	{r4, r5, r6, lr}
 800337c:	681d      	ldr	r5, [r3, #0]
 800337e:	4606      	mov	r6, r0
 8003380:	460c      	mov	r4, r1
 8003382:	b125      	cbz	r5, 800338e <__swsetup_r+0x16>
 8003384:	69ab      	ldr	r3, [r5, #24]
 8003386:	b913      	cbnz	r3, 800338e <__swsetup_r+0x16>
 8003388:	4628      	mov	r0, r5
 800338a:	f000 f955 	bl	8003638 <__sinit>
 800338e:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <__swsetup_r+0xd0>)
 8003390:	429c      	cmp	r4, r3
 8003392:	d10f      	bne.n	80033b4 <__swsetup_r+0x3c>
 8003394:	686c      	ldr	r4, [r5, #4]
 8003396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800339a:	b29a      	uxth	r2, r3
 800339c:	0715      	lsls	r5, r2, #28
 800339e:	d42c      	bmi.n	80033fa <__swsetup_r+0x82>
 80033a0:	06d0      	lsls	r0, r2, #27
 80033a2:	d411      	bmi.n	80033c8 <__swsetup_r+0x50>
 80033a4:	2209      	movs	r2, #9
 80033a6:	6032      	str	r2, [r6, #0]
 80033a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ac:	81a3      	strh	r3, [r4, #12]
 80033ae:	f04f 30ff 	mov.w	r0, #4294967295
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	4b25      	ldr	r3, [pc, #148]	; (800344c <__swsetup_r+0xd4>)
 80033b6:	429c      	cmp	r4, r3
 80033b8:	d101      	bne.n	80033be <__swsetup_r+0x46>
 80033ba:	68ac      	ldr	r4, [r5, #8]
 80033bc:	e7eb      	b.n	8003396 <__swsetup_r+0x1e>
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <__swsetup_r+0xd8>)
 80033c0:	429c      	cmp	r4, r3
 80033c2:	bf08      	it	eq
 80033c4:	68ec      	ldreq	r4, [r5, #12]
 80033c6:	e7e6      	b.n	8003396 <__swsetup_r+0x1e>
 80033c8:	0751      	lsls	r1, r2, #29
 80033ca:	d512      	bpl.n	80033f2 <__swsetup_r+0x7a>
 80033cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033ce:	b141      	cbz	r1, 80033e2 <__swsetup_r+0x6a>
 80033d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033d4:	4299      	cmp	r1, r3
 80033d6:	d002      	beq.n	80033de <__swsetup_r+0x66>
 80033d8:	4630      	mov	r0, r6
 80033da:	f000 fa1b 	bl	8003814 <_free_r>
 80033de:	2300      	movs	r3, #0
 80033e0:	6363      	str	r3, [r4, #52]	; 0x34
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033e8:	81a3      	strh	r3, [r4, #12]
 80033ea:	2300      	movs	r3, #0
 80033ec:	6063      	str	r3, [r4, #4]
 80033ee:	6923      	ldr	r3, [r4, #16]
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	89a3      	ldrh	r3, [r4, #12]
 80033f4:	f043 0308 	orr.w	r3, r3, #8
 80033f8:	81a3      	strh	r3, [r4, #12]
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	b94b      	cbnz	r3, 8003412 <__swsetup_r+0x9a>
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003408:	d003      	beq.n	8003412 <__swsetup_r+0x9a>
 800340a:	4621      	mov	r1, r4
 800340c:	4630      	mov	r0, r6
 800340e:	f000 f9c1 	bl	8003794 <__smakebuf_r>
 8003412:	89a2      	ldrh	r2, [r4, #12]
 8003414:	f012 0301 	ands.w	r3, r2, #1
 8003418:	d00c      	beq.n	8003434 <__swsetup_r+0xbc>
 800341a:	2300      	movs	r3, #0
 800341c:	60a3      	str	r3, [r4, #8]
 800341e:	6963      	ldr	r3, [r4, #20]
 8003420:	425b      	negs	r3, r3
 8003422:	61a3      	str	r3, [r4, #24]
 8003424:	6923      	ldr	r3, [r4, #16]
 8003426:	b953      	cbnz	r3, 800343e <__swsetup_r+0xc6>
 8003428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800342c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003430:	d1ba      	bne.n	80033a8 <__swsetup_r+0x30>
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	0792      	lsls	r2, r2, #30
 8003436:	bf58      	it	pl
 8003438:	6963      	ldrpl	r3, [r4, #20]
 800343a:	60a3      	str	r3, [r4, #8]
 800343c:	e7f2      	b.n	8003424 <__swsetup_r+0xac>
 800343e:	2000      	movs	r0, #0
 8003440:	e7f7      	b.n	8003432 <__swsetup_r+0xba>
 8003442:	bf00      	nop
 8003444:	200000fc 	.word	0x200000fc
 8003448:	080042a4 	.word	0x080042a4
 800344c:	080042c4 	.word	0x080042c4
 8003450:	08004284 	.word	0x08004284

08003454 <__sflush_r>:
 8003454:	898a      	ldrh	r2, [r1, #12]
 8003456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800345a:	4605      	mov	r5, r0
 800345c:	0710      	lsls	r0, r2, #28
 800345e:	460c      	mov	r4, r1
 8003460:	d45a      	bmi.n	8003518 <__sflush_r+0xc4>
 8003462:	684b      	ldr	r3, [r1, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	dc05      	bgt.n	8003474 <__sflush_r+0x20>
 8003468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	dc02      	bgt.n	8003474 <__sflush_r+0x20>
 800346e:	2000      	movs	r0, #0
 8003470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003476:	2e00      	cmp	r6, #0
 8003478:	d0f9      	beq.n	800346e <__sflush_r+0x1a>
 800347a:	2300      	movs	r3, #0
 800347c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003480:	682f      	ldr	r7, [r5, #0]
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	d033      	beq.n	80034ee <__sflush_r+0x9a>
 8003486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003488:	89a3      	ldrh	r3, [r4, #12]
 800348a:	075a      	lsls	r2, r3, #29
 800348c:	d505      	bpl.n	800349a <__sflush_r+0x46>
 800348e:	6863      	ldr	r3, [r4, #4]
 8003490:	1ac0      	subs	r0, r0, r3
 8003492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003494:	b10b      	cbz	r3, 800349a <__sflush_r+0x46>
 8003496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003498:	1ac0      	subs	r0, r0, r3
 800349a:	2300      	movs	r3, #0
 800349c:	4602      	mov	r2, r0
 800349e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034a0:	6a21      	ldr	r1, [r4, #32]
 80034a2:	4628      	mov	r0, r5
 80034a4:	47b0      	blx	r6
 80034a6:	1c43      	adds	r3, r0, #1
 80034a8:	89a3      	ldrh	r3, [r4, #12]
 80034aa:	d106      	bne.n	80034ba <__sflush_r+0x66>
 80034ac:	6829      	ldr	r1, [r5, #0]
 80034ae:	291d      	cmp	r1, #29
 80034b0:	d84b      	bhi.n	800354a <__sflush_r+0xf6>
 80034b2:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <__sflush_r+0x10c>)
 80034b4:	40ca      	lsrs	r2, r1
 80034b6:	07d6      	lsls	r6, r2, #31
 80034b8:	d547      	bpl.n	800354a <__sflush_r+0xf6>
 80034ba:	2200      	movs	r2, #0
 80034bc:	6062      	str	r2, [r4, #4]
 80034be:	6922      	ldr	r2, [r4, #16]
 80034c0:	04d9      	lsls	r1, r3, #19
 80034c2:	6022      	str	r2, [r4, #0]
 80034c4:	d504      	bpl.n	80034d0 <__sflush_r+0x7c>
 80034c6:	1c42      	adds	r2, r0, #1
 80034c8:	d101      	bne.n	80034ce <__sflush_r+0x7a>
 80034ca:	682b      	ldr	r3, [r5, #0]
 80034cc:	b903      	cbnz	r3, 80034d0 <__sflush_r+0x7c>
 80034ce:	6560      	str	r0, [r4, #84]	; 0x54
 80034d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034d2:	602f      	str	r7, [r5, #0]
 80034d4:	2900      	cmp	r1, #0
 80034d6:	d0ca      	beq.n	800346e <__sflush_r+0x1a>
 80034d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034dc:	4299      	cmp	r1, r3
 80034de:	d002      	beq.n	80034e6 <__sflush_r+0x92>
 80034e0:	4628      	mov	r0, r5
 80034e2:	f000 f997 	bl	8003814 <_free_r>
 80034e6:	2000      	movs	r0, #0
 80034e8:	6360      	str	r0, [r4, #52]	; 0x34
 80034ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ee:	6a21      	ldr	r1, [r4, #32]
 80034f0:	2301      	movs	r3, #1
 80034f2:	4628      	mov	r0, r5
 80034f4:	47b0      	blx	r6
 80034f6:	1c41      	adds	r1, r0, #1
 80034f8:	d1c6      	bne.n	8003488 <__sflush_r+0x34>
 80034fa:	682b      	ldr	r3, [r5, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0c3      	beq.n	8003488 <__sflush_r+0x34>
 8003500:	2b1d      	cmp	r3, #29
 8003502:	d001      	beq.n	8003508 <__sflush_r+0xb4>
 8003504:	2b16      	cmp	r3, #22
 8003506:	d101      	bne.n	800350c <__sflush_r+0xb8>
 8003508:	602f      	str	r7, [r5, #0]
 800350a:	e7b0      	b.n	800346e <__sflush_r+0x1a>
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003512:	81a3      	strh	r3, [r4, #12]
 8003514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003518:	690f      	ldr	r7, [r1, #16]
 800351a:	2f00      	cmp	r7, #0
 800351c:	d0a7      	beq.n	800346e <__sflush_r+0x1a>
 800351e:	0793      	lsls	r3, r2, #30
 8003520:	bf18      	it	ne
 8003522:	2300      	movne	r3, #0
 8003524:	680e      	ldr	r6, [r1, #0]
 8003526:	bf08      	it	eq
 8003528:	694b      	ldreq	r3, [r1, #20]
 800352a:	eba6 0807 	sub.w	r8, r6, r7
 800352e:	600f      	str	r7, [r1, #0]
 8003530:	608b      	str	r3, [r1, #8]
 8003532:	f1b8 0f00 	cmp.w	r8, #0
 8003536:	dd9a      	ble.n	800346e <__sflush_r+0x1a>
 8003538:	4643      	mov	r3, r8
 800353a:	463a      	mov	r2, r7
 800353c:	6a21      	ldr	r1, [r4, #32]
 800353e:	4628      	mov	r0, r5
 8003540:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003542:	47b0      	blx	r6
 8003544:	2800      	cmp	r0, #0
 8003546:	dc07      	bgt.n	8003558 <__sflush_r+0x104>
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354e:	81a3      	strh	r3, [r4, #12]
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003558:	4407      	add	r7, r0
 800355a:	eba8 0800 	sub.w	r8, r8, r0
 800355e:	e7e8      	b.n	8003532 <__sflush_r+0xde>
 8003560:	20400001 	.word	0x20400001

08003564 <_fflush_r>:
 8003564:	b538      	push	{r3, r4, r5, lr}
 8003566:	690b      	ldr	r3, [r1, #16]
 8003568:	4605      	mov	r5, r0
 800356a:	460c      	mov	r4, r1
 800356c:	b1db      	cbz	r3, 80035a6 <_fflush_r+0x42>
 800356e:	b118      	cbz	r0, 8003578 <_fflush_r+0x14>
 8003570:	6983      	ldr	r3, [r0, #24]
 8003572:	b90b      	cbnz	r3, 8003578 <_fflush_r+0x14>
 8003574:	f000 f860 	bl	8003638 <__sinit>
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <_fflush_r+0x48>)
 800357a:	429c      	cmp	r4, r3
 800357c:	d109      	bne.n	8003592 <_fflush_r+0x2e>
 800357e:	686c      	ldr	r4, [r5, #4]
 8003580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003584:	b17b      	cbz	r3, 80035a6 <_fflush_r+0x42>
 8003586:	4621      	mov	r1, r4
 8003588:	4628      	mov	r0, r5
 800358a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800358e:	f7ff bf61 	b.w	8003454 <__sflush_r>
 8003592:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <_fflush_r+0x4c>)
 8003594:	429c      	cmp	r4, r3
 8003596:	d101      	bne.n	800359c <_fflush_r+0x38>
 8003598:	68ac      	ldr	r4, [r5, #8]
 800359a:	e7f1      	b.n	8003580 <_fflush_r+0x1c>
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <_fflush_r+0x50>)
 800359e:	429c      	cmp	r4, r3
 80035a0:	bf08      	it	eq
 80035a2:	68ec      	ldreq	r4, [r5, #12]
 80035a4:	e7ec      	b.n	8003580 <_fflush_r+0x1c>
 80035a6:	2000      	movs	r0, #0
 80035a8:	bd38      	pop	{r3, r4, r5, pc}
 80035aa:	bf00      	nop
 80035ac:	080042a4 	.word	0x080042a4
 80035b0:	080042c4 	.word	0x080042c4
 80035b4:	08004284 	.word	0x08004284

080035b8 <_cleanup_r>:
 80035b8:	4901      	ldr	r1, [pc, #4]	; (80035c0 <_cleanup_r+0x8>)
 80035ba:	f000 b8a9 	b.w	8003710 <_fwalk_reent>
 80035be:	bf00      	nop
 80035c0:	08003565 	.word	0x08003565

080035c4 <std.isra.0>:
 80035c4:	2300      	movs	r3, #0
 80035c6:	b510      	push	{r4, lr}
 80035c8:	4604      	mov	r4, r0
 80035ca:	6003      	str	r3, [r0, #0]
 80035cc:	6043      	str	r3, [r0, #4]
 80035ce:	6083      	str	r3, [r0, #8]
 80035d0:	8181      	strh	r1, [r0, #12]
 80035d2:	6643      	str	r3, [r0, #100]	; 0x64
 80035d4:	81c2      	strh	r2, [r0, #14]
 80035d6:	6103      	str	r3, [r0, #16]
 80035d8:	6143      	str	r3, [r0, #20]
 80035da:	6183      	str	r3, [r0, #24]
 80035dc:	4619      	mov	r1, r3
 80035de:	2208      	movs	r2, #8
 80035e0:	305c      	adds	r0, #92	; 0x5c
 80035e2:	f7ff fe43 	bl	800326c <memset>
 80035e6:	4b05      	ldr	r3, [pc, #20]	; (80035fc <std.isra.0+0x38>)
 80035e8:	6224      	str	r4, [r4, #32]
 80035ea:	6263      	str	r3, [r4, #36]	; 0x24
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <std.isra.0+0x3c>)
 80035ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <std.isra.0+0x40>)
 80035f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <std.isra.0+0x44>)
 80035f6:	6323      	str	r3, [r4, #48]	; 0x30
 80035f8:	bd10      	pop	{r4, pc}
 80035fa:	bf00      	nop
 80035fc:	08003fa1 	.word	0x08003fa1
 8003600:	08003fc3 	.word	0x08003fc3
 8003604:	08003ffb 	.word	0x08003ffb
 8003608:	0800401f 	.word	0x0800401f

0800360c <__sfmoreglue>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	2568      	movs	r5, #104	; 0x68
 8003610:	1e4a      	subs	r2, r1, #1
 8003612:	4355      	muls	r5, r2
 8003614:	460e      	mov	r6, r1
 8003616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800361a:	f000 f947 	bl	80038ac <_malloc_r>
 800361e:	4604      	mov	r4, r0
 8003620:	b140      	cbz	r0, 8003634 <__sfmoreglue+0x28>
 8003622:	2100      	movs	r1, #0
 8003624:	e880 0042 	stmia.w	r0, {r1, r6}
 8003628:	300c      	adds	r0, #12
 800362a:	60a0      	str	r0, [r4, #8]
 800362c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003630:	f7ff fe1c 	bl	800326c <memset>
 8003634:	4620      	mov	r0, r4
 8003636:	bd70      	pop	{r4, r5, r6, pc}

08003638 <__sinit>:
 8003638:	6983      	ldr	r3, [r0, #24]
 800363a:	b510      	push	{r4, lr}
 800363c:	4604      	mov	r4, r0
 800363e:	bb33      	cbnz	r3, 800368e <__sinit+0x56>
 8003640:	6483      	str	r3, [r0, #72]	; 0x48
 8003642:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003644:	6503      	str	r3, [r0, #80]	; 0x50
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <__sinit+0x58>)
 8003648:	4a12      	ldr	r2, [pc, #72]	; (8003694 <__sinit+0x5c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6282      	str	r2, [r0, #40]	; 0x28
 800364e:	4298      	cmp	r0, r3
 8003650:	bf04      	itt	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	6183      	streq	r3, [r0, #24]
 8003656:	f000 f81f 	bl	8003698 <__sfp>
 800365a:	6060      	str	r0, [r4, #4]
 800365c:	4620      	mov	r0, r4
 800365e:	f000 f81b 	bl	8003698 <__sfp>
 8003662:	60a0      	str	r0, [r4, #8]
 8003664:	4620      	mov	r0, r4
 8003666:	f000 f817 	bl	8003698 <__sfp>
 800366a:	2200      	movs	r2, #0
 800366c:	60e0      	str	r0, [r4, #12]
 800366e:	2104      	movs	r1, #4
 8003670:	6860      	ldr	r0, [r4, #4]
 8003672:	f7ff ffa7 	bl	80035c4 <std.isra.0>
 8003676:	2201      	movs	r2, #1
 8003678:	2109      	movs	r1, #9
 800367a:	68a0      	ldr	r0, [r4, #8]
 800367c:	f7ff ffa2 	bl	80035c4 <std.isra.0>
 8003680:	2202      	movs	r2, #2
 8003682:	2112      	movs	r1, #18
 8003684:	68e0      	ldr	r0, [r4, #12]
 8003686:	f7ff ff9d 	bl	80035c4 <std.isra.0>
 800368a:	2301      	movs	r3, #1
 800368c:	61a3      	str	r3, [r4, #24]
 800368e:	bd10      	pop	{r4, pc}
 8003690:	080042e4 	.word	0x080042e4
 8003694:	080035b9 	.word	0x080035b9

08003698 <__sfp>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <__sfp+0x74>)
 800369c:	4607      	mov	r7, r0
 800369e:	681e      	ldr	r6, [r3, #0]
 80036a0:	69b3      	ldr	r3, [r6, #24]
 80036a2:	b913      	cbnz	r3, 80036aa <__sfp+0x12>
 80036a4:	4630      	mov	r0, r6
 80036a6:	f7ff ffc7 	bl	8003638 <__sinit>
 80036aa:	3648      	adds	r6, #72	; 0x48
 80036ac:	68b4      	ldr	r4, [r6, #8]
 80036ae:	6873      	ldr	r3, [r6, #4]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	d503      	bpl.n	80036bc <__sfp+0x24>
 80036b4:	6833      	ldr	r3, [r6, #0]
 80036b6:	b133      	cbz	r3, 80036c6 <__sfp+0x2e>
 80036b8:	6836      	ldr	r6, [r6, #0]
 80036ba:	e7f7      	b.n	80036ac <__sfp+0x14>
 80036bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036c0:	b16d      	cbz	r5, 80036de <__sfp+0x46>
 80036c2:	3468      	adds	r4, #104	; 0x68
 80036c4:	e7f4      	b.n	80036b0 <__sfp+0x18>
 80036c6:	2104      	movs	r1, #4
 80036c8:	4638      	mov	r0, r7
 80036ca:	f7ff ff9f 	bl	800360c <__sfmoreglue>
 80036ce:	6030      	str	r0, [r6, #0]
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d1f1      	bne.n	80036b8 <__sfp+0x20>
 80036d4:	230c      	movs	r3, #12
 80036d6:	4604      	mov	r4, r0
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	4620      	mov	r0, r4
 80036dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036e2:	81e3      	strh	r3, [r4, #14]
 80036e4:	2301      	movs	r3, #1
 80036e6:	6665      	str	r5, [r4, #100]	; 0x64
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	6025      	str	r5, [r4, #0]
 80036ec:	60a5      	str	r5, [r4, #8]
 80036ee:	6065      	str	r5, [r4, #4]
 80036f0:	6125      	str	r5, [r4, #16]
 80036f2:	6165      	str	r5, [r4, #20]
 80036f4:	61a5      	str	r5, [r4, #24]
 80036f6:	2208      	movs	r2, #8
 80036f8:	4629      	mov	r1, r5
 80036fa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036fe:	f7ff fdb5 	bl	800326c <memset>
 8003702:	6365      	str	r5, [r4, #52]	; 0x34
 8003704:	63a5      	str	r5, [r4, #56]	; 0x38
 8003706:	64a5      	str	r5, [r4, #72]	; 0x48
 8003708:	64e5      	str	r5, [r4, #76]	; 0x4c
 800370a:	e7e6      	b.n	80036da <__sfp+0x42>
 800370c:	080042e4 	.word	0x080042e4

08003710 <_fwalk_reent>:
 8003710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003714:	4680      	mov	r8, r0
 8003716:	4689      	mov	r9, r1
 8003718:	2600      	movs	r6, #0
 800371a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800371e:	b914      	cbnz	r4, 8003726 <_fwalk_reent+0x16>
 8003720:	4630      	mov	r0, r6
 8003722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003726:	68a5      	ldr	r5, [r4, #8]
 8003728:	6867      	ldr	r7, [r4, #4]
 800372a:	3f01      	subs	r7, #1
 800372c:	d501      	bpl.n	8003732 <_fwalk_reent+0x22>
 800372e:	6824      	ldr	r4, [r4, #0]
 8003730:	e7f5      	b.n	800371e <_fwalk_reent+0xe>
 8003732:	89ab      	ldrh	r3, [r5, #12]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d907      	bls.n	8003748 <_fwalk_reent+0x38>
 8003738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800373c:	3301      	adds	r3, #1
 800373e:	d003      	beq.n	8003748 <_fwalk_reent+0x38>
 8003740:	4629      	mov	r1, r5
 8003742:	4640      	mov	r0, r8
 8003744:	47c8      	blx	r9
 8003746:	4306      	orrs	r6, r0
 8003748:	3568      	adds	r5, #104	; 0x68
 800374a:	e7ee      	b.n	800372a <_fwalk_reent+0x1a>

0800374c <__swhatbuf_r>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	460e      	mov	r6, r1
 8003750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003754:	b090      	sub	sp, #64	; 0x40
 8003756:	2900      	cmp	r1, #0
 8003758:	4614      	mov	r4, r2
 800375a:	461d      	mov	r5, r3
 800375c:	da07      	bge.n	800376e <__swhatbuf_r+0x22>
 800375e:	2300      	movs	r3, #0
 8003760:	602b      	str	r3, [r5, #0]
 8003762:	89b3      	ldrh	r3, [r6, #12]
 8003764:	061a      	lsls	r2, r3, #24
 8003766:	d410      	bmi.n	800378a <__swhatbuf_r+0x3e>
 8003768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800376c:	e00e      	b.n	800378c <__swhatbuf_r+0x40>
 800376e:	aa01      	add	r2, sp, #4
 8003770:	f000 fc7c 	bl	800406c <_fstat_r>
 8003774:	2800      	cmp	r0, #0
 8003776:	dbf2      	blt.n	800375e <__swhatbuf_r+0x12>
 8003778:	9a02      	ldr	r2, [sp, #8]
 800377a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800377e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003782:	425a      	negs	r2, r3
 8003784:	415a      	adcs	r2, r3
 8003786:	602a      	str	r2, [r5, #0]
 8003788:	e7ee      	b.n	8003768 <__swhatbuf_r+0x1c>
 800378a:	2340      	movs	r3, #64	; 0x40
 800378c:	2000      	movs	r0, #0
 800378e:	6023      	str	r3, [r4, #0]
 8003790:	b010      	add	sp, #64	; 0x40
 8003792:	bd70      	pop	{r4, r5, r6, pc}

08003794 <__smakebuf_r>:
 8003794:	898b      	ldrh	r3, [r1, #12]
 8003796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003798:	079d      	lsls	r5, r3, #30
 800379a:	4606      	mov	r6, r0
 800379c:	460c      	mov	r4, r1
 800379e:	d507      	bpl.n	80037b0 <__smakebuf_r+0x1c>
 80037a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	6123      	str	r3, [r4, #16]
 80037a8:	2301      	movs	r3, #1
 80037aa:	6163      	str	r3, [r4, #20]
 80037ac:	b002      	add	sp, #8
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	ab01      	add	r3, sp, #4
 80037b2:	466a      	mov	r2, sp
 80037b4:	f7ff ffca 	bl	800374c <__swhatbuf_r>
 80037b8:	9900      	ldr	r1, [sp, #0]
 80037ba:	4605      	mov	r5, r0
 80037bc:	4630      	mov	r0, r6
 80037be:	f000 f875 	bl	80038ac <_malloc_r>
 80037c2:	b948      	cbnz	r0, 80037d8 <__smakebuf_r+0x44>
 80037c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c8:	059a      	lsls	r2, r3, #22
 80037ca:	d4ef      	bmi.n	80037ac <__smakebuf_r+0x18>
 80037cc:	f023 0303 	bic.w	r3, r3, #3
 80037d0:	f043 0302 	orr.w	r3, r3, #2
 80037d4:	81a3      	strh	r3, [r4, #12]
 80037d6:	e7e3      	b.n	80037a0 <__smakebuf_r+0xc>
 80037d8:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <__smakebuf_r+0x7c>)
 80037da:	62b3      	str	r3, [r6, #40]	; 0x28
 80037dc:	89a3      	ldrh	r3, [r4, #12]
 80037de:	6020      	str	r0, [r4, #0]
 80037e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e4:	81a3      	strh	r3, [r4, #12]
 80037e6:	9b00      	ldr	r3, [sp, #0]
 80037e8:	6120      	str	r0, [r4, #16]
 80037ea:	6163      	str	r3, [r4, #20]
 80037ec:	9b01      	ldr	r3, [sp, #4]
 80037ee:	b15b      	cbz	r3, 8003808 <__smakebuf_r+0x74>
 80037f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037f4:	4630      	mov	r0, r6
 80037f6:	f000 fc4b 	bl	8004090 <_isatty_r>
 80037fa:	b128      	cbz	r0, 8003808 <__smakebuf_r+0x74>
 80037fc:	89a3      	ldrh	r3, [r4, #12]
 80037fe:	f023 0303 	bic.w	r3, r3, #3
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	81a3      	strh	r3, [r4, #12]
 8003808:	89a3      	ldrh	r3, [r4, #12]
 800380a:	431d      	orrs	r5, r3
 800380c:	81a5      	strh	r5, [r4, #12]
 800380e:	e7cd      	b.n	80037ac <__smakebuf_r+0x18>
 8003810:	080035b9 	.word	0x080035b9

08003814 <_free_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	4605      	mov	r5, r0
 8003818:	2900      	cmp	r1, #0
 800381a:	d043      	beq.n	80038a4 <_free_r+0x90>
 800381c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003820:	1f0c      	subs	r4, r1, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	bfb8      	it	lt
 8003826:	18e4      	addlt	r4, r4, r3
 8003828:	f000 fc62 	bl	80040f0 <__malloc_lock>
 800382c:	4a1e      	ldr	r2, [pc, #120]	; (80038a8 <_free_r+0x94>)
 800382e:	6813      	ldr	r3, [r2, #0]
 8003830:	4610      	mov	r0, r2
 8003832:	b933      	cbnz	r3, 8003842 <_free_r+0x2e>
 8003834:	6063      	str	r3, [r4, #4]
 8003836:	6014      	str	r4, [r2, #0]
 8003838:	4628      	mov	r0, r5
 800383a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800383e:	f000 bc58 	b.w	80040f2 <__malloc_unlock>
 8003842:	42a3      	cmp	r3, r4
 8003844:	d90b      	bls.n	800385e <_free_r+0x4a>
 8003846:	6821      	ldr	r1, [r4, #0]
 8003848:	1862      	adds	r2, r4, r1
 800384a:	4293      	cmp	r3, r2
 800384c:	bf01      	itttt	eq
 800384e:	681a      	ldreq	r2, [r3, #0]
 8003850:	685b      	ldreq	r3, [r3, #4]
 8003852:	1852      	addeq	r2, r2, r1
 8003854:	6022      	streq	r2, [r4, #0]
 8003856:	6063      	str	r3, [r4, #4]
 8003858:	6004      	str	r4, [r0, #0]
 800385a:	e7ed      	b.n	8003838 <_free_r+0x24>
 800385c:	4613      	mov	r3, r2
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	b10a      	cbz	r2, 8003866 <_free_r+0x52>
 8003862:	42a2      	cmp	r2, r4
 8003864:	d9fa      	bls.n	800385c <_free_r+0x48>
 8003866:	6819      	ldr	r1, [r3, #0]
 8003868:	1858      	adds	r0, r3, r1
 800386a:	42a0      	cmp	r0, r4
 800386c:	d10b      	bne.n	8003886 <_free_r+0x72>
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	4401      	add	r1, r0
 8003872:	1858      	adds	r0, r3, r1
 8003874:	4282      	cmp	r2, r0
 8003876:	6019      	str	r1, [r3, #0]
 8003878:	d1de      	bne.n	8003838 <_free_r+0x24>
 800387a:	6810      	ldr	r0, [r2, #0]
 800387c:	6852      	ldr	r2, [r2, #4]
 800387e:	4401      	add	r1, r0
 8003880:	6019      	str	r1, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	e7d8      	b.n	8003838 <_free_r+0x24>
 8003886:	d902      	bls.n	800388e <_free_r+0x7a>
 8003888:	230c      	movs	r3, #12
 800388a:	602b      	str	r3, [r5, #0]
 800388c:	e7d4      	b.n	8003838 <_free_r+0x24>
 800388e:	6820      	ldr	r0, [r4, #0]
 8003890:	1821      	adds	r1, r4, r0
 8003892:	428a      	cmp	r2, r1
 8003894:	bf01      	itttt	eq
 8003896:	6811      	ldreq	r1, [r2, #0]
 8003898:	6852      	ldreq	r2, [r2, #4]
 800389a:	1809      	addeq	r1, r1, r0
 800389c:	6021      	streq	r1, [r4, #0]
 800389e:	6062      	str	r2, [r4, #4]
 80038a0:	605c      	str	r4, [r3, #4]
 80038a2:	e7c9      	b.n	8003838 <_free_r+0x24>
 80038a4:	bd38      	pop	{r3, r4, r5, pc}
 80038a6:	bf00      	nop
 80038a8:	20000194 	.word	0x20000194

080038ac <_malloc_r>:
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	1ccd      	adds	r5, r1, #3
 80038b0:	f025 0503 	bic.w	r5, r5, #3
 80038b4:	3508      	adds	r5, #8
 80038b6:	2d0c      	cmp	r5, #12
 80038b8:	bf38      	it	cc
 80038ba:	250c      	movcc	r5, #12
 80038bc:	2d00      	cmp	r5, #0
 80038be:	4606      	mov	r6, r0
 80038c0:	db01      	blt.n	80038c6 <_malloc_r+0x1a>
 80038c2:	42a9      	cmp	r1, r5
 80038c4:	d903      	bls.n	80038ce <_malloc_r+0x22>
 80038c6:	230c      	movs	r3, #12
 80038c8:	6033      	str	r3, [r6, #0]
 80038ca:	2000      	movs	r0, #0
 80038cc:	bd70      	pop	{r4, r5, r6, pc}
 80038ce:	f000 fc0f 	bl	80040f0 <__malloc_lock>
 80038d2:	4a23      	ldr	r2, [pc, #140]	; (8003960 <_malloc_r+0xb4>)
 80038d4:	6814      	ldr	r4, [r2, #0]
 80038d6:	4621      	mov	r1, r4
 80038d8:	b991      	cbnz	r1, 8003900 <_malloc_r+0x54>
 80038da:	4c22      	ldr	r4, [pc, #136]	; (8003964 <_malloc_r+0xb8>)
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	b91b      	cbnz	r3, 80038e8 <_malloc_r+0x3c>
 80038e0:	4630      	mov	r0, r6
 80038e2:	f000 fb4d 	bl	8003f80 <_sbrk_r>
 80038e6:	6020      	str	r0, [r4, #0]
 80038e8:	4629      	mov	r1, r5
 80038ea:	4630      	mov	r0, r6
 80038ec:	f000 fb48 	bl	8003f80 <_sbrk_r>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d126      	bne.n	8003942 <_malloc_r+0x96>
 80038f4:	230c      	movs	r3, #12
 80038f6:	4630      	mov	r0, r6
 80038f8:	6033      	str	r3, [r6, #0]
 80038fa:	f000 fbfa 	bl	80040f2 <__malloc_unlock>
 80038fe:	e7e4      	b.n	80038ca <_malloc_r+0x1e>
 8003900:	680b      	ldr	r3, [r1, #0]
 8003902:	1b5b      	subs	r3, r3, r5
 8003904:	d41a      	bmi.n	800393c <_malloc_r+0x90>
 8003906:	2b0b      	cmp	r3, #11
 8003908:	d90f      	bls.n	800392a <_malloc_r+0x7e>
 800390a:	600b      	str	r3, [r1, #0]
 800390c:	18cc      	adds	r4, r1, r3
 800390e:	50cd      	str	r5, [r1, r3]
 8003910:	4630      	mov	r0, r6
 8003912:	f000 fbee 	bl	80040f2 <__malloc_unlock>
 8003916:	f104 000b 	add.w	r0, r4, #11
 800391a:	1d23      	adds	r3, r4, #4
 800391c:	f020 0007 	bic.w	r0, r0, #7
 8003920:	1ac3      	subs	r3, r0, r3
 8003922:	d01b      	beq.n	800395c <_malloc_r+0xb0>
 8003924:	425a      	negs	r2, r3
 8003926:	50e2      	str	r2, [r4, r3]
 8003928:	bd70      	pop	{r4, r5, r6, pc}
 800392a:	428c      	cmp	r4, r1
 800392c:	bf0b      	itete	eq
 800392e:	6863      	ldreq	r3, [r4, #4]
 8003930:	684b      	ldrne	r3, [r1, #4]
 8003932:	6013      	streq	r3, [r2, #0]
 8003934:	6063      	strne	r3, [r4, #4]
 8003936:	bf18      	it	ne
 8003938:	460c      	movne	r4, r1
 800393a:	e7e9      	b.n	8003910 <_malloc_r+0x64>
 800393c:	460c      	mov	r4, r1
 800393e:	6849      	ldr	r1, [r1, #4]
 8003940:	e7ca      	b.n	80038d8 <_malloc_r+0x2c>
 8003942:	1cc4      	adds	r4, r0, #3
 8003944:	f024 0403 	bic.w	r4, r4, #3
 8003948:	42a0      	cmp	r0, r4
 800394a:	d005      	beq.n	8003958 <_malloc_r+0xac>
 800394c:	1a21      	subs	r1, r4, r0
 800394e:	4630      	mov	r0, r6
 8003950:	f000 fb16 	bl	8003f80 <_sbrk_r>
 8003954:	3001      	adds	r0, #1
 8003956:	d0cd      	beq.n	80038f4 <_malloc_r+0x48>
 8003958:	6025      	str	r5, [r4, #0]
 800395a:	e7d9      	b.n	8003910 <_malloc_r+0x64>
 800395c:	bd70      	pop	{r4, r5, r6, pc}
 800395e:	bf00      	nop
 8003960:	20000194 	.word	0x20000194
 8003964:	20000198 	.word	0x20000198

08003968 <__sfputc_r>:
 8003968:	6893      	ldr	r3, [r2, #8]
 800396a:	b410      	push	{r4}
 800396c:	3b01      	subs	r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	6093      	str	r3, [r2, #8]
 8003972:	da08      	bge.n	8003986 <__sfputc_r+0x1e>
 8003974:	6994      	ldr	r4, [r2, #24]
 8003976:	42a3      	cmp	r3, r4
 8003978:	db02      	blt.n	8003980 <__sfputc_r+0x18>
 800397a:	b2cb      	uxtb	r3, r1
 800397c:	2b0a      	cmp	r3, #10
 800397e:	d102      	bne.n	8003986 <__sfputc_r+0x1e>
 8003980:	bc10      	pop	{r4}
 8003982:	f7ff bca7 	b.w	80032d4 <__swbuf_r>
 8003986:	6813      	ldr	r3, [r2, #0]
 8003988:	1c58      	adds	r0, r3, #1
 800398a:	6010      	str	r0, [r2, #0]
 800398c:	7019      	strb	r1, [r3, #0]
 800398e:	b2c8      	uxtb	r0, r1
 8003990:	bc10      	pop	{r4}
 8003992:	4770      	bx	lr

08003994 <__sfputs_r>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	4606      	mov	r6, r0
 8003998:	460f      	mov	r7, r1
 800399a:	4614      	mov	r4, r2
 800399c:	18d5      	adds	r5, r2, r3
 800399e:	42ac      	cmp	r4, r5
 80039a0:	d101      	bne.n	80039a6 <__sfputs_r+0x12>
 80039a2:	2000      	movs	r0, #0
 80039a4:	e007      	b.n	80039b6 <__sfputs_r+0x22>
 80039a6:	463a      	mov	r2, r7
 80039a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ac:	4630      	mov	r0, r6
 80039ae:	f7ff ffdb 	bl	8003968 <__sfputc_r>
 80039b2:	1c43      	adds	r3, r0, #1
 80039b4:	d1f3      	bne.n	800399e <__sfputs_r+0xa>
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039b8 <_vfiprintf_r>:
 80039b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039bc:	b09d      	sub	sp, #116	; 0x74
 80039be:	460c      	mov	r4, r1
 80039c0:	4617      	mov	r7, r2
 80039c2:	9303      	str	r3, [sp, #12]
 80039c4:	4606      	mov	r6, r0
 80039c6:	b118      	cbz	r0, 80039d0 <_vfiprintf_r+0x18>
 80039c8:	6983      	ldr	r3, [r0, #24]
 80039ca:	b90b      	cbnz	r3, 80039d0 <_vfiprintf_r+0x18>
 80039cc:	f7ff fe34 	bl	8003638 <__sinit>
 80039d0:	4b7c      	ldr	r3, [pc, #496]	; (8003bc4 <_vfiprintf_r+0x20c>)
 80039d2:	429c      	cmp	r4, r3
 80039d4:	d157      	bne.n	8003a86 <_vfiprintf_r+0xce>
 80039d6:	6874      	ldr	r4, [r6, #4]
 80039d8:	89a3      	ldrh	r3, [r4, #12]
 80039da:	0718      	lsls	r0, r3, #28
 80039dc:	d55d      	bpl.n	8003a9a <_vfiprintf_r+0xe2>
 80039de:	6923      	ldr	r3, [r4, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05a      	beq.n	8003a9a <_vfiprintf_r+0xe2>
 80039e4:	2300      	movs	r3, #0
 80039e6:	9309      	str	r3, [sp, #36]	; 0x24
 80039e8:	2320      	movs	r3, #32
 80039ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ee:	2330      	movs	r3, #48	; 0x30
 80039f0:	f04f 0b01 	mov.w	fp, #1
 80039f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039f8:	46b8      	mov	r8, r7
 80039fa:	4645      	mov	r5, r8
 80039fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d155      	bne.n	8003ab0 <_vfiprintf_r+0xf8>
 8003a04:	ebb8 0a07 	subs.w	sl, r8, r7
 8003a08:	d00b      	beq.n	8003a22 <_vfiprintf_r+0x6a>
 8003a0a:	4653      	mov	r3, sl
 8003a0c:	463a      	mov	r2, r7
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4630      	mov	r0, r6
 8003a12:	f7ff ffbf 	bl	8003994 <__sfputs_r>
 8003a16:	3001      	adds	r0, #1
 8003a18:	f000 80c4 	beq.w	8003ba4 <_vfiprintf_r+0x1ec>
 8003a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a1e:	4453      	add	r3, sl
 8003a20:	9309      	str	r3, [sp, #36]	; 0x24
 8003a22:	f898 3000 	ldrb.w	r3, [r8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80bc 	beq.w	8003ba4 <_vfiprintf_r+0x1ec>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a32:	9304      	str	r3, [sp, #16]
 8003a34:	9307      	str	r3, [sp, #28]
 8003a36:	9205      	str	r2, [sp, #20]
 8003a38:	9306      	str	r3, [sp, #24]
 8003a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a40:	2205      	movs	r2, #5
 8003a42:	7829      	ldrb	r1, [r5, #0]
 8003a44:	4860      	ldr	r0, [pc, #384]	; (8003bc8 <_vfiprintf_r+0x210>)
 8003a46:	f000 fb45 	bl	80040d4 <memchr>
 8003a4a:	f105 0801 	add.w	r8, r5, #1
 8003a4e:	9b04      	ldr	r3, [sp, #16]
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d131      	bne.n	8003ab8 <_vfiprintf_r+0x100>
 8003a54:	06d9      	lsls	r1, r3, #27
 8003a56:	bf44      	itt	mi
 8003a58:	2220      	movmi	r2, #32
 8003a5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a5e:	071a      	lsls	r2, r3, #28
 8003a60:	bf44      	itt	mi
 8003a62:	222b      	movmi	r2, #43	; 0x2b
 8003a64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a68:	782a      	ldrb	r2, [r5, #0]
 8003a6a:	2a2a      	cmp	r2, #42	; 0x2a
 8003a6c:	d02c      	beq.n	8003ac8 <_vfiprintf_r+0x110>
 8003a6e:	2100      	movs	r1, #0
 8003a70:	200a      	movs	r0, #10
 8003a72:	9a07      	ldr	r2, [sp, #28]
 8003a74:	46a8      	mov	r8, r5
 8003a76:	f898 3000 	ldrb.w	r3, [r8]
 8003a7a:	3501      	adds	r5, #1
 8003a7c:	3b30      	subs	r3, #48	; 0x30
 8003a7e:	2b09      	cmp	r3, #9
 8003a80:	d96d      	bls.n	8003b5e <_vfiprintf_r+0x1a6>
 8003a82:	b371      	cbz	r1, 8003ae2 <_vfiprintf_r+0x12a>
 8003a84:	e026      	b.n	8003ad4 <_vfiprintf_r+0x11c>
 8003a86:	4b51      	ldr	r3, [pc, #324]	; (8003bcc <_vfiprintf_r+0x214>)
 8003a88:	429c      	cmp	r4, r3
 8003a8a:	d101      	bne.n	8003a90 <_vfiprintf_r+0xd8>
 8003a8c:	68b4      	ldr	r4, [r6, #8]
 8003a8e:	e7a3      	b.n	80039d8 <_vfiprintf_r+0x20>
 8003a90:	4b4f      	ldr	r3, [pc, #316]	; (8003bd0 <_vfiprintf_r+0x218>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	bf08      	it	eq
 8003a96:	68f4      	ldreq	r4, [r6, #12]
 8003a98:	e79e      	b.n	80039d8 <_vfiprintf_r+0x20>
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f7ff fc6b 	bl	8003378 <__swsetup_r>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d09e      	beq.n	80039e4 <_vfiprintf_r+0x2c>
 8003aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aaa:	b01d      	add	sp, #116	; 0x74
 8003aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab0:	2b25      	cmp	r3, #37	; 0x25
 8003ab2:	d0a7      	beq.n	8003a04 <_vfiprintf_r+0x4c>
 8003ab4:	46a8      	mov	r8, r5
 8003ab6:	e7a0      	b.n	80039fa <_vfiprintf_r+0x42>
 8003ab8:	4a43      	ldr	r2, [pc, #268]	; (8003bc8 <_vfiprintf_r+0x210>)
 8003aba:	4645      	mov	r5, r8
 8003abc:	1a80      	subs	r0, r0, r2
 8003abe:	fa0b f000 	lsl.w	r0, fp, r0
 8003ac2:	4318      	orrs	r0, r3
 8003ac4:	9004      	str	r0, [sp, #16]
 8003ac6:	e7bb      	b.n	8003a40 <_vfiprintf_r+0x88>
 8003ac8:	9a03      	ldr	r2, [sp, #12]
 8003aca:	1d11      	adds	r1, r2, #4
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	9103      	str	r1, [sp, #12]
 8003ad0:	2a00      	cmp	r2, #0
 8003ad2:	db01      	blt.n	8003ad8 <_vfiprintf_r+0x120>
 8003ad4:	9207      	str	r2, [sp, #28]
 8003ad6:	e004      	b.n	8003ae2 <_vfiprintf_r+0x12a>
 8003ad8:	4252      	negs	r2, r2
 8003ada:	f043 0302 	orr.w	r3, r3, #2
 8003ade:	9207      	str	r2, [sp, #28]
 8003ae0:	9304      	str	r3, [sp, #16]
 8003ae2:	f898 3000 	ldrb.w	r3, [r8]
 8003ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ae8:	d110      	bne.n	8003b0c <_vfiprintf_r+0x154>
 8003aea:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003aee:	f108 0101 	add.w	r1, r8, #1
 8003af2:	2b2a      	cmp	r3, #42	; 0x2a
 8003af4:	d137      	bne.n	8003b66 <_vfiprintf_r+0x1ae>
 8003af6:	9b03      	ldr	r3, [sp, #12]
 8003af8:	f108 0802 	add.w	r8, r8, #2
 8003afc:	1d1a      	adds	r2, r3, #4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	9203      	str	r2, [sp, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bfb8      	it	lt
 8003b06:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b0a:	9305      	str	r3, [sp, #20]
 8003b0c:	4d31      	ldr	r5, [pc, #196]	; (8003bd4 <_vfiprintf_r+0x21c>)
 8003b0e:	2203      	movs	r2, #3
 8003b10:	f898 1000 	ldrb.w	r1, [r8]
 8003b14:	4628      	mov	r0, r5
 8003b16:	f000 fadd 	bl	80040d4 <memchr>
 8003b1a:	b140      	cbz	r0, 8003b2e <_vfiprintf_r+0x176>
 8003b1c:	2340      	movs	r3, #64	; 0x40
 8003b1e:	1b40      	subs	r0, r0, r5
 8003b20:	fa03 f000 	lsl.w	r0, r3, r0
 8003b24:	9b04      	ldr	r3, [sp, #16]
 8003b26:	f108 0801 	add.w	r8, r8, #1
 8003b2a:	4303      	orrs	r3, r0
 8003b2c:	9304      	str	r3, [sp, #16]
 8003b2e:	f898 1000 	ldrb.w	r1, [r8]
 8003b32:	2206      	movs	r2, #6
 8003b34:	4828      	ldr	r0, [pc, #160]	; (8003bd8 <_vfiprintf_r+0x220>)
 8003b36:	f108 0701 	add.w	r7, r8, #1
 8003b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b3e:	f000 fac9 	bl	80040d4 <memchr>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d034      	beq.n	8003bb0 <_vfiprintf_r+0x1f8>
 8003b46:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <_vfiprintf_r+0x224>)
 8003b48:	bb03      	cbnz	r3, 8003b8c <_vfiprintf_r+0x1d4>
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	3307      	adds	r3, #7
 8003b4e:	f023 0307 	bic.w	r3, r3, #7
 8003b52:	3308      	adds	r3, #8
 8003b54:	9303      	str	r3, [sp, #12]
 8003b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b58:	444b      	add	r3, r9
 8003b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b5c:	e74c      	b.n	80039f8 <_vfiprintf_r+0x40>
 8003b5e:	fb00 3202 	mla	r2, r0, r2, r3
 8003b62:	2101      	movs	r1, #1
 8003b64:	e786      	b.n	8003a74 <_vfiprintf_r+0xbc>
 8003b66:	2300      	movs	r3, #0
 8003b68:	250a      	movs	r5, #10
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	9305      	str	r3, [sp, #20]
 8003b6e:	4688      	mov	r8, r1
 8003b70:	f898 2000 	ldrb.w	r2, [r8]
 8003b74:	3101      	adds	r1, #1
 8003b76:	3a30      	subs	r2, #48	; 0x30
 8003b78:	2a09      	cmp	r2, #9
 8003b7a:	d903      	bls.n	8003b84 <_vfiprintf_r+0x1cc>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0c5      	beq.n	8003b0c <_vfiprintf_r+0x154>
 8003b80:	9005      	str	r0, [sp, #20]
 8003b82:	e7c3      	b.n	8003b0c <_vfiprintf_r+0x154>
 8003b84:	fb05 2000 	mla	r0, r5, r0, r2
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e7f0      	b.n	8003b6e <_vfiprintf_r+0x1b6>
 8003b8c:	ab03      	add	r3, sp, #12
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	4622      	mov	r2, r4
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <_vfiprintf_r+0x228>)
 8003b94:	a904      	add	r1, sp, #16
 8003b96:	4630      	mov	r0, r6
 8003b98:	f3af 8000 	nop.w
 8003b9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ba0:	4681      	mov	r9, r0
 8003ba2:	d1d8      	bne.n	8003b56 <_vfiprintf_r+0x19e>
 8003ba4:	89a3      	ldrh	r3, [r4, #12]
 8003ba6:	065b      	lsls	r3, r3, #25
 8003ba8:	f53f af7d 	bmi.w	8003aa6 <_vfiprintf_r+0xee>
 8003bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bae:	e77c      	b.n	8003aaa <_vfiprintf_r+0xf2>
 8003bb0:	ab03      	add	r3, sp, #12
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <_vfiprintf_r+0x228>)
 8003bb8:	a904      	add	r1, sp, #16
 8003bba:	4630      	mov	r0, r6
 8003bbc:	f000 f88a 	bl	8003cd4 <_printf_i>
 8003bc0:	e7ec      	b.n	8003b9c <_vfiprintf_r+0x1e4>
 8003bc2:	bf00      	nop
 8003bc4:	080042a4 	.word	0x080042a4
 8003bc8:	080042e8 	.word	0x080042e8
 8003bcc:	080042c4 	.word	0x080042c4
 8003bd0:	08004284 	.word	0x08004284
 8003bd4:	080042ee 	.word	0x080042ee
 8003bd8:	080042f2 	.word	0x080042f2
 8003bdc:	00000000 	.word	0x00000000
 8003be0:	08003995 	.word	0x08003995

08003be4 <_printf_common>:
 8003be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	4691      	mov	r9, r2
 8003bea:	461f      	mov	r7, r3
 8003bec:	688a      	ldr	r2, [r1, #8]
 8003bee:	690b      	ldr	r3, [r1, #16]
 8003bf0:	4606      	mov	r6, r0
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	bfb8      	it	lt
 8003bf6:	4613      	movlt	r3, r2
 8003bf8:	f8c9 3000 	str.w	r3, [r9]
 8003bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c00:	460c      	mov	r4, r1
 8003c02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c06:	b112      	cbz	r2, 8003c0e <_printf_common+0x2a>
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f8c9 3000 	str.w	r3, [r9]
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	0699      	lsls	r1, r3, #26
 8003c12:	bf42      	ittt	mi
 8003c14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c18:	3302      	addmi	r3, #2
 8003c1a:	f8c9 3000 	strmi.w	r3, [r9]
 8003c1e:	6825      	ldr	r5, [r4, #0]
 8003c20:	f015 0506 	ands.w	r5, r5, #6
 8003c24:	d107      	bne.n	8003c36 <_printf_common+0x52>
 8003c26:	f104 0a19 	add.w	sl, r4, #25
 8003c2a:	68e3      	ldr	r3, [r4, #12]
 8003c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	429d      	cmp	r5, r3
 8003c34:	db2a      	blt.n	8003c8c <_printf_common+0xa8>
 8003c36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c3a:	6822      	ldr	r2, [r4, #0]
 8003c3c:	3300      	adds	r3, #0
 8003c3e:	bf18      	it	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	0692      	lsls	r2, r2, #26
 8003c44:	d42f      	bmi.n	8003ca6 <_printf_common+0xc2>
 8003c46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c4a:	4639      	mov	r1, r7
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	47c0      	blx	r8
 8003c50:	3001      	adds	r0, #1
 8003c52:	d022      	beq.n	8003c9a <_printf_common+0xb6>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	68e5      	ldr	r5, [r4, #12]
 8003c58:	f003 0306 	and.w	r3, r3, #6
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	bf18      	it	ne
 8003c60:	2500      	movne	r5, #0
 8003c62:	f8d9 2000 	ldr.w	r2, [r9]
 8003c66:	f04f 0900 	mov.w	r9, #0
 8003c6a:	bf08      	it	eq
 8003c6c:	1aad      	subeq	r5, r5, r2
 8003c6e:	68a3      	ldr	r3, [r4, #8]
 8003c70:	6922      	ldr	r2, [r4, #16]
 8003c72:	bf08      	it	eq
 8003c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bfc4      	itt	gt
 8003c7c:	1a9b      	subgt	r3, r3, r2
 8003c7e:	18ed      	addgt	r5, r5, r3
 8003c80:	341a      	adds	r4, #26
 8003c82:	454d      	cmp	r5, r9
 8003c84:	d11b      	bne.n	8003cbe <_printf_common+0xda>
 8003c86:	2000      	movs	r0, #0
 8003c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4652      	mov	r2, sl
 8003c90:	4639      	mov	r1, r7
 8003c92:	4630      	mov	r0, r6
 8003c94:	47c0      	blx	r8
 8003c96:	3001      	adds	r0, #1
 8003c98:	d103      	bne.n	8003ca2 <_printf_common+0xbe>
 8003c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca2:	3501      	adds	r5, #1
 8003ca4:	e7c1      	b.n	8003c2a <_printf_common+0x46>
 8003ca6:	2030      	movs	r0, #48	; 0x30
 8003ca8:	18e1      	adds	r1, r4, r3
 8003caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cb4:	4422      	add	r2, r4
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cbc:	e7c3      	b.n	8003c46 <_printf_common+0x62>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	4639      	mov	r1, r7
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	47c0      	blx	r8
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d0e6      	beq.n	8003c9a <_printf_common+0xb6>
 8003ccc:	f109 0901 	add.w	r9, r9, #1
 8003cd0:	e7d7      	b.n	8003c82 <_printf_common+0x9e>
	...

08003cd4 <_printf_i>:
 8003cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cd8:	4617      	mov	r7, r2
 8003cda:	7e0a      	ldrb	r2, [r1, #24]
 8003cdc:	b085      	sub	sp, #20
 8003cde:	2a6e      	cmp	r2, #110	; 0x6e
 8003ce0:	4698      	mov	r8, r3
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ce8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003cec:	f000 80bc 	beq.w	8003e68 <_printf_i+0x194>
 8003cf0:	d81a      	bhi.n	8003d28 <_printf_i+0x54>
 8003cf2:	2a63      	cmp	r2, #99	; 0x63
 8003cf4:	d02e      	beq.n	8003d54 <_printf_i+0x80>
 8003cf6:	d80a      	bhi.n	8003d0e <_printf_i+0x3a>
 8003cf8:	2a00      	cmp	r2, #0
 8003cfa:	f000 80c8 	beq.w	8003e8e <_printf_i+0x1ba>
 8003cfe:	2a58      	cmp	r2, #88	; 0x58
 8003d00:	f000 808a 	beq.w	8003e18 <_printf_i+0x144>
 8003d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d08:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003d0c:	e02a      	b.n	8003d64 <_printf_i+0x90>
 8003d0e:	2a64      	cmp	r2, #100	; 0x64
 8003d10:	d001      	beq.n	8003d16 <_printf_i+0x42>
 8003d12:	2a69      	cmp	r2, #105	; 0x69
 8003d14:	d1f6      	bne.n	8003d04 <_printf_i+0x30>
 8003d16:	6821      	ldr	r1, [r4, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003d1e:	d023      	beq.n	8003d68 <_printf_i+0x94>
 8003d20:	1d11      	adds	r1, r2, #4
 8003d22:	6019      	str	r1, [r3, #0]
 8003d24:	6813      	ldr	r3, [r2, #0]
 8003d26:	e027      	b.n	8003d78 <_printf_i+0xa4>
 8003d28:	2a73      	cmp	r2, #115	; 0x73
 8003d2a:	f000 80b4 	beq.w	8003e96 <_printf_i+0x1c2>
 8003d2e:	d808      	bhi.n	8003d42 <_printf_i+0x6e>
 8003d30:	2a6f      	cmp	r2, #111	; 0x6f
 8003d32:	d02a      	beq.n	8003d8a <_printf_i+0xb6>
 8003d34:	2a70      	cmp	r2, #112	; 0x70
 8003d36:	d1e5      	bne.n	8003d04 <_printf_i+0x30>
 8003d38:	680a      	ldr	r2, [r1, #0]
 8003d3a:	f042 0220 	orr.w	r2, r2, #32
 8003d3e:	600a      	str	r2, [r1, #0]
 8003d40:	e003      	b.n	8003d4a <_printf_i+0x76>
 8003d42:	2a75      	cmp	r2, #117	; 0x75
 8003d44:	d021      	beq.n	8003d8a <_printf_i+0xb6>
 8003d46:	2a78      	cmp	r2, #120	; 0x78
 8003d48:	d1dc      	bne.n	8003d04 <_printf_i+0x30>
 8003d4a:	2278      	movs	r2, #120	; 0x78
 8003d4c:	496f      	ldr	r1, [pc, #444]	; (8003f0c <_printf_i+0x238>)
 8003d4e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003d52:	e064      	b.n	8003e1e <_printf_i+0x14a>
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003d5a:	1d11      	adds	r1, r2, #4
 8003d5c:	6019      	str	r1, [r3, #0]
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0a3      	b.n	8003eb0 <_printf_i+0x1dc>
 8003d68:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003d6c:	f102 0104 	add.w	r1, r2, #4
 8003d70:	6019      	str	r1, [r3, #0]
 8003d72:	d0d7      	beq.n	8003d24 <_printf_i+0x50>
 8003d74:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	da03      	bge.n	8003d84 <_printf_i+0xb0>
 8003d7c:	222d      	movs	r2, #45	; 0x2d
 8003d7e:	425b      	negs	r3, r3
 8003d80:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d84:	4962      	ldr	r1, [pc, #392]	; (8003f10 <_printf_i+0x23c>)
 8003d86:	220a      	movs	r2, #10
 8003d88:	e017      	b.n	8003dba <_printf_i+0xe6>
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	6819      	ldr	r1, [r3, #0]
 8003d8e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003d92:	d003      	beq.n	8003d9c <_printf_i+0xc8>
 8003d94:	1d08      	adds	r0, r1, #4
 8003d96:	6018      	str	r0, [r3, #0]
 8003d98:	680b      	ldr	r3, [r1, #0]
 8003d9a:	e006      	b.n	8003daa <_printf_i+0xd6>
 8003d9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003da0:	f101 0004 	add.w	r0, r1, #4
 8003da4:	6018      	str	r0, [r3, #0]
 8003da6:	d0f7      	beq.n	8003d98 <_printf_i+0xc4>
 8003da8:	880b      	ldrh	r3, [r1, #0]
 8003daa:	2a6f      	cmp	r2, #111	; 0x6f
 8003dac:	bf14      	ite	ne
 8003dae:	220a      	movne	r2, #10
 8003db0:	2208      	moveq	r2, #8
 8003db2:	4957      	ldr	r1, [pc, #348]	; (8003f10 <_printf_i+0x23c>)
 8003db4:	2000      	movs	r0, #0
 8003db6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003dba:	6865      	ldr	r5, [r4, #4]
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	60a5      	str	r5, [r4, #8]
 8003dc0:	f2c0 809c 	blt.w	8003efc <_printf_i+0x228>
 8003dc4:	6820      	ldr	r0, [r4, #0]
 8003dc6:	f020 0004 	bic.w	r0, r0, #4
 8003dca:	6020      	str	r0, [r4, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d13f      	bne.n	8003e50 <_printf_i+0x17c>
 8003dd0:	2d00      	cmp	r5, #0
 8003dd2:	f040 8095 	bne.w	8003f00 <_printf_i+0x22c>
 8003dd6:	4675      	mov	r5, lr
 8003dd8:	2a08      	cmp	r2, #8
 8003dda:	d10b      	bne.n	8003df4 <_printf_i+0x120>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	07da      	lsls	r2, r3, #31
 8003de0:	d508      	bpl.n	8003df4 <_printf_i+0x120>
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	6862      	ldr	r2, [r4, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	bfde      	ittt	le
 8003dea:	2330      	movle	r3, #48	; 0x30
 8003dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003df0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003df4:	ebae 0305 	sub.w	r3, lr, r5
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	f8cd 8000 	str.w	r8, [sp]
 8003dfe:	463b      	mov	r3, r7
 8003e00:	aa03      	add	r2, sp, #12
 8003e02:	4621      	mov	r1, r4
 8003e04:	4630      	mov	r0, r6
 8003e06:	f7ff feed 	bl	8003be4 <_printf_common>
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d155      	bne.n	8003eba <_printf_i+0x1e6>
 8003e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e12:	b005      	add	sp, #20
 8003e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e18:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003e1c:	493c      	ldr	r1, [pc, #240]	; (8003f10 <_printf_i+0x23c>)
 8003e1e:	6822      	ldr	r2, [r4, #0]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e26:	f100 0504 	add.w	r5, r0, #4
 8003e2a:	601d      	str	r5, [r3, #0]
 8003e2c:	d001      	beq.n	8003e32 <_printf_i+0x15e>
 8003e2e:	6803      	ldr	r3, [r0, #0]
 8003e30:	e002      	b.n	8003e38 <_printf_i+0x164>
 8003e32:	0655      	lsls	r5, r2, #25
 8003e34:	d5fb      	bpl.n	8003e2e <_printf_i+0x15a>
 8003e36:	8803      	ldrh	r3, [r0, #0]
 8003e38:	07d0      	lsls	r0, r2, #31
 8003e3a:	bf44      	itt	mi
 8003e3c:	f042 0220 	orrmi.w	r2, r2, #32
 8003e40:	6022      	strmi	r2, [r4, #0]
 8003e42:	b91b      	cbnz	r3, 8003e4c <_printf_i+0x178>
 8003e44:	6822      	ldr	r2, [r4, #0]
 8003e46:	f022 0220 	bic.w	r2, r2, #32
 8003e4a:	6022      	str	r2, [r4, #0]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	e7b1      	b.n	8003db4 <_printf_i+0xe0>
 8003e50:	4675      	mov	r5, lr
 8003e52:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e56:	fb02 3310 	mls	r3, r2, r0, r3
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e60:	4603      	mov	r3, r0
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d1f5      	bne.n	8003e52 <_printf_i+0x17e>
 8003e66:	e7b7      	b.n	8003dd8 <_printf_i+0x104>
 8003e68:	6808      	ldr	r0, [r1, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003e70:	6949      	ldr	r1, [r1, #20]
 8003e72:	d004      	beq.n	8003e7e <_printf_i+0x1aa>
 8003e74:	1d10      	adds	r0, r2, #4
 8003e76:	6018      	str	r0, [r3, #0]
 8003e78:	6813      	ldr	r3, [r2, #0]
 8003e7a:	6019      	str	r1, [r3, #0]
 8003e7c:	e007      	b.n	8003e8e <_printf_i+0x1ba>
 8003e7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e82:	f102 0004 	add.w	r0, r2, #4
 8003e86:	6018      	str	r0, [r3, #0]
 8003e88:	6813      	ldr	r3, [r2, #0]
 8003e8a:	d0f6      	beq.n	8003e7a <_printf_i+0x1a6>
 8003e8c:	8019      	strh	r1, [r3, #0]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	4675      	mov	r5, lr
 8003e92:	6123      	str	r3, [r4, #16]
 8003e94:	e7b1      	b.n	8003dfa <_printf_i+0x126>
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	1d11      	adds	r1, r2, #4
 8003e9a:	6019      	str	r1, [r3, #0]
 8003e9c:	6815      	ldr	r5, [r2, #0]
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	6862      	ldr	r2, [r4, #4]
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f000 f916 	bl	80040d4 <memchr>
 8003ea8:	b108      	cbz	r0, 8003eae <_printf_i+0x1da>
 8003eaa:	1b40      	subs	r0, r0, r5
 8003eac:	6060      	str	r0, [r4, #4]
 8003eae:	6863      	ldr	r3, [r4, #4]
 8003eb0:	6123      	str	r3, [r4, #16]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eb8:	e79f      	b.n	8003dfa <_printf_i+0x126>
 8003eba:	6923      	ldr	r3, [r4, #16]
 8003ebc:	462a      	mov	r2, r5
 8003ebe:	4639      	mov	r1, r7
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	47c0      	blx	r8
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d0a2      	beq.n	8003e0e <_printf_i+0x13a>
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	079b      	lsls	r3, r3, #30
 8003ecc:	d507      	bpl.n	8003ede <_printf_i+0x20a>
 8003ece:	2500      	movs	r5, #0
 8003ed0:	f104 0919 	add.w	r9, r4, #25
 8003ed4:	68e3      	ldr	r3, [r4, #12]
 8003ed6:	9a03      	ldr	r2, [sp, #12]
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	429d      	cmp	r5, r3
 8003edc:	db05      	blt.n	8003eea <_printf_i+0x216>
 8003ede:	68e0      	ldr	r0, [r4, #12]
 8003ee0:	9b03      	ldr	r3, [sp, #12]
 8003ee2:	4298      	cmp	r0, r3
 8003ee4:	bfb8      	it	lt
 8003ee6:	4618      	movlt	r0, r3
 8003ee8:	e793      	b.n	8003e12 <_printf_i+0x13e>
 8003eea:	2301      	movs	r3, #1
 8003eec:	464a      	mov	r2, r9
 8003eee:	4639      	mov	r1, r7
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	47c0      	blx	r8
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d08a      	beq.n	8003e0e <_printf_i+0x13a>
 8003ef8:	3501      	adds	r5, #1
 8003efa:	e7eb      	b.n	8003ed4 <_printf_i+0x200>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1a7      	bne.n	8003e50 <_printf_i+0x17c>
 8003f00:	780b      	ldrb	r3, [r1, #0]
 8003f02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f0a:	e765      	b.n	8003dd8 <_printf_i+0x104>
 8003f0c:	0800430a 	.word	0x0800430a
 8003f10:	080042f9 	.word	0x080042f9

08003f14 <_putc_r>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	460d      	mov	r5, r1
 8003f18:	4614      	mov	r4, r2
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	b118      	cbz	r0, 8003f26 <_putc_r+0x12>
 8003f1e:	6983      	ldr	r3, [r0, #24]
 8003f20:	b90b      	cbnz	r3, 8003f26 <_putc_r+0x12>
 8003f22:	f7ff fb89 	bl	8003638 <__sinit>
 8003f26:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <_putc_r+0x60>)
 8003f28:	429c      	cmp	r4, r3
 8003f2a:	d112      	bne.n	8003f52 <_putc_r+0x3e>
 8003f2c:	6874      	ldr	r4, [r6, #4]
 8003f2e:	68a3      	ldr	r3, [r4, #8]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	60a3      	str	r3, [r4, #8]
 8003f36:	da16      	bge.n	8003f66 <_putc_r+0x52>
 8003f38:	69a2      	ldr	r2, [r4, #24]
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	db02      	blt.n	8003f44 <_putc_r+0x30>
 8003f3e:	b2eb      	uxtb	r3, r5
 8003f40:	2b0a      	cmp	r3, #10
 8003f42:	d110      	bne.n	8003f66 <_putc_r+0x52>
 8003f44:	4622      	mov	r2, r4
 8003f46:	4629      	mov	r1, r5
 8003f48:	4630      	mov	r0, r6
 8003f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f4e:	f7ff b9c1 	b.w	80032d4 <__swbuf_r>
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <_putc_r+0x64>)
 8003f54:	429c      	cmp	r4, r3
 8003f56:	d101      	bne.n	8003f5c <_putc_r+0x48>
 8003f58:	68b4      	ldr	r4, [r6, #8]
 8003f5a:	e7e8      	b.n	8003f2e <_putc_r+0x1a>
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <_putc_r+0x68>)
 8003f5e:	429c      	cmp	r4, r3
 8003f60:	bf08      	it	eq
 8003f62:	68f4      	ldreq	r4, [r6, #12]
 8003f64:	e7e3      	b.n	8003f2e <_putc_r+0x1a>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	b2e8      	uxtb	r0, r5
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	6022      	str	r2, [r4, #0]
 8003f6e:	701d      	strb	r5, [r3, #0]
 8003f70:	bd70      	pop	{r4, r5, r6, pc}
 8003f72:	bf00      	nop
 8003f74:	080042a4 	.word	0x080042a4
 8003f78:	080042c4 	.word	0x080042c4
 8003f7c:	08004284 	.word	0x08004284

08003f80 <_sbrk_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	2300      	movs	r3, #0
 8003f84:	4c05      	ldr	r4, [pc, #20]	; (8003f9c <_sbrk_r+0x1c>)
 8003f86:	4605      	mov	r5, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	6023      	str	r3, [r4, #0]
 8003f8c:	f000 f8ec 	bl	8004168 <_sbrk>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_sbrk_r+0x1a>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_sbrk_r+0x1a>
 8003f98:	602b      	str	r3, [r5, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	20000ac4 	.word	0x20000ac4

08003fa0 <__sread>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa8:	f000 f8a4 	bl	80040f4 <_read_r>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	bfab      	itete	ge
 8003fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8003fb4:	181b      	addge	r3, r3, r0
 8003fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fba:	bfac      	ite	ge
 8003fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fbe:	81a3      	strhlt	r3, [r4, #12]
 8003fc0:	bd10      	pop	{r4, pc}

08003fc2 <__swrite>:
 8003fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc6:	461f      	mov	r7, r3
 8003fc8:	898b      	ldrh	r3, [r1, #12]
 8003fca:	4605      	mov	r5, r0
 8003fcc:	05db      	lsls	r3, r3, #23
 8003fce:	460c      	mov	r4, r1
 8003fd0:	4616      	mov	r6, r2
 8003fd2:	d505      	bpl.n	8003fe0 <__swrite+0x1e>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fdc:	f000 f868 	bl	80040b0 <_lseek_r>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	4632      	mov	r2, r6
 8003fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fee:	463b      	mov	r3, r7
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff6:	f000 b817 	b.w	8004028 <_write_r>

08003ffa <__sseek>:
 8003ffa:	b510      	push	{r4, lr}
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004002:	f000 f855 	bl	80040b0 <_lseek_r>
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	bf15      	itete	ne
 800400c:	6560      	strne	r0, [r4, #84]	; 0x54
 800400e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004016:	81a3      	strheq	r3, [r4, #12]
 8004018:	bf18      	it	ne
 800401a:	81a3      	strhne	r3, [r4, #12]
 800401c:	bd10      	pop	{r4, pc}

0800401e <__sclose>:
 800401e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004022:	f000 b813 	b.w	800404c <_close_r>
	...

08004028 <_write_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4605      	mov	r5, r0
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	2200      	movs	r2, #0
 8004032:	4c05      	ldr	r4, [pc, #20]	; (8004048 <_write_r+0x20>)
 8004034:	6022      	str	r2, [r4, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	f000 f8a4 	bl	8004184 <_write>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d102      	bne.n	8004046 <_write_r+0x1e>
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	b103      	cbz	r3, 8004046 <_write_r+0x1e>
 8004044:	602b      	str	r3, [r5, #0]
 8004046:	bd38      	pop	{r3, r4, r5, pc}
 8004048:	20000ac4 	.word	0x20000ac4

0800404c <_close_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	2300      	movs	r3, #0
 8004050:	4c05      	ldr	r4, [pc, #20]	; (8004068 <_close_r+0x1c>)
 8004052:	4605      	mov	r5, r0
 8004054:	4608      	mov	r0, r1
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	f000 f85e 	bl	8004118 <_close>
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	d102      	bne.n	8004066 <_close_r+0x1a>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	b103      	cbz	r3, 8004066 <_close_r+0x1a>
 8004064:	602b      	str	r3, [r5, #0]
 8004066:	bd38      	pop	{r3, r4, r5, pc}
 8004068:	20000ac4 	.word	0x20000ac4

0800406c <_fstat_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	2300      	movs	r3, #0
 8004070:	4c06      	ldr	r4, [pc, #24]	; (800408c <_fstat_r+0x20>)
 8004072:	4605      	mov	r5, r0
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	f000 f855 	bl	8004128 <_fstat>
 800407e:	1c43      	adds	r3, r0, #1
 8004080:	d102      	bne.n	8004088 <_fstat_r+0x1c>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	b103      	cbz	r3, 8004088 <_fstat_r+0x1c>
 8004086:	602b      	str	r3, [r5, #0]
 8004088:	bd38      	pop	{r3, r4, r5, pc}
 800408a:	bf00      	nop
 800408c:	20000ac4 	.word	0x20000ac4

08004090 <_isatty_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	2300      	movs	r3, #0
 8004094:	4c05      	ldr	r4, [pc, #20]	; (80040ac <_isatty_r+0x1c>)
 8004096:	4605      	mov	r5, r0
 8004098:	4608      	mov	r0, r1
 800409a:	6023      	str	r3, [r4, #0]
 800409c:	f000 f84c 	bl	8004138 <_isatty>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_isatty_r+0x1a>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_isatty_r+0x1a>
 80040a8:	602b      	str	r3, [r5, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	20000ac4 	.word	0x20000ac4

080040b0 <_lseek_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4605      	mov	r5, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	2200      	movs	r2, #0
 80040ba:	4c05      	ldr	r4, [pc, #20]	; (80040d0 <_lseek_r+0x20>)
 80040bc:	6022      	str	r2, [r4, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	f000 f842 	bl	8004148 <_lseek>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d102      	bne.n	80040ce <_lseek_r+0x1e>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	b103      	cbz	r3, 80040ce <_lseek_r+0x1e>
 80040cc:	602b      	str	r3, [r5, #0]
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	20000ac4 	.word	0x20000ac4

080040d4 <memchr>:
 80040d4:	b510      	push	{r4, lr}
 80040d6:	b2c9      	uxtb	r1, r1
 80040d8:	4402      	add	r2, r0
 80040da:	4290      	cmp	r0, r2
 80040dc:	4603      	mov	r3, r0
 80040de:	d101      	bne.n	80040e4 <memchr+0x10>
 80040e0:	2000      	movs	r0, #0
 80040e2:	bd10      	pop	{r4, pc}
 80040e4:	781c      	ldrb	r4, [r3, #0]
 80040e6:	3001      	adds	r0, #1
 80040e8:	428c      	cmp	r4, r1
 80040ea:	d1f6      	bne.n	80040da <memchr+0x6>
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd10      	pop	{r4, pc}

080040f0 <__malloc_lock>:
 80040f0:	4770      	bx	lr

080040f2 <__malloc_unlock>:
 80040f2:	4770      	bx	lr

080040f4 <_read_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4605      	mov	r5, r0
 80040f8:	4608      	mov	r0, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	2200      	movs	r2, #0
 80040fe:	4c05      	ldr	r4, [pc, #20]	; (8004114 <_read_r+0x20>)
 8004100:	6022      	str	r2, [r4, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	f000 f828 	bl	8004158 <_read>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d102      	bne.n	8004112 <_read_r+0x1e>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	b103      	cbz	r3, 8004112 <_read_r+0x1e>
 8004110:	602b      	str	r3, [r5, #0]
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	20000ac4 	.word	0x20000ac4

08004118 <_close>:
 8004118:	2258      	movs	r2, #88	; 0x58
 800411a:	4b02      	ldr	r3, [pc, #8]	; (8004124 <_close+0xc>)
 800411c:	f04f 30ff 	mov.w	r0, #4294967295
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	4770      	bx	lr
 8004124:	20000ac4 	.word	0x20000ac4

08004128 <_fstat>:
 8004128:	2258      	movs	r2, #88	; 0x58
 800412a:	4b02      	ldr	r3, [pc, #8]	; (8004134 <_fstat+0xc>)
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	4770      	bx	lr
 8004134:	20000ac4 	.word	0x20000ac4

08004138 <_isatty>:
 8004138:	2258      	movs	r2, #88	; 0x58
 800413a:	4b02      	ldr	r3, [pc, #8]	; (8004144 <_isatty+0xc>)
 800413c:	2000      	movs	r0, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000ac4 	.word	0x20000ac4

08004148 <_lseek>:
 8004148:	2258      	movs	r2, #88	; 0x58
 800414a:	4b02      	ldr	r3, [pc, #8]	; (8004154 <_lseek+0xc>)
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	4770      	bx	lr
 8004154:	20000ac4 	.word	0x20000ac4

08004158 <_read>:
 8004158:	2258      	movs	r2, #88	; 0x58
 800415a:	4b02      	ldr	r3, [pc, #8]	; (8004164 <_read+0xc>)
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	4770      	bx	lr
 8004164:	20000ac4 	.word	0x20000ac4

08004168 <_sbrk>:
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <_sbrk+0x14>)
 800416a:	4602      	mov	r2, r0
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	b909      	cbnz	r1, 8004174 <_sbrk+0xc>
 8004170:	4903      	ldr	r1, [pc, #12]	; (8004180 <_sbrk+0x18>)
 8004172:	6019      	str	r1, [r3, #0]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	4402      	add	r2, r0
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	4770      	bx	lr
 800417c:	2000019c 	.word	0x2000019c
 8004180:	20000ac8 	.word	0x20000ac8

08004184 <_write>:
 8004184:	2258      	movs	r2, #88	; 0x58
 8004186:	4b02      	ldr	r3, [pc, #8]	; (8004190 <_write+0xc>)
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	4770      	bx	lr
 8004190:	20000ac4 	.word	0x20000ac4

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
